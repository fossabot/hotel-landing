(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return stripTime; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return today; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return dateValue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return addDays; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return addWeeks; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return addMonths; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return addYears; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return dayOfTheWeekOf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return getWeek; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return startOfYearPeriod; });\nfunction stripTime(timeValue) {\n  return new Date(timeValue).setHours(0, 0, 0, 0);\n}\nfunction today() {\n  return new Date().setHours(0, 0, 0, 0);\n} // Get the time value of the start of given date or year, month and day\n\nfunction dateValue(...args) {\n  switch (args.length) {\n    case 0:\n      return today();\n\n    case 1:\n      return stripTime(args[0]);\n  } // use setFullYear() to keep 2-digit year from being mapped to 1900-1999\n\n\n  const newDate = new Date(0);\n  newDate.setFullYear(...args);\n  return newDate.setHours(0, 0, 0, 0);\n}\nfunction addDays(date, amount) {\n  const newDate = new Date(date);\n  return newDate.setDate(newDate.getDate() + amount);\n}\nfunction addWeeks(date, amount) {\n  return addDays(date, amount * 7);\n}\nfunction addMonths(date, amount) {\n  // If the day of the date is not in the new month, the last day of the new\n  // month will be returned. e.g. Jan 31 + 1 month → Feb 28 (not Mar 03)\n  const newDate = new Date(date);\n  const monthsToSet = newDate.getMonth() + amount;\n  let expectedMonth = monthsToSet % 12;\n\n  if (expectedMonth < 0) {\n    expectedMonth += 12;\n  }\n\n  const time = newDate.setMonth(monthsToSet);\n  return newDate.getMonth() !== expectedMonth ? newDate.setDate(0) : time;\n}\nfunction addYears(date, amount) {\n  // If the date is Feb 29 and the new year is not a leap year, Feb 28 of the\n  // new year will be returned.\n  const newDate = new Date(date);\n  const expectedMonth = newDate.getMonth();\n  const time = newDate.setFullYear(newDate.getFullYear() + amount);\n  return expectedMonth === 1 && newDate.getMonth() === 2 ? newDate.setDate(0) : time;\n} // Calculate the distance bettwen 2 days of the week\n\nfunction dayDiff(day, from) {\n  return (day - from + 7) % 7;\n} // Get the date of the specified day of the week of given base date\n\n\nfunction dayOfTheWeekOf(baseDate, dayOfWeek, weekStart = 0) {\n  const baseDay = new Date(baseDate).getDay();\n  return addDays(baseDate, dayDiff(dayOfWeek, weekStart) - dayDiff(baseDay, weekStart));\n} // Get the ISO week of a date\n\nfunction getWeek(date) {\n  // start of ISO week is Monday\n  const thuOfTheWeek = dayOfTheWeekOf(date, 4, 1); // 1st week == the week where the 4th of January is in\n\n  const firstThu = dayOfTheWeekOf(new Date(thuOfTheWeek).setMonth(0, 4), 4, 1);\n  return Math.round((thuOfTheWeek - firstThu) / 604800000) + 1;\n} // Get the start year of the period of years that includes given date\n// years: length of the year period\n\nfunction startOfYearPeriod(date, years) {\n  /* @see https://en.wikipedia.org/wiki/Year_zero#ISO_8601 */\n  const year = new Date(date).getFullYear();\n  return Math.floor(year / years) * years;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return hasProperty; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return lastItemOf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return pushUnique; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return stringToArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return isInRange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return limitToRange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createTagRepeat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return optimizeTemplateHTML; });\nfunction hasProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\nfunction lastItemOf(arr) {\n  return arr[arr.length - 1];\n} // push only the items not included in the array\n\nfunction pushUnique(arr, ...items) {\n  items.forEach(item => {\n    if (arr.includes(item)) {\n      return;\n    }\n\n    arr.push(item);\n  });\n  return arr;\n}\nfunction stringToArray(str, separator) {\n  // convert empty string to an empty array\n  return str ? str.split(separator) : [];\n}\nfunction isInRange(testVal, min, max) {\n  const minOK = min === undefined || testVal >= min;\n  const maxOK = max === undefined || testVal <= max;\n  return minOK && maxOK;\n}\nfunction limitToRange(val, min, max) {\n  if (val < min) {\n    return min;\n  }\n\n  if (val > max) {\n    return max;\n  }\n\n  return val;\n}\nfunction createTagRepeat(tagName, repeat, attributes = {}, index = 0, html = \'\') {\n  const openTagSrc = Object.keys(attributes).reduce((src, attr) => {\n    let val = attributes[attr];\n\n    if (typeof val === \'function\') {\n      val = val(index);\n    }\n\n    return `${src} ${attr}="${val}"`;\n  }, tagName);\n  html += `<${openTagSrc}></${tagName}>`;\n  const next = index + 1;\n  return next < repeat ? createTagRepeat(tagName, repeat, attributes, next, html) : html;\n} // Remove the spacing surrounding tags for HTML parser not to create text nodes\n// before/after elements\n\nfunction optimizeTemplateHTML(html) {\n  return html.replace(/>\\s+/g, \'>\').replace(/\\s+</, \'<\');\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmFuaWxsYWpzLWRhdGVwaWNrZXIvanMvbGliL3V0aWxzLmpzP2M4MzMiXSwibmFtZXMiOlsiaGFzUHJvcGVydHkiLCJvYmoiLCJwcm9wIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwibGFzdEl0ZW1PZiIsImFyciIsImxlbmd0aCIsInB1c2hVbmlxdWUiLCJpdGVtcyIsImZvckVhY2giLCJpdGVtIiwiaW5jbHVkZXMiLCJwdXNoIiwic3RyaW5nVG9BcnJheSIsInN0ciIsInNlcGFyYXRvciIsInNwbGl0IiwiaXNJblJhbmdlIiwidGVzdFZhbCIsIm1pbiIsIm1heCIsIm1pbk9LIiwidW5kZWZpbmVkIiwibWF4T0siLCJsaW1pdFRvUmFuZ2UiLCJ2YWwiLCJjcmVhdGVUYWdSZXBlYXQiLCJ0YWdOYW1lIiwicmVwZWF0IiwiYXR0cmlidXRlcyIsImluZGV4IiwiaHRtbCIsIm9wZW5UYWdTcmMiLCJrZXlzIiwicmVkdWNlIiwic3JjIiwiYXR0ciIsIm5leHQiLCJvcHRpbWl6ZVRlbXBsYXRlSFRNTCIsInJlcGxhY2UiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBTyxTQUFTQSxXQUFULENBQXFCQyxHQUFyQixFQUEwQkMsSUFBMUIsRUFBZ0M7QUFDckMsU0FBT0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxjQUFqQixDQUFnQ0MsSUFBaEMsQ0FBcUNMLEdBQXJDLEVBQTBDQyxJQUExQyxDQUFQO0FBQ0Q7QUFFTSxTQUFTSyxVQUFULENBQW9CQyxHQUFwQixFQUF5QjtBQUM5QixTQUFPQSxHQUFHLENBQUNBLEdBQUcsQ0FBQ0MsTUFBSixHQUFhLENBQWQsQ0FBVjtBQUNELEMsQ0FFRDs7QUFDTyxTQUFTQyxVQUFULENBQW9CRixHQUFwQixFQUF5QixHQUFHRyxLQUE1QixFQUFtQztBQUN4Q0EsT0FBSyxDQUFDQyxPQUFOLENBQWVDLElBQUQsSUFBVTtBQUN0QixRQUFJTCxHQUFHLENBQUNNLFFBQUosQ0FBYUQsSUFBYixDQUFKLEVBQXdCO0FBQ3RCO0FBQ0Q7O0FBQ0RMLE9BQUcsQ0FBQ08sSUFBSixDQUFTRixJQUFUO0FBQ0QsR0FMRDtBQU1BLFNBQU9MLEdBQVA7QUFDRDtBQUVNLFNBQVNRLGFBQVQsQ0FBdUJDLEdBQXZCLEVBQTRCQyxTQUE1QixFQUF1QztBQUM1QztBQUNBLFNBQU9ELEdBQUcsR0FBR0EsR0FBRyxDQUFDRSxLQUFKLENBQVVELFNBQVYsQ0FBSCxHQUEwQixFQUFwQztBQUNEO0FBRU0sU0FBU0UsU0FBVCxDQUFtQkMsT0FBbkIsRUFBNEJDLEdBQTVCLEVBQWlDQyxHQUFqQyxFQUFzQztBQUMzQyxRQUFNQyxLQUFLLEdBQUdGLEdBQUcsS0FBS0csU0FBUixJQUFxQkosT0FBTyxJQUFJQyxHQUE5QztBQUNBLFFBQU1JLEtBQUssR0FBR0gsR0FBRyxLQUFLRSxTQUFSLElBQXFCSixPQUFPLElBQUlFLEdBQTlDO0FBQ0EsU0FBT0MsS0FBSyxJQUFJRSxLQUFoQjtBQUNEO0FBRU0sU0FBU0MsWUFBVCxDQUFzQkMsR0FBdEIsRUFBMkJOLEdBQTNCLEVBQWdDQyxHQUFoQyxFQUFxQztBQUMxQyxNQUFJSyxHQUFHLEdBQUdOLEdBQVYsRUFBZTtBQUNiLFdBQU9BLEdBQVA7QUFDRDs7QUFDRCxNQUFJTSxHQUFHLEdBQUdMLEdBQVYsRUFBZTtBQUNiLFdBQU9BLEdBQVA7QUFDRDs7QUFDRCxTQUFPSyxHQUFQO0FBQ0Q7QUFFTSxTQUFTQyxlQUFULENBQXlCQyxPQUF6QixFQUFrQ0MsTUFBbEMsRUFBMENDLFVBQVUsR0FBRyxFQUF2RCxFQUEyREMsS0FBSyxHQUFHLENBQW5FLEVBQXNFQyxJQUFJLEdBQUcsRUFBN0UsRUFBaUY7QUFDdEYsUUFBTUMsVUFBVSxHQUFHaEMsTUFBTSxDQUFDaUMsSUFBUCxDQUFZSixVQUFaLEVBQXdCSyxNQUF4QixDQUErQixDQUFDQyxHQUFELEVBQU1DLElBQU4sS0FBZTtBQUMvRCxRQUFJWCxHQUFHLEdBQUdJLFVBQVUsQ0FBQ08sSUFBRCxDQUFwQjs7QUFDQSxRQUFJLE9BQU9YLEdBQVAsS0FBZSxVQUFuQixFQUErQjtBQUM3QkEsU0FBRyxHQUFHQSxHQUFHLENBQUNLLEtBQUQsQ0FBVDtBQUNEOztBQUNELFdBQVEsR0FBRUssR0FBSSxJQUFHQyxJQUFLLEtBQUlYLEdBQUksR0FBOUI7QUFDRCxHQU5rQixFQU1oQkUsT0FOZ0IsQ0FBbkI7QUFPQUksTUFBSSxJQUFLLElBQUdDLFVBQVcsTUFBS0wsT0FBUSxHQUFwQztBQUVBLFFBQU1VLElBQUksR0FBR1AsS0FBSyxHQUFHLENBQXJCO0FBQ0EsU0FBT08sSUFBSSxHQUFHVCxNQUFQLEdBQ0hGLGVBQWUsQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEVBQWtCQyxVQUFsQixFQUE4QlEsSUFBOUIsRUFBb0NOLElBQXBDLENBRFosR0FFSEEsSUFGSjtBQUdELEMsQ0FFRDtBQUNBOztBQUNPLFNBQVNPLG9CQUFULENBQThCUCxJQUE5QixFQUFvQztBQUN6QyxTQUFPQSxJQUFJLENBQUNRLE9BQUwsQ0FBYSxPQUFiLEVBQXNCLEdBQXRCLEVBQTJCQSxPQUEzQixDQUFtQyxNQUFuQyxFQUEyQyxHQUEzQyxDQUFQO0FBQ0QiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBoYXNQcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGFzdEl0ZW1PZihhcnIpIHtcbiAgcmV0dXJuIGFyclthcnIubGVuZ3RoIC0gMV07XG59XG5cbi8vIHB1c2ggb25seSB0aGUgaXRlbXMgbm90IGluY2x1ZGVkIGluIHRoZSBhcnJheVxuZXhwb3J0IGZ1bmN0aW9uIHB1c2hVbmlxdWUoYXJyLCAuLi5pdGVtcykge1xuICBpdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgaWYgKGFyci5pbmNsdWRlcyhpdGVtKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhcnIucHVzaChpdGVtKTtcbiAgfSk7XG4gIHJldHVybiBhcnI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdUb0FycmF5KHN0ciwgc2VwYXJhdG9yKSB7XG4gIC8vIGNvbnZlcnQgZW1wdHkgc3RyaW5nIHRvIGFuIGVtcHR5IGFycmF5XG4gIHJldHVybiBzdHIgPyBzdHIuc3BsaXQoc2VwYXJhdG9yKSA6IFtdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNJblJhbmdlKHRlc3RWYWwsIG1pbiwgbWF4KSB7XG4gIGNvbnN0IG1pbk9LID0gbWluID09PSB1bmRlZmluZWQgfHwgdGVzdFZhbCA+PSBtaW47XG4gIGNvbnN0IG1heE9LID0gbWF4ID09PSB1bmRlZmluZWQgfHwgdGVzdFZhbCA8PSBtYXg7XG4gIHJldHVybiBtaW5PSyAmJiBtYXhPSztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxpbWl0VG9SYW5nZSh2YWwsIG1pbiwgbWF4KSB7XG4gIGlmICh2YWwgPCBtaW4pIHtcbiAgICByZXR1cm4gbWluO1xuICB9XG4gIGlmICh2YWwgPiBtYXgpIHtcbiAgICByZXR1cm4gbWF4O1xuICB9XG4gIHJldHVybiB2YWw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUYWdSZXBlYXQodGFnTmFtZSwgcmVwZWF0LCBhdHRyaWJ1dGVzID0ge30sIGluZGV4ID0gMCwgaHRtbCA9ICcnKSB7XG4gIGNvbnN0IG9wZW5UYWdTcmMgPSBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5yZWR1Y2UoKHNyYywgYXR0cikgPT4ge1xuICAgIGxldCB2YWwgPSBhdHRyaWJ1dGVzW2F0dHJdO1xuICAgIGlmICh0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YWwgPSB2YWwoaW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gYCR7c3JjfSAke2F0dHJ9PVwiJHt2YWx9XCJgO1xuICB9LCB0YWdOYW1lKTtcbiAgaHRtbCArPSBgPCR7b3BlblRhZ1NyY30+PC8ke3RhZ05hbWV9PmA7XG5cbiAgY29uc3QgbmV4dCA9IGluZGV4ICsgMTtcbiAgcmV0dXJuIG5leHQgPCByZXBlYXRcbiAgICA/IGNyZWF0ZVRhZ1JlcGVhdCh0YWdOYW1lLCByZXBlYXQsIGF0dHJpYnV0ZXMsIG5leHQsIGh0bWwpXG4gICAgOiBodG1sO1xufVxuXG4vLyBSZW1vdmUgdGhlIHNwYWNpbmcgc3Vycm91bmRpbmcgdGFncyBmb3IgSFRNTCBwYXJzZXIgbm90IHRvIGNyZWF0ZSB0ZXh0IG5vZGVzXG4vLyBiZWZvcmUvYWZ0ZXIgZWxlbWVudHNcbmV4cG9ydCBmdW5jdGlvbiBvcHRpbWl6ZVRlbXBsYXRlSFRNTChodG1sKSB7XG4gIHJldHVybiBodG1sLnJlcGxhY2UoLz5cXHMrL2csICc+JykucmVwbGFjZSgvXFxzKzwvLCAnPCcpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return reFormatTokens; });\n/* unused harmony export reNonDateParts */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return parseDate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return formatDate; });\n/* harmony import */ var _date_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);\n\n // pattern for format parts\n\nconst reFormatTokens = /dd?|DD?|mm?|MM?|yy?(?:yy)?/; // pattern for non date parts\n\nconst reNonDateParts = /[\\s!-/:-@[-`{-~年月日]+/; // cache for persed formats\n\nlet knownFormats = {}; // parse funtions for date parts\n\nconst parseFns = {\n  y(date, year) {\n    return new Date(date).setFullYear(parseInt(year, 10));\n  },\n\n  M: undefined,\n\n  // placeholder to maintain the key order\n  m(date, month, locale) {\n    const newDate = new Date(date);\n    let monthIndex = parseInt(month, 10) - 1;\n\n    if (isNaN(monthIndex)) {\n      if (!month) {\n        return NaN;\n      }\n\n      const monthName = month.toLowerCase();\n\n      const compareNames = name => name.toLowerCase().startsWith(monthName); // compare with both short and full names because some locales have periods\n      // in the short names (not equal to the first X letters of the full names)\n\n\n      monthIndex = locale.monthsShort.findIndex(compareNames);\n\n      if (monthIndex < 0) {\n        monthIndex = locale.months.findIndex(compareNames);\n      }\n\n      return monthIndex < 0 ? NaN : newDate.setMonth(monthIndex);\n    }\n\n    newDate.setMonth(monthIndex);\n    return newDate.getMonth() !== normalizeMonth(monthIndex) ? newDate.setDate(0) : newDate.getTime();\n  },\n\n  d(date, day) {\n    return new Date(date).setDate(parseInt(day, 10));\n  }\n\n};\nparseFns.M = parseFns.m; // make "M" an alias of "m"\n// format functions for date parts\n\nconst formatFns = {\n  d(date) {\n    return date.getDate();\n  },\n\n  dd(date) {\n    return padZero(date.getDate(), 2);\n  },\n\n  D(date, locale) {\n    return locale.daysShort[date.getDay()];\n  },\n\n  DD(date, locale) {\n    return locale.days[date.getDay()];\n  },\n\n  m(date) {\n    return date.getMonth() + 1;\n  },\n\n  mm(date) {\n    return padZero(date.getMonth() + 1, 2);\n  },\n\n  M(date, locale) {\n    return locale.monthsShort[date.getMonth()];\n  },\n\n  MM(date, locale) {\n    return locale.months[date.getMonth()];\n  },\n\n  y(date) {\n    return date.getFullYear();\n  },\n\n  yy(date) {\n    return padZero(date.getFullYear(), 2).slice(-2);\n  },\n\n  yyyy(date) {\n    return padZero(date.getFullYear(), 4);\n  }\n\n}; // get month index in normal range (0 - 11) from any number\n\nfunction normalizeMonth(monthIndex) {\n  return monthIndex > -1 ? monthIndex % 12 : normalizeMonth(monthIndex + 12);\n}\n\nfunction padZero(num, length) {\n  return num.toString().padStart(length, \'0\');\n}\n\nfunction parseFormatString(format) {\n  if (typeof format !== \'string\') {\n    throw new Error("Invalid date format.");\n  }\n\n  if (format in knownFormats) {\n    return knownFormats[format];\n  } // sprit the format string into parts and seprators\n\n\n  const separators = format.split(reFormatTokens);\n  const parts = format.match(new RegExp(reFormatTokens, \'g\'));\n\n  if (separators.length === 0 || !parts) {\n    throw new Error("Invalid date format.");\n  } // collect format functions used in the format\n\n\n  const partFormatters = parts.map(token => formatFns[token]); // collect parse functions used in the format\n  // iterate over parseFns\' keys in order to keep the order of the keys.\n\n  const partParsers = Object.keys(parseFns).reduce((parsers, key) => {\n    const token = parts.find(part => part[0] === key);\n\n    if (!token) {\n      return parsers;\n    }\n\n    parsers[key] = parseFns[key];\n    return parsers;\n  }, {});\n  const partParserKeys = Object.keys(partParsers);\n  return knownFormats[format] = {\n    parser(dateStr, locale) {\n      const dateParts = dateStr.split(reNonDateParts).reduce((dtParts, part, index) => {\n        if (part.length > 0 && parts[index]) {\n          const token = parts[index][0];\n\n          if (parseFns[token] !== undefined) {\n            dtParts[token] = part;\n          }\n        }\n\n        return dtParts;\n      }, {}); // iterate over partParsers\' keys so that the parsing is made in the oder\n      // of year, month and day to prevent the day parser from correcting last\n      // day of month wrongly\n\n      return partParserKeys.reduce((origDate, key) => {\n        const newDate = partParsers[key](origDate, dateParts[key], locale); // ingnore the part failed to parse\n\n        return isNaN(newDate) ? origDate : newDate;\n      }, Object(_date_js__WEBPACK_IMPORTED_MODULE_0__[/* today */ "j"])());\n    },\n\n    formatter(date, locale) {\n      let dateStr = partFormatters.reduce((str, fn, index) => {\n        return str += `${separators[index]}${fn(date, locale)}`;\n      }, \'\'); // separators\' length is always parts\' length + 1,\n\n      return dateStr += Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__[/* lastItemOf */ "d"])(separators);\n    }\n\n  };\n}\n\nfunction parseDate(dateStr, format, locale) {\n  if (dateStr instanceof Date || typeof dateStr === \'number\') {\n    const date = Object(_date_js__WEBPACK_IMPORTED_MODULE_0__[/* stripTime */ "i"])(dateStr);\n    return isNaN(date) ? undefined : date;\n  }\n\n  if (!dateStr) {\n    return undefined;\n  }\n\n  if (dateStr === \'today\') {\n    return Object(_date_js__WEBPACK_IMPORTED_MODULE_0__[/* today */ "j"])();\n  }\n\n  if (format && format.toValue) {\n    const date = format.toValue(dateStr, format, locale);\n    return isNaN(date) ? undefined : Object(_date_js__WEBPACK_IMPORTED_MODULE_0__[/* stripTime */ "i"])(date);\n  }\n\n  return parseFormatString(format).parser(dateStr, locale);\n}\nfunction formatDate(date, format, locale) {\n  if (isNaN(date) || !date && date !== 0) {\n    return \'\';\n  }\n\n  const dateObj = typeof date === \'number\' ? new Date(date) : date;\n\n  if (format.toDisplay) {\n    return format.toDisplay(dateObj, format, locale);\n  }\n\n  return parseFormatString(format).formatter(dateObj, locale);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n')},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return registerListeners; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return unregisterListeners; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return findElementInEventPath; });\nconst listenerRegistry = new WeakMap();\nconst {\n  addEventListener,\n  removeEventListener\n} = EventTarget.prototype; // Register event listeners to a key object\n// listeners: array of listener definitions;\n//   - each definition must be a flat array of event target and the arguments\n//     used to call addEventListener() on the target\n\nfunction registerListeners(keyObj, listeners) {\n  let registered = listenerRegistry.get(keyObj);\n\n  if (!registered) {\n    registered = [];\n    listenerRegistry.set(keyObj, registered);\n  }\n\n  listeners.forEach(listener => {\n    addEventListener.call(...listener);\n    registered.push(listener);\n  });\n}\nfunction unregisterListeners(keyObj) {\n  let listeners = listenerRegistry.get(keyObj);\n\n  if (!listeners) {\n    return;\n  }\n\n  listeners.forEach(listener => {\n    removeEventListener.call(...listener);\n  });\n  listenerRegistry.delete(keyObj);\n} // Event.composedPath() polyfill for Edge\n// based on https://gist.github.com/kleinfreund/e9787d73776c0e3750dcfcdc89f100ec\n\nif (!Event.prototype.composedPath) {\n  const getComposedPath = (node, path = []) => {\n    path.push(node);\n    let parent;\n\n    if (node.parentNode) {\n      parent = node.parentNode;\n    } else if (node.host) {\n      // ShadowRoot\n      parent = node.host;\n    } else if (node.defaultView) {\n      // Document\n      parent = node.defaultView;\n    }\n\n    return parent ? getComposedPath(parent, path) : path;\n  };\n\n  Event.prototype.composedPath = function () {\n    return getComposedPath(this.target);\n  };\n}\n\nfunction findFromPath(path, criteria, currentTarget, index = 0) {\n  const el = path[index];\n\n  if (criteria(el)) {\n    return el;\n  } else if (el === currentTarget || !el.parentElement) {\n    // stop when reaching currentTarget or <html>\n    return;\n  }\n\n  return findFromPath(path, criteria, currentTarget, index + 1);\n} // Search for the actual target of a delegated event\n\n\nfunction findElementInEventPath(ev, selector) {\n  const criteria = typeof selector === \'function\' ? selector : el => el.matches(selector);\n  return findFromPath(ev.composedPath(), criteria, ev.currentTarget);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmFuaWxsYWpzLWRhdGVwaWNrZXIvanMvbGliL2V2ZW50LmpzPzI2YzYiXSwibmFtZXMiOlsibGlzdGVuZXJSZWdpc3RyeSIsIldlYWtNYXAiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIkV2ZW50VGFyZ2V0IiwicHJvdG90eXBlIiwicmVnaXN0ZXJMaXN0ZW5lcnMiLCJrZXlPYmoiLCJsaXN0ZW5lcnMiLCJyZWdpc3RlcmVkIiwiZ2V0Iiwic2V0IiwiZm9yRWFjaCIsImxpc3RlbmVyIiwiY2FsbCIsInB1c2giLCJ1bnJlZ2lzdGVyTGlzdGVuZXJzIiwiZGVsZXRlIiwiRXZlbnQiLCJjb21wb3NlZFBhdGgiLCJnZXRDb21wb3NlZFBhdGgiLCJub2RlIiwicGF0aCIsInBhcmVudCIsInBhcmVudE5vZGUiLCJob3N0IiwiZGVmYXVsdFZpZXciLCJ0YXJnZXQiLCJmaW5kRnJvbVBhdGgiLCJjcml0ZXJpYSIsImN1cnJlbnRUYXJnZXQiLCJpbmRleCIsImVsIiwicGFyZW50RWxlbWVudCIsImZpbmRFbGVtZW50SW5FdmVudFBhdGgiLCJldiIsInNlbGVjdG9yIiwibWF0Y2hlcyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUEsTUFBTUEsZ0JBQWdCLEdBQUcsSUFBSUMsT0FBSixFQUF6QjtBQUNBLE1BQU07QUFBQ0Msa0JBQUQ7QUFBbUJDO0FBQW5CLElBQTBDQyxXQUFXLENBQUNDLFNBQTVELEMsQ0FFQTtBQUNBO0FBQ0E7QUFDQTs7QUFDTyxTQUFTQyxpQkFBVCxDQUEyQkMsTUFBM0IsRUFBbUNDLFNBQW5DLEVBQThDO0FBQ25ELE1BQUlDLFVBQVUsR0FBR1QsZ0JBQWdCLENBQUNVLEdBQWpCLENBQXFCSCxNQUFyQixDQUFqQjs7QUFDQSxNQUFJLENBQUNFLFVBQUwsRUFBaUI7QUFDZkEsY0FBVSxHQUFHLEVBQWI7QUFDQVQsb0JBQWdCLENBQUNXLEdBQWpCLENBQXFCSixNQUFyQixFQUE2QkUsVUFBN0I7QUFDRDs7QUFDREQsV0FBUyxDQUFDSSxPQUFWLENBQW1CQyxRQUFELElBQWM7QUFDOUJYLG9CQUFnQixDQUFDWSxJQUFqQixDQUFzQixHQUFHRCxRQUF6QjtBQUNBSixjQUFVLENBQUNNLElBQVgsQ0FBZ0JGLFFBQWhCO0FBQ0QsR0FIRDtBQUlEO0FBRU0sU0FBU0csbUJBQVQsQ0FBNkJULE1BQTdCLEVBQXFDO0FBQzFDLE1BQUlDLFNBQVMsR0FBR1IsZ0JBQWdCLENBQUNVLEdBQWpCLENBQXFCSCxNQUFyQixDQUFoQjs7QUFDQSxNQUFJLENBQUNDLFNBQUwsRUFBZ0I7QUFDZDtBQUNEOztBQUNEQSxXQUFTLENBQUNJLE9BQVYsQ0FBbUJDLFFBQUQsSUFBYztBQUM5QlYsdUJBQW1CLENBQUNXLElBQXBCLENBQXlCLEdBQUdELFFBQTVCO0FBQ0QsR0FGRDtBQUdBYixrQkFBZ0IsQ0FBQ2lCLE1BQWpCLENBQXdCVixNQUF4QjtBQUNELEMsQ0FFRDtBQUNBOztBQUNBLElBQUksQ0FBQ1csS0FBSyxDQUFDYixTQUFOLENBQWdCYyxZQUFyQixFQUFtQztBQUNqQyxRQUFNQyxlQUFlLEdBQUcsQ0FBQ0MsSUFBRCxFQUFPQyxJQUFJLEdBQUcsRUFBZCxLQUFxQjtBQUMzQ0EsUUFBSSxDQUFDUCxJQUFMLENBQVVNLElBQVY7QUFFQSxRQUFJRSxNQUFKOztBQUNBLFFBQUlGLElBQUksQ0FBQ0csVUFBVCxFQUFxQjtBQUNuQkQsWUFBTSxHQUFHRixJQUFJLENBQUNHLFVBQWQ7QUFDRCxLQUZELE1BRU8sSUFBSUgsSUFBSSxDQUFDSSxJQUFULEVBQWU7QUFBRTtBQUN0QkYsWUFBTSxHQUFHRixJQUFJLENBQUNJLElBQWQ7QUFDRCxLQUZNLE1BRUEsSUFBSUosSUFBSSxDQUFDSyxXQUFULEVBQXNCO0FBQUc7QUFDOUJILFlBQU0sR0FBR0YsSUFBSSxDQUFDSyxXQUFkO0FBQ0Q7O0FBQ0QsV0FBT0gsTUFBTSxHQUFHSCxlQUFlLENBQUNHLE1BQUQsRUFBU0QsSUFBVCxDQUFsQixHQUFtQ0EsSUFBaEQ7QUFDRCxHQVpEOztBQWNBSixPQUFLLENBQUNiLFNBQU4sQ0FBZ0JjLFlBQWhCLEdBQStCLFlBQVk7QUFDekMsV0FBT0MsZUFBZSxDQUFDLEtBQUtPLE1BQU4sQ0FBdEI7QUFDRCxHQUZEO0FBR0Q7O0FBRUQsU0FBU0MsWUFBVCxDQUFzQk4sSUFBdEIsRUFBNEJPLFFBQTVCLEVBQXNDQyxhQUF0QyxFQUFxREMsS0FBSyxHQUFHLENBQTdELEVBQWdFO0FBQzlELFFBQU1DLEVBQUUsR0FBR1YsSUFBSSxDQUFDUyxLQUFELENBQWY7O0FBQ0EsTUFBSUYsUUFBUSxDQUFDRyxFQUFELENBQVosRUFBa0I7QUFDaEIsV0FBT0EsRUFBUDtBQUNELEdBRkQsTUFFTyxJQUFJQSxFQUFFLEtBQUtGLGFBQVAsSUFBd0IsQ0FBQ0UsRUFBRSxDQUFDQyxhQUFoQyxFQUErQztBQUNwRDtBQUNBO0FBQ0Q7O0FBQ0QsU0FBT0wsWUFBWSxDQUFDTixJQUFELEVBQU9PLFFBQVAsRUFBaUJDLGFBQWpCLEVBQWdDQyxLQUFLLEdBQUcsQ0FBeEMsQ0FBbkI7QUFDRCxDLENBRUQ7OztBQUNPLFNBQVNHLHNCQUFULENBQWdDQyxFQUFoQyxFQUFvQ0MsUUFBcEMsRUFBOEM7QUFDbkQsUUFBTVAsUUFBUSxHQUFHLE9BQU9PLFFBQVAsS0FBb0IsVUFBcEIsR0FBaUNBLFFBQWpDLEdBQTRDSixFQUFFLElBQUlBLEVBQUUsQ0FBQ0ssT0FBSCxDQUFXRCxRQUFYLENBQW5FO0FBQ0EsU0FBT1IsWUFBWSxDQUFDTyxFQUFFLENBQUNoQixZQUFILEVBQUQsRUFBb0JVLFFBQXBCLEVBQThCTSxFQUFFLENBQUNMLGFBQWpDLENBQW5CO0FBQ0QiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGxpc3RlbmVyUmVnaXN0cnkgPSBuZXcgV2Vha01hcCgpO1xuY29uc3Qge2FkZEV2ZW50TGlzdGVuZXIsIHJlbW92ZUV2ZW50TGlzdGVuZXJ9ID0gRXZlbnRUYXJnZXQucHJvdG90eXBlO1xuXG4vLyBSZWdpc3RlciBldmVudCBsaXN0ZW5lcnMgdG8gYSBrZXkgb2JqZWN0XG4vLyBsaXN0ZW5lcnM6IGFycmF5IG9mIGxpc3RlbmVyIGRlZmluaXRpb25zO1xuLy8gICAtIGVhY2ggZGVmaW5pdGlvbiBtdXN0IGJlIGEgZmxhdCBhcnJheSBvZiBldmVudCB0YXJnZXQgYW5kIHRoZSBhcmd1bWVudHNcbi8vICAgICB1c2VkIHRvIGNhbGwgYWRkRXZlbnRMaXN0ZW5lcigpIG9uIHRoZSB0YXJnZXRcbmV4cG9ydCBmdW5jdGlvbiByZWdpc3Rlckxpc3RlbmVycyhrZXlPYmosIGxpc3RlbmVycykge1xuICBsZXQgcmVnaXN0ZXJlZCA9IGxpc3RlbmVyUmVnaXN0cnkuZ2V0KGtleU9iaik7XG4gIGlmICghcmVnaXN0ZXJlZCkge1xuICAgIHJlZ2lzdGVyZWQgPSBbXTtcbiAgICBsaXN0ZW5lclJlZ2lzdHJ5LnNldChrZXlPYmosIHJlZ2lzdGVyZWQpO1xuICB9XG4gIGxpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcikgPT4ge1xuICAgIGFkZEV2ZW50TGlzdGVuZXIuY2FsbCguLi5saXN0ZW5lcik7XG4gICAgcmVnaXN0ZXJlZC5wdXNoKGxpc3RlbmVyKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnJlZ2lzdGVyTGlzdGVuZXJzKGtleU9iaikge1xuICBsZXQgbGlzdGVuZXJzID0gbGlzdGVuZXJSZWdpc3RyeS5nZXQoa2V5T2JqKTtcbiAgaWYgKCFsaXN0ZW5lcnMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyKSA9PiB7XG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lci5jYWxsKC4uLmxpc3RlbmVyKTtcbiAgfSk7XG4gIGxpc3RlbmVyUmVnaXN0cnkuZGVsZXRlKGtleU9iaik7XG59XG5cbi8vIEV2ZW50LmNvbXBvc2VkUGF0aCgpIHBvbHlmaWxsIGZvciBFZGdlXG4vLyBiYXNlZCBvbiBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9rbGVpbmZyZXVuZC9lOTc4N2Q3Mzc3NmMwZTM3NTBkY2ZjZGM4OWYxMDBlY1xuaWYgKCFFdmVudC5wcm90b3R5cGUuY29tcG9zZWRQYXRoKSB7XG4gIGNvbnN0IGdldENvbXBvc2VkUGF0aCA9IChub2RlLCBwYXRoID0gW10pID0+IHtcbiAgICBwYXRoLnB1c2gobm9kZSk7XG5cbiAgICBsZXQgcGFyZW50O1xuICAgIGlmIChub2RlLnBhcmVudE5vZGUpIHtcbiAgICAgIHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICB9IGVsc2UgaWYgKG5vZGUuaG9zdCkgeyAvLyBTaGFkb3dSb290XG4gICAgICBwYXJlbnQgPSBub2RlLmhvc3Q7XG4gICAgfSBlbHNlIGlmIChub2RlLmRlZmF1bHRWaWV3KSB7ICAvLyBEb2N1bWVudFxuICAgICAgcGFyZW50ID0gbm9kZS5kZWZhdWx0VmlldztcbiAgICB9XG4gICAgcmV0dXJuIHBhcmVudCA/IGdldENvbXBvc2VkUGF0aChwYXJlbnQsIHBhdGgpIDogcGF0aDtcbiAgfTtcblxuICBFdmVudC5wcm90b3R5cGUuY29tcG9zZWRQYXRoID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnZXRDb21wb3NlZFBhdGgodGhpcy50YXJnZXQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmaW5kRnJvbVBhdGgocGF0aCwgY3JpdGVyaWEsIGN1cnJlbnRUYXJnZXQsIGluZGV4ID0gMCkge1xuICBjb25zdCBlbCA9IHBhdGhbaW5kZXhdO1xuICBpZiAoY3JpdGVyaWEoZWwpKSB7XG4gICAgcmV0dXJuIGVsO1xuICB9IGVsc2UgaWYgKGVsID09PSBjdXJyZW50VGFyZ2V0IHx8ICFlbC5wYXJlbnRFbGVtZW50KSB7XG4gICAgLy8gc3RvcCB3aGVuIHJlYWNoaW5nIGN1cnJlbnRUYXJnZXQgb3IgPGh0bWw+XG4gICAgcmV0dXJuO1xuICB9XG4gIHJldHVybiBmaW5kRnJvbVBhdGgocGF0aCwgY3JpdGVyaWEsIGN1cnJlbnRUYXJnZXQsIGluZGV4ICsgMSk7XG59XG5cbi8vIFNlYXJjaCBmb3IgdGhlIGFjdHVhbCB0YXJnZXQgb2YgYSBkZWxlZ2F0ZWQgZXZlbnRcbmV4cG9ydCBmdW5jdGlvbiBmaW5kRWxlbWVudEluRXZlbnRQYXRoKGV2LCBzZWxlY3Rvcikge1xuICBjb25zdCBjcml0ZXJpYSA9IHR5cGVvZiBzZWxlY3RvciA9PT0gJ2Z1bmN0aW9uJyA/IHNlbGVjdG9yIDogZWwgPT4gZWwubWF0Y2hlcyhzZWxlY3Rvcik7XG4gIHJldHVybiBmaW5kRnJvbVBhdGgoZXYuY29tcG9zZWRQYXRoKCksIGNyaXRlcmlhLCBldi5jdXJyZW50VGFyZ2V0KTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* binding */ Datepicker_Datepicker; });\n\n// EXTERNAL MODULE: ./node_modules/vanillajs-datepicker/js/lib/utils.js\nvar utils = __webpack_require__(1);\n\n// EXTERNAL MODULE: ./node_modules/vanillajs-datepicker/js/lib/date.js\nvar lib_date = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./node_modules/vanillajs-datepicker/js/lib/date-format.js\nvar date_format = __webpack_require__(2);\n\n// EXTERNAL MODULE: ./node_modules/vanillajs-datepicker/js/lib/event.js\nvar lib_event = __webpack_require__(4);\n\n// CONCATENATED MODULE: ./node_modules/vanillajs-datepicker/js/i18n/base-locales.js\n// default locales\nconst base_locales_locales = {\n  en: {\n    days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n    daysShort: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n    daysMin: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n    months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n    monthsShort: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n    today: \"Today\",\n    clear: \"Clear\",\n    titleFormat: \"MM y\"\n  }\n};\n// CONCATENATED MODULE: ./node_modules/vanillajs-datepicker/js/options/defaultOptions.js\n// config options updatable by setOptions() and their default values\nconst defaultOptions = {\n  autohide: false,\n  beforeShowDay: null,\n  beforeShowDecade: null,\n  beforeShowMonth: null,\n  beforeShowYear: null,\n  calendarWeeks: false,\n  clearBtn: false,\n  dateDelimiter: ',',\n  datesDisabled: [],\n  daysOfWeekDisabled: [],\n  daysOfWeekHighlighted: [],\n  defaultViewDate: undefined,\n  // placeholder, defaults to today() by the program\n  disableTouchKeyboard: false,\n  format: 'mm/dd/yyyy',\n  language: 'en',\n  maxDate: null,\n  maxNumberOfDates: 1,\n  maxView: 3,\n  minDate: null,\n  nextArrow: '»',\n  orientation: 'auto',\n  prevArrow: '«',\n  showDaysOfWeek: true,\n  showOnFocus: true,\n  startView: 0,\n  title: '',\n  todayBtn: false,\n  todayBtnMode: 0,\n  todayHighlight: false,\n  weekStart: 0\n};\n/* harmony default export */ var options_defaultOptions = (defaultOptions);\n// CONCATENATED MODULE: ./node_modules/vanillajs-datepicker/js/lib/dom.js\nconst range = document.createRange();\nfunction parseHTML(html) {\n  return range.createContextualFragment(html);\n} // equivalent to jQuery's :visble\n\nfunction isVisible(el) {\n  return !!(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n}\nfunction hideElement(el) {\n  if (el.style.display === 'none') {\n    return;\n  } // back up the existing display setting in data-style-display\n\n\n  if (el.style.display) {\n    el.dataset.styleDisplay = el.style.display;\n  }\n\n  el.style.display = 'none';\n}\nfunction showElement(el) {\n  if (el.style.display !== 'none') {\n    return;\n  }\n\n  if (el.dataset.styleDisplay) {\n    // restore backed-up dispay property\n    el.style.display = el.dataset.styleDisplay;\n    delete el.dataset.styleDisplay;\n  } else {\n    el.style.display = '';\n  }\n}\nfunction emptyChildNodes(el) {\n  if (el.firstChild) {\n    el.removeChild(el.firstChild);\n    emptyChildNodes(el);\n  }\n}\nfunction replaceChildNodes(el, newChildNodes) {\n  emptyChildNodes(el);\n\n  if (newChildNodes instanceof DocumentFragment) {\n    el.appendChild(newChildNodes);\n  } else if (typeof newChildNodes === 'string') {\n    el.appendChild(parseHTML(newChildNodes));\n  } else if (typeof newChildNodes.forEach === 'function') {\n    newChildNodes.forEach(node => {\n      el.appendChild(node);\n    });\n  }\n}\n// CONCATENATED MODULE: ./node_modules/vanillajs-datepicker/js/options/processOptions.js\n\n\n\n\n\nconst {\n  language: defaultLang,\n  format: defaultFormat,\n  weekStart: defaultWeekStart\n} = options_defaultOptions; // Reducer function to filter out invalid day-of-week from the input\n\nfunction sanitizeDOW(dow, day) {\n  return dow.length < 6 && day >= 0 && day < 7 ? Object(utils[\"g\" /* pushUnique */])(dow, day) : dow;\n}\n\nfunction calcEndOfWeek(startOfWeek) {\n  return (startOfWeek + 6) % 7;\n} // validate input date. if invalid, fallback to the original value\n\n\nfunction validateDate(value, format, locale, origValue) {\n  const date = Object(date_format[\"b\" /* parseDate */])(value, format, locale);\n  return date !== undefined ? date : origValue;\n} // Validate viewId. if invalid, fallback to the original value\n\n\nfunction validateViewId(value, origValue) {\n  const viewId = parseInt(value, 10);\n  return viewId >= 0 && viewId < 4 ? viewId : origValue;\n} // Create Datepicker configuration to set\n\n\nfunction processOptions(options, datepicker) {\n  const inOpts = Object.assign({}, options);\n  const config = {};\n  const locales = datepicker.constructor.locales;\n  let {\n    format,\n    language,\n    locale,\n    maxDate,\n    maxView,\n    minDate,\n    startView,\n    weekStart\n  } = datepicker.config || {};\n\n  if (inOpts.language) {\n    let lang;\n\n    if (inOpts.language !== language) {\n      if (locales[inOpts.language]) {\n        lang = inOpts.language;\n      } else {\n        // Check if langauge + region tag can fallback to the one without\n        // region (e.g. fr-CA → fr)\n        lang = inOpts.language.split('-')[0];\n\n        if (locales[lang] === undefined) {\n          lang = false;\n        }\n      }\n    }\n\n    delete inOpts.language;\n\n    if (lang) {\n      language = config.language = lang; // update locale as well when updating language\n\n      const origLocale = locale || locales[defaultLang]; // use default language's properties for the fallback\n\n      locale = Object.assign({\n        format: defaultFormat,\n        weekStart: defaultWeekStart\n      }, locales[defaultLang]);\n\n      if (language !== defaultLang) {\n        Object.assign(locale, locales[language]);\n      }\n\n      config.locale = locale; // if format and/or weekStart are the same as old locale's defaults,\n      // update them to new locale's defaults\n\n      if (format === origLocale.format) {\n        format = config.format = locale.format;\n      }\n\n      if (weekStart === origLocale.weekStart) {\n        weekStart = config.weekStart = locale.weekStart;\n        config.weekEnd = calcEndOfWeek(locale.weekStart);\n      }\n    }\n  }\n\n  if (inOpts.format) {\n    const hasToDisplay = typeof inOpts.format.toDisplay === 'function';\n    const hasToValue = typeof inOpts.format.toValue === 'function';\n    const validFormatString = date_format[\"c\" /* reFormatTokens */].test(inOpts.format);\n\n    if (hasToDisplay && hasToValue || validFormatString) {\n      format = config.format = inOpts.format;\n    }\n\n    delete inOpts.format;\n  } //*** dates ***//\n  // while min and maxDate for \"no limit\" in the options are better to be null\n  // (especially when updating), the ones in the config have to be undefined\n  // because null is treated as 0 (= unix epoch) when comparing with time value\n\n\n  let minDt = minDate;\n  let maxDt = maxDate;\n\n  if (inOpts.minDate !== undefined) {\n    minDt = inOpts.minDate === null ? Object(lib_date[\"e\" /* dateValue */])(0, 0, 1) // set 0000-01-01 to prevent negative values for year\n    : validateDate(inOpts.minDate, format, locale, minDt);\n    delete inOpts.minDate;\n  }\n\n  if (inOpts.maxDate !== undefined) {\n    maxDt = inOpts.maxDate === null ? undefined : validateDate(inOpts.maxDate, format, locale, maxDt);\n    delete inOpts.maxDate;\n  }\n\n  if (maxDt < minDt) {\n    minDate = config.minDate = maxDt;\n    maxDate = config.maxDate = minDt;\n  } else {\n    if (minDate !== minDt) {\n      minDate = config.minDate = minDt;\n    }\n\n    if (maxDate !== maxDt) {\n      maxDate = config.maxDate = maxDt;\n    }\n  }\n\n  if (inOpts.datesDisabled) {\n    config.datesDisabled = inOpts.datesDisabled.reduce((dates, dt) => {\n      const date = Object(date_format[\"b\" /* parseDate */])(dt, format, locale);\n      return date !== undefined ? Object(utils[\"g\" /* pushUnique */])(dates, date) : dates;\n    }, []);\n    delete inOpts.datesDisabled;\n  }\n\n  if (inOpts.defaultViewDate !== undefined) {\n    const viewDate = Object(date_format[\"b\" /* parseDate */])(inOpts.defaultViewDate, format, locale);\n\n    if (viewDate !== undefined) {\n      config.defaultViewDate = viewDate;\n    }\n\n    delete inOpts.defaultViewDate;\n  } //*** days of week ***//\n\n\n  if (inOpts.weekStart !== undefined) {\n    const wkStart = Number(inOpts.weekStart) % 7;\n\n    if (!isNaN(wkStart)) {\n      weekStart = config.weekStart = wkStart;\n      config.weekEnd = calcEndOfWeek(wkStart);\n    }\n\n    delete inOpts.weekStart;\n  }\n\n  if (inOpts.daysOfWeekDisabled) {\n    config.daysOfWeekDisabled = inOpts.daysOfWeekDisabled.reduce(sanitizeDOW, []);\n    delete inOpts.daysOfWeekDisabled;\n  }\n\n  if (inOpts.daysOfWeekHighlighted) {\n    config.daysOfWeekHighlighted = inOpts.daysOfWeekHighlighted.reduce(sanitizeDOW, []);\n    delete inOpts.daysOfWeekHighlighted;\n  } //*** multi date ***//\n\n\n  if (inOpts.maxNumberOfDates !== undefined) {\n    const maxNumberOfDates = parseInt(inOpts.maxNumberOfDates, 10);\n\n    if (maxNumberOfDates >= 0) {\n      config.maxNumberOfDates = maxNumberOfDates;\n      config.multidate = maxNumberOfDates !== 1;\n    }\n\n    delete inOpts.maxNumberOfDates;\n  }\n\n  if (inOpts.dateDelimiter) {\n    config.dateDelimiter = String(inOpts.dateDelimiter);\n    delete inOpts.dateDelimiter;\n  } //*** view mode ***//\n\n\n  let newMaxView = maxView;\n\n  if (inOpts.maxView !== undefined) {\n    newMaxView = validateViewId(inOpts.maxView, maxView);\n    delete inOpts.maxView;\n  }\n\n  if (newMaxView !== maxView) {\n    maxView = config.maxView = newMaxView;\n  }\n\n  let newStartView = startView;\n\n  if (inOpts.startView !== undefined) {\n    newStartView = validateViewId(inOpts.startView, newStartView);\n    delete inOpts.startView;\n  } // ensure start view < max\n\n\n  newStartView = maxView < newStartView ? maxView : newStartView;\n\n  if (newStartView !== startView) {\n    config.startView = newStartView;\n  } //*** template ***//\n\n\n  if (inOpts.prevArrow) {\n    const prevArrow = parseHTML(inOpts.prevArrow);\n\n    if (prevArrow.childNodes.length > 0) {\n      config.prevArrow = prevArrow.childNodes;\n    }\n\n    delete inOpts.prevArrow;\n  }\n\n  if (inOpts.nextArrow) {\n    const nextArrow = parseHTML(inOpts.nextArrow);\n\n    if (nextArrow.childNodes.length > 0) {\n      config.nextArrow = nextArrow.childNodes;\n    }\n\n    delete inOpts.nextArrow;\n  } //*** misc ***//\n\n\n  if (inOpts.disableTouchKeyboard !== undefined) {\n    config.disableTouchKeyboard = 'ontouchstart' in document && !!inOpts.disableTouchKeyboard;\n    delete inOpts.disableTouchKeyboard;\n  }\n\n  if (inOpts.orientation) {\n    const orientation = inOpts.orientation.toLowerCase().split(/\\s+/g);\n    config.orientation = {\n      x: orientation.find(x => x === 'left' || x === 'right') || 'auto',\n      y: orientation.find(y => y === 'top' || y === 'bottom') || 'auto'\n    };\n    delete inOpts.orientation;\n  }\n\n  if (inOpts.todayBtnMode !== undefined) {\n    switch (inOpts.todayBtnMode) {\n      case 0:\n      case 1:\n        config.todayBtnMode = inOpts.todayBtnMode;\n    }\n\n    delete inOpts.todayBtnMode;\n  } //*** copy the rest ***//\n\n\n  Object.keys(inOpts).forEach(key => {\n    if (inOpts[key] !== undefined && Object(utils[\"b\" /* hasProperty */])(options_defaultOptions, key)) {\n      config[key] = inOpts[key];\n    }\n  });\n  return config;\n}\n// CONCATENATED MODULE: ./node_modules/vanillajs-datepicker/js/picker/templates/pickerTemplate.js\n\nconst pickerTemplate = Object(utils[\"f\" /* optimizeTemplateHTML */])(`<div class=\"datepicker\">\n  <div class=\"datepicker-picker\">\n    <div class=\"datepicker-header\">\n      <div class=\"datepicker-title\"></div>\n      <div class=\"datepicker-controls\">\n        <button class=\"%buttonClass% prev-btn\"></button>\n        <button class=\"%buttonClass% view-switch\"></button>\n        <button class=\"%buttonClass% next-btn\"></button>\n      </div>\n    </div>\n    <div class=\"datepicker-main\"></div>\n    <div class=\"datepicker-footer\">\n      <div class=\"datepicker-controls\">\n        <button class=\"%buttonClass% today-btn\"></button>\n        <button class=\"%buttonClass% clear-btn\"></button>\n      </div>\n    </div>\n  </div>\n</div>`);\n/* harmony default export */ var templates_pickerTemplate = (pickerTemplate);\n// CONCATENATED MODULE: ./node_modules/vanillajs-datepicker/js/picker/templates/daysTemplate.js\n\nconst daysTemplate = Object(utils[\"f\" /* optimizeTemplateHTML */])(`<div class=\"days\">\n  <div class=\"days-of-week\">${Object(utils[\"a\" /* createTagRepeat */])('span', 7, {\n  class: 'dow'\n})}</div>\n  <div class=\"datepicker-grid\">${Object(utils[\"a\" /* createTagRepeat */])('span', 42)}</div>\n</div>`);\n/* harmony default export */ var templates_daysTemplate = (daysTemplate);\n// CONCATENATED MODULE: ./node_modules/vanillajs-datepicker/js/picker/templates/calendarWeeksTemplate.js\n\nconst calendarWeeksTemplate = Object(utils[\"f\" /* optimizeTemplateHTML */])(`<div class=\"calendar-weeks\">\n  <div class=\"days-of-week\"><span class=\"dow\"></span></div>\n  <div class=\"weeks\">${Object(utils[\"a\" /* createTagRepeat */])('span', 6, {\n  class: 'week'\n})}</div>\n</div>`);\n/* harmony default export */ var templates_calendarWeeksTemplate = (calendarWeeksTemplate);\n// CONCATENATED MODULE: ./node_modules/vanillajs-datepicker/js/picker/views/View.js\n\n // Base class of the view classes\n\nclass View_View {\n  constructor(picker, config) {\n    Object.assign(this, config, {\n      picker,\n      element: parseHTML(`<div class=\"datepicker-view\"></div>`).firstChild,\n      selected: []\n    });\n    this.init(this.picker.datepicker.config);\n  }\n\n  init(options) {\n    this.setOptions(options);\n    this.updateFocus();\n    this.updateSelection();\n  } // Execute beforeShow() callback and apply the result to the element\n  // args:\n  // - current - current value on the iteration on view rendering\n  // - timeValue - time value of the date to pass to beforeShow()\n\n\n  performBeforeHook(el, current, timeValue) {\n    let result = this.beforeShow(new Date(timeValue));\n\n    switch (typeof result) {\n      case 'boolean':\n        result = {\n          enabled: result\n        };\n        break;\n\n      case 'string':\n        result = {\n          classes: result\n        };\n    }\n\n    if (result) {\n      if (result.enabled === false) {\n        el.classList.add('disabled');\n        Object(utils[\"g\" /* pushUnique */])(this.disabled, current);\n      }\n\n      if (result.classes) {\n        const extraClasses = result.classes.split(/\\s+/);\n        el.classList.add(...extraClasses);\n\n        if (extraClasses.includes('disabled')) {\n          Object(utils[\"g\" /* pushUnique */])(this.disabled, current);\n        }\n      }\n\n      if (result.content) {\n        replaceChildNodes(el, result.content);\n      }\n    }\n  }\n\n}\n// CONCATENATED MODULE: ./node_modules/vanillajs-datepicker/js/picker/views/DaysView.js\n\n\n\n\n\n\n\nclass DaysView_DaysView extends View_View {\n  constructor(picker) {\n    super(picker, {\n      id: 0,\n      name: 'days',\n      cellClass: 'day'\n    });\n  }\n\n  init(options, onConstruction = true) {\n    if (onConstruction) {\n      const inner = parseHTML(templates_daysTemplate).firstChild;\n      this.dow = inner.firstChild;\n      this.grid = inner.lastChild;\n      this.element.appendChild(inner);\n    }\n\n    super.init(options);\n  }\n\n  setOptions(options) {\n    let updateDOW;\n\n    if (Object(utils[\"b\" /* hasProperty */])(options, 'minDate')) {\n      this.minDate = options.minDate;\n    }\n\n    if (Object(utils[\"b\" /* hasProperty */])(options, 'maxDate')) {\n      this.maxDate = options.maxDate;\n    }\n\n    if (options.datesDisabled) {\n      this.datesDisabled = options.datesDisabled;\n    }\n\n    if (options.daysOfWeekDisabled) {\n      this.daysOfWeekDisabled = options.daysOfWeekDisabled;\n      updateDOW = true;\n    }\n\n    if (options.daysOfWeekHighlighted) {\n      this.daysOfWeekHighlighted = options.daysOfWeekHighlighted;\n    }\n\n    if (options.todayHighlight !== undefined) {\n      this.todayHighlight = options.todayHighlight;\n    }\n\n    if (options.weekStart !== undefined) {\n      this.weekStart = options.weekStart;\n      this.weekEnd = options.weekEnd;\n      updateDOW = true;\n    }\n\n    if (options.locale) {\n      const locale = this.locale = options.locale;\n      this.dayNames = locale.daysMin;\n      this.switchLabelFormat = locale.titleFormat;\n      this.switchLabel = Object(date_format[\"a\" /* formatDate */])(this.picker.viewDate, locale.titleFormat, locale);\n      updateDOW = true;\n    }\n\n    if (options.beforeShowDay !== undefined) {\n      this.beforeShow = typeof options.beforeShowDay === 'function' ? options.beforeShowDay : undefined;\n    }\n\n    if (options.calendarWeeks !== undefined) {\n      if (options.calendarWeeks && !this.calendarWeeks) {\n        const weeksElem = parseHTML(templates_calendarWeeksTemplate).firstChild;\n        this.calendarWeeks = {\n          element: weeksElem,\n          dow: weeksElem.firstChild,\n          weeks: weeksElem.lastChild\n        };\n        this.element.insertBefore(weeksElem, this.element.firstChild);\n      } else if (this.calendarWeeks && !options.calendarWeeks) {\n        this.element.removeChild(this.calendarWeeks.element);\n        this.calendarWeeks = null;\n      }\n    }\n\n    if (options.showDaysOfWeek !== undefined) {\n      if (options.showDaysOfWeek) {\n        showElement(this.dow);\n\n        if (this.calendarWeeks) {\n          showElement(this.calendarWeeks.dow);\n        }\n      } else {\n        hideElement(this.dow);\n\n        if (this.calendarWeeks) {\n          hideElement(this.calendarWeeks.dow);\n        }\n      }\n    } // update days-of-week when locale, daysOfweekDisabled or weekStart is changed\n\n\n    if (updateDOW) {\n      Array.from(this.dow.children).forEach((el, index) => {\n        const dow = (this.weekStart + index) % 7;\n        el.textContent = this.dayNames[dow];\n        el.className = this.daysOfWeekDisabled.includes(dow) ? 'dow disabled' : 'dow';\n      });\n    }\n  } // Apply update on the focused date to view's settings\n\n\n  updateFocus() {\n    const viewDate = new Date(this.picker.viewDate);\n    const viewYear = viewDate.getFullYear();\n    const viewMonth = viewDate.getMonth();\n    const firstOfMonth = Object(lib_date[\"e\" /* dateValue */])(viewYear, viewMonth, 1);\n    const start = Object(lib_date[\"f\" /* dayOfTheWeekOf */])(firstOfMonth, this.weekStart, this.weekStart);\n    this.first = firstOfMonth;\n    this.last = Object(lib_date[\"e\" /* dateValue */])(viewYear, viewMonth + 1, 0);\n    this.start = start;\n    this.switchLabel = Object(date_format[\"a\" /* formatDate */])(viewDate, this.switchLabelFormat, this.locale);\n    this.focused = this.picker.viewDate;\n  } // Apply update on the selected dates to view's settings\n\n\n  updateSelection() {\n    const {\n      dates,\n      range\n    } = this.picker.datepicker;\n    this.selected = dates;\n    this.range = range;\n  } // Update the entire view UI\n\n\n  render() {\n    // update today marker on ever render\n    this.today = this.todayHighlight ? Object(lib_date[\"j\" /* today */])() : undefined; // refresh disabled dates on every render in order to clear the ones added\n    // by beforeShow hook at previous render\n\n    this.disabled = [...this.datesDisabled];\n    this.picker.setViewSwitchLabel(this.switchLabel);\n    this.picker.setPrevBtnDisabled(this.first <= this.minDate);\n    this.picker.setNextBtnDisabled(this.last >= this.maxDate);\n\n    if (this.calendarWeeks) {\n      // start of the UTC week (Monday) of the 1st of the month\n      const startOfWeek = Object(lib_date[\"f\" /* dayOfTheWeekOf */])(this.first, 1, 1);\n      Array.from(this.calendarWeeks.weeks.children).forEach((el, index) => {\n        el.textContent = Object(lib_date[\"g\" /* getWeek */])(Object(lib_date[\"c\" /* addWeeks */])(startOfWeek, index));\n      });\n    }\n\n    Array.from(this.grid.children).forEach((el, index) => {\n      const classList = el.classList;\n      const current = Object(lib_date[\"a\" /* addDays */])(this.start, index);\n      const date = new Date(current);\n      const day = date.getDay();\n      el.className = `datepicker-cell ${this.cellClass}`;\n      el.dataset.date = current;\n      el.textContent = date.getDate();\n\n      if (current < this.first) {\n        classList.add('prev');\n      } else if (current > this.last) {\n        classList.add('next');\n      }\n\n      if (this.today === current) {\n        classList.add('today');\n      }\n\n      if (current < this.minDate || current > this.maxDate || this.disabled.includes(current)) {\n        classList.add('disabled');\n      }\n\n      if (this.daysOfWeekDisabled.includes(day)) {\n        classList.add('disabled');\n        Object(utils[\"g\" /* pushUnique */])(this.disabled, current);\n      }\n\n      if (this.daysOfWeekHighlighted.includes(day)) {\n        classList.add('highlighted');\n      }\n\n      if (this.range) {\n        const [rangeStart, rangeEnd] = this.range;\n\n        if (current > rangeStart && current < rangeEnd) {\n          classList.add('range');\n        }\n\n        if (current === rangeStart) {\n          classList.add('range-start');\n        }\n\n        if (current === rangeEnd) {\n          classList.add('range-end');\n        }\n      }\n\n      if (this.selected.includes(current)) {\n        classList.add('selected');\n      }\n\n      if (current === this.focused) {\n        classList.add('focused');\n      }\n\n      if (this.beforeShow) {\n        this.performBeforeHook(el, current, current);\n      }\n    });\n  } // Update the view UI by applying the changes of selected and focused items\n\n\n  refresh() {\n    const [rangeStart, rangeEnd] = this.range || [];\n    this.grid.querySelectorAll('.range, .range-start, .range-end, .selected, .focused').forEach(el => {\n      el.classList.remove('range', 'range-start', 'range-end', 'selected', 'focused');\n    });\n    Array.from(this.grid.children).forEach(el => {\n      const current = Number(el.dataset.date);\n      const classList = el.classList;\n\n      if (current > rangeStart && current < rangeEnd) {\n        classList.add('range');\n      }\n\n      if (current === rangeStart) {\n        classList.add('range-start');\n      }\n\n      if (current === rangeEnd) {\n        classList.add('range-end');\n      }\n\n      if (this.selected.includes(current)) {\n        classList.add('selected');\n      }\n\n      if (current === this.focused) {\n        classList.add('focused');\n      }\n    });\n  } // Update the view UI by applying the change of focused item\n\n\n  refreshFocus() {\n    const index = Math.round((this.focused - this.start) / 86400000);\n    this.grid.querySelectorAll('.focused').forEach(el => {\n      el.classList.remove('focused');\n    });\n    this.grid.children[index].classList.add('focused');\n  }\n\n}\n// CONCATENATED MODULE: ./node_modules/vanillajs-datepicker/js/picker/views/MonthsView.js\n\n\n\n\nclass MonthsView_MonthsView extends View_View {\n  constructor(picker) {\n    super(picker, {\n      id: 1,\n      name: 'months',\n      cellClass: 'month'\n    });\n  }\n\n  init(options, onConstruction = true) {\n    if (onConstruction) {\n      this.grid = this.element;\n      this.element.classList.add('months', 'datepicker-grid');\n      this.grid.appendChild(parseHTML(Object(utils[\"a\" /* createTagRepeat */])('span', 12, {\n        'data-month': ix => ix\n      })));\n    }\n\n    super.init(options);\n  }\n\n  setOptions(options) {\n    if (options.locale) {\n      this.monthNames = options.locale.monthsShort;\n    }\n\n    if (Object(utils[\"b\" /* hasProperty */])(options, 'minDate')) {\n      if (options.minDate === undefined) {\n        this.minYear = this.minMonth = this.minDate = undefined;\n      } else {\n        const minDateObj = new Date(options.minDate);\n        this.minYear = minDateObj.getFullYear();\n        this.minMonth = minDateObj.getMonth();\n        this.minDate = minDateObj.setDate(1);\n      }\n    }\n\n    if (Object(utils[\"b\" /* hasProperty */])(options, 'maxDate')) {\n      if (options.maxDate === undefined) {\n        this.maxYear = this.maxMonth = this.maxDate = undefined;\n      } else {\n        const maxDateObj = new Date(options.maxDate);\n        this.maxYear = maxDateObj.getFullYear();\n        this.maxMonth = maxDateObj.getMonth();\n        this.maxDate = Object(lib_date[\"e\" /* dateValue */])(this.maxYear, this.maxMonth + 1, 0);\n      }\n    }\n\n    if (options.beforeShowMonth !== undefined) {\n      this.beforeShow = typeof options.beforeShowMonth === 'function' ? options.beforeShowMonth : undefined;\n    }\n  } // Update view's settings to reflect the viewDate set on the picker\n\n\n  updateFocus() {\n    const viewDate = new Date(this.picker.viewDate);\n    this.year = viewDate.getFullYear();\n    this.switchLabel = this.year;\n    this.focused = viewDate.getMonth();\n  } // Update view's settings to reflect the selected dates\n\n\n  updateSelection() {\n    this.selected = this.picker.datepicker.dates.reduce((selected, timeValue) => {\n      const date = new Date(timeValue);\n      const year = date.getFullYear();\n      const month = date.getMonth();\n\n      if (selected[year] === undefined) {\n        selected[year] = [month];\n      } else {\n        Object(utils[\"g\" /* pushUnique */])(selected[year], month);\n      }\n\n      return selected;\n    }, {});\n  } // Update the entire view UI\n\n\n  render() {\n    // refresh disabled months on every render in order to clear the ones added\n    // by beforeShow hook at previous render\n    this.disabled = [];\n    this.picker.setViewSwitchLabel(this.switchLabel);\n    this.picker.setPrevBtnDisabled(this.year <= this.minYear);\n    this.picker.setNextBtnDisabled(this.year >= this.maxYear);\n    const selected = this.selected[this.year] || [];\n    const yrOutOfRange = this.year < this.minYear || this.year > this.maxYear;\n    const isMinYear = this.year === this.minYear;\n    const isMaxYear = this.year === this.maxYear;\n    Array.from(this.grid.children).forEach((el, index) => {\n      const classList = el.classList;\n      el.className = `datepicker-cell ${this.cellClass}`; // reset text on every render to clear the custom content set\n      // by beforeShow hook at previous render\n\n      el.textContent = this.monthNames[index];\n\n      if (yrOutOfRange || isMinYear && index < this.minMonth || isMaxYear && index > this.maxMonth) {\n        classList.add('disabled');\n      }\n\n      if (selected.includes(index)) {\n        classList.add('selected');\n      }\n\n      if (index === this.focused) {\n        classList.add('focused');\n      }\n\n      if (this.beforeShow) {\n        this.performBeforeHook(el, index, Object(lib_date[\"e\" /* dateValue */])(this.year, index, 1));\n      }\n    });\n  } // Update the view UI by applying the changes of selected and focused items\n\n\n  refresh() {\n    const selected = this.selected[this.year] || [];\n    this.grid.querySelectorAll('.selected, .focused').forEach(el => {\n      el.classList.remove('selected', 'focused');\n    });\n    Array.from(this.grid.children).forEach((el, index) => {\n      const classList = el.classList;\n\n      if (selected.includes(index)) {\n        classList.add('selected');\n      }\n\n      if (index === this.focused) {\n        classList.add('focused');\n      }\n    });\n  } // Update the view UI by applying the change of focused item\n\n\n  refreshFocus() {\n    this.grid.querySelectorAll('.focused').forEach(el => {\n      el.classList.remove('focused');\n    });\n    this.grid.children[this.focused].classList.add('focused');\n  }\n\n}\n// CONCATENATED MODULE: ./node_modules/vanillajs-datepicker/js/picker/views/YearsView.js\n\n\n\n\n\nfunction toTitleCase(word) {\n  return [...word].reduce((str, ch, ix) => str += ix ? ch : ch.toUpperCase(), '');\n} // Class representing the years and decades view elements\n\n\nclass YearsView_YearsView extends View_View {\n  constructor(picker, config) {\n    super(picker, config);\n  }\n\n  init(options, onConstruction = true) {\n    if (onConstruction) {\n      this.navStep = this.step * 10;\n      this.beforeShowOption = `beforeShow${toTitleCase(this.cellClass)}`;\n      this.grid = this.element;\n      this.element.classList.add(this.name, 'datepicker-grid');\n      this.grid.appendChild(parseHTML(Object(utils[\"a\" /* createTagRepeat */])('span', 12)));\n    }\n\n    super.init(options);\n  }\n\n  setOptions(options) {\n    if (Object(utils[\"b\" /* hasProperty */])(options, 'minDate')) {\n      if (options.minDate === undefined) {\n        this.minYear = this.minDate = undefined;\n      } else {\n        this.minYear = Object(lib_date[\"h\" /* startOfYearPeriod */])(options.minDate, this.step);\n        this.minDate = Object(lib_date[\"e\" /* dateValue */])(this.minYear, 0, 1);\n      }\n    }\n\n    if (Object(utils[\"b\" /* hasProperty */])(options, 'maxDate')) {\n      if (options.maxDate === undefined) {\n        this.maxYear = this.maxDate = undefined;\n      } else {\n        this.maxYear = Object(lib_date[\"h\" /* startOfYearPeriod */])(options.maxDate, this.step);\n        this.maxDate = Object(lib_date[\"e\" /* dateValue */])(this.maxYear, 11, 31);\n      }\n    }\n\n    if (options[this.beforeShowOption] !== undefined) {\n      const beforeShow = options[this.beforeShowOption];\n      this.beforeShow = typeof beforeShow === 'function' ? beforeShow : undefined;\n    }\n  } // Update view's settings to reflect the viewDate set on the picker\n\n\n  updateFocus() {\n    const viewDate = new Date(this.picker.viewDate);\n    const first = Object(lib_date[\"h\" /* startOfYearPeriod */])(viewDate, this.navStep);\n    const last = first + 9 * this.step;\n    this.first = first;\n    this.last = last;\n    this.start = first - this.step;\n    this.switchLabel = `${first}-${last}`;\n    this.focused = Object(lib_date[\"h\" /* startOfYearPeriod */])(viewDate, this.step);\n  } // Update view's settings to reflect the selected dates\n\n\n  updateSelection() {\n    this.selected = this.picker.datepicker.dates.reduce((years, timeValue) => {\n      return Object(utils[\"g\" /* pushUnique */])(years, Object(lib_date[\"h\" /* startOfYearPeriod */])(timeValue, this.step));\n    }, []);\n  } // Update the entire view UI\n\n\n  render() {\n    // refresh disabled years on every render in order to clear the ones added\n    // by beforeShow hook at previous render\n    this.disabled = [];\n    this.picker.setViewSwitchLabel(this.switchLabel);\n    this.picker.setPrevBtnDisabled(this.first <= this.minYear);\n    this.picker.setNextBtnDisabled(this.last >= this.maxYear);\n    Array.from(this.grid.children).forEach((el, index) => {\n      const classList = el.classList;\n      const current = this.start + index * this.step;\n      el.className = `datepicker-cell ${this.cellClass}`;\n      el.textContent = el.dataset.year = current;\n\n      if (index === 0) {\n        classList.add('prev');\n      } else if (index === 11) {\n        classList.add('next');\n      }\n\n      if (current < this.minYear || current > this.maxYear) {\n        classList.add('disabled');\n      }\n\n      if (this.selected.includes(current)) {\n        classList.add('selected');\n      }\n\n      if (current === this.focused) {\n        classList.add('focused');\n      }\n\n      if (this.beforeShow) {\n        this.performBeforeHook(el, current, Object(lib_date[\"e\" /* dateValue */])(current, 0, 1));\n      }\n    });\n  } // Update the view UI by applying the changes of selected and focused items\n\n\n  refresh() {\n    this.grid.querySelectorAll('.selected, .focused').forEach(el => {\n      el.classList.remove('selected', 'focused');\n    });\n    Array.from(this.grid.children).forEach(el => {\n      const current = Number(el.textContent);\n      const classList = el.classList;\n\n      if (this.selected.includes(current)) {\n        classList.add('selected');\n      }\n\n      if (current === this.focused) {\n        classList.add('focused');\n      }\n    });\n  } // Update the view UI by applying the change of focused item\n\n\n  refreshFocus() {\n    const index = Math.round((this.focused - this.start) / this.step);\n    this.grid.querySelectorAll('.focused').forEach(el => {\n      el.classList.remove('focused');\n    });\n    this.grid.children[index].classList.add('focused');\n  }\n\n}\n// CONCATENATED MODULE: ./node_modules/vanillajs-datepicker/js/events/functions.js\n\n\nfunction triggerDatepickerEvent(datepicker, type) {\n  const detail = {\n    date: datepicker.getDate(),\n    viewDate: new Date(datepicker.picker.viewDate),\n    viewId: datepicker.picker.currentView.id,\n    datepicker\n  };\n  datepicker.element.dispatchEvent(new CustomEvent(type, {\n    detail\n  }));\n} // direction: -1 (to previous), 1 (to next)\n\nfunction goToPrevOrNext(datepicker, direction) {\n  const {\n    minDate,\n    maxDate\n  } = datepicker.config;\n  const {\n    currentView,\n    viewDate\n  } = datepicker.picker;\n  let newViewDate;\n\n  switch (currentView.id) {\n    case 0:\n      newViewDate = Object(lib_date[\"b\" /* addMonths */])(viewDate, direction);\n      break;\n\n    case 1:\n      newViewDate = Object(lib_date[\"d\" /* addYears */])(viewDate, direction);\n      break;\n\n    default:\n      newViewDate = Object(lib_date[\"d\" /* addYears */])(viewDate, direction * currentView.navStep);\n  }\n\n  newViewDate = Object(utils[\"e\" /* limitToRange */])(newViewDate, minDate, maxDate);\n  datepicker.picker.changeFocus(newViewDate).render();\n}\nfunction switchView(datepicker) {\n  const viewId = datepicker.picker.currentView.id;\n\n  if (viewId === datepicker.config.maxView) {\n    return;\n  }\n\n  datepicker.picker.changeView(viewId + 1).render();\n}\n// CONCATENATED MODULE: ./node_modules/vanillajs-datepicker/js/events/pickerListeners.js\n\n\n\n\nfunction goToSelectedMonthOrYear(datepicker, selection) {\n  const picker = datepicker.picker;\n  const viewDate = new Date(picker.viewDate);\n  const viewId = picker.currentView.id;\n  const newDate = viewId === 1 ? Object(lib_date[\"b\" /* addMonths */])(viewDate, selection - viewDate.getMonth()) : Object(lib_date[\"d\" /* addYears */])(viewDate, selection - viewDate.getFullYear());\n  picker.changeFocus(newDate).changeView(viewId - 1).render();\n}\n\nfunction onClickTodayBtn(datepicker) {\n  const picker = datepicker.picker;\n  const currentDate = Object(lib_date[\"j\" /* today */])();\n\n  if (datepicker.config.todayBtnMode === 1) {\n    if (datepicker.config.autohide) {\n      datepicker.setDate(currentDate);\n      return;\n    }\n\n    datepicker.setDate(currentDate, {\n      render: false\n    });\n    picker.update();\n  }\n\n  if (picker.viewDate !== currentDate) {\n    picker.changeFocus(currentDate);\n  }\n\n  picker.changeView(0).render();\n}\nfunction onClickClearBtn(datepicker) {\n  datepicker.setDate({\n    clear: true\n  });\n}\nfunction onClickViewSwitch(datepicker) {\n  switchView(datepicker);\n}\nfunction onClickPrevBtn(datepicker) {\n  goToPrevOrNext(datepicker, -1);\n}\nfunction onClickNextBtn(datepicker) {\n  goToPrevOrNext(datepicker, 1);\n} // For the picker's main block to delegete the events from `datepicker-cell`s\n\nfunction onClickView(datepicker, ev) {\n  const target = Object(lib_event[\"a\" /* findElementInEventPath */])(ev, '.datepicker-cell');\n\n  if (!target || target.classList.contains('disabled')) {\n    return;\n  }\n\n  switch (datepicker.picker.currentView.id) {\n    case 0:\n      datepicker.setDate(Number(target.dataset.date));\n      break;\n\n    case 1:\n      goToSelectedMonthOrYear(datepicker, Number(target.dataset.month));\n      break;\n\n    default:\n      goToSelectedMonthOrYear(datepicker, Number(target.dataset.year));\n  }\n}\nfunction onClickPicker(datepicker, ev) {\n  ev.preventDefault();\n  ev.stopPropagation(); // check if the picker is active in order to prevent the picker from being\n  // re-shown after auto-hide when showOnFocus: true\n  // it's caused by bubbled event from cells/buttons, but the bubbling cannot\n  // be disabled because it's needed to keep the focus on the input element\n\n  if (!datepicker.inline && datepicker.picker.active && !datepicker.config.disableTouchKeyboard) {\n    datepicker.inputField.focus();\n  }\n}\n// CONCATENATED MODULE: ./node_modules/vanillajs-datepicker/js/picker/Picker.js\n\n\n\n\n\n\n\n\n\n\n\nfunction processPickerOptions(picker, options) {\n  if (options.title !== undefined) {\n    if (options.title) {\n      picker.controls.title.textContent = options.title;\n      showElement(picker.controls.title);\n    } else {\n      picker.controls.title.textContent = '';\n      hideElement(picker.controls.title);\n    }\n  }\n\n  if (options.prevArrow) {\n    const prevBtn = picker.controls.prevBtn;\n    emptyChildNodes(prevBtn);\n    options.prevArrow.forEach(node => {\n      prevBtn.appendChild(node.cloneNode(true));\n    });\n  }\n\n  if (options.nextArrow) {\n    const nextBtn = picker.controls.nextBtn;\n    emptyChildNodes(nextBtn);\n    options.nextArrow.forEach(node => {\n      nextBtn.appendChild(node.cloneNode(true));\n    });\n  }\n\n  if (options.locale) {\n    picker.controls.todayBtn.textContent = options.locale.today;\n    picker.controls.clearBtn.textContent = options.locale.clear;\n  }\n\n  if (options.todayBtn !== undefined) {\n    if (options.todayBtn) {\n      showElement(picker.controls.todayBtn);\n    } else {\n      hideElement(picker.controls.todayBtn);\n    }\n  }\n\n  if (Object(utils[\"b\" /* hasProperty */])(options, 'minDate') || Object(utils[\"b\" /* hasProperty */])(options, 'maxDate')) {\n    const {\n      minDate,\n      maxDate\n    } = picker.datepicker.config;\n    picker.controls.todayBtn.disabled = !Object(utils[\"c\" /* isInRange */])(Object(lib_date[\"j\" /* today */])(), minDate, maxDate);\n  }\n\n  if (options.clearBtn !== undefined) {\n    if (options.clearBtn) {\n      showElement(picker.controls.clearBtn);\n    } else {\n      hideElement(picker.controls.clearBtn);\n    }\n  }\n} // Compute view date to reset, which will be...\n// - the last item of the selected dates or defaultViewDate if no selection\n// - limitted to minDate or maxDate if it exceeds the range\n\n\nfunction computeResetViewDate(datepicker) {\n  const {\n    dates,\n    config\n  } = datepicker;\n  const viewDate = dates.length > 0 ? Object(utils[\"d\" /* lastItemOf */])(dates) : config.defaultViewDate;\n  return Object(utils[\"e\" /* limitToRange */])(viewDate, config.minDate, config.maxDate);\n} // Change current view's view date\n\n\nfunction setViewDate(picker, newDate) {\n  const oldViewDate = new Date(picker.viewDate);\n  const newViewDate = new Date(newDate);\n  const {\n    id,\n    year,\n    first,\n    last\n  } = picker.currentView;\n  const viewYear = newViewDate.getFullYear();\n  picker.viewDate = newDate;\n\n  if (viewYear !== oldViewDate.getFullYear()) {\n    triggerDatepickerEvent(picker.datepicker, 'changeYear');\n  }\n\n  if (newViewDate.getMonth() !== oldViewDate.getMonth()) {\n    triggerDatepickerEvent(picker.datepicker, 'changeMonth');\n  } // return whether the new date is in different period on time from the one\n  // displayed in the current view\n  // when true, the view needs to be re-rendered on the next UI refresh.\n\n\n  switch (id) {\n    case 0:\n      return newDate < first || newDate > last;\n\n    case 1:\n      return viewYear !== year;\n\n    default:\n      return viewYear < first || viewYear > last;\n  }\n}\n\nfunction getTextDirection(el) {\n  return window.getComputedStyle(el).direction;\n} // Class representing the picker UI\n\n\nclass Picker_Picker {\n  constructor(datepicker) {\n    this.datepicker = datepicker;\n    const template = templates_pickerTemplate.replace(/%buttonClass%/g, datepicker.config.buttonClass);\n    const element = this.element = parseHTML(template).firstChild;\n    const [header, main, footer] = element.firstChild.children;\n    const title = header.firstElementChild;\n    const [prevBtn, viewSwitch, nextBtn] = header.lastElementChild.children;\n    const [todayBtn, clearBtn] = footer.firstChild.children;\n    const controls = {\n      title,\n      prevBtn,\n      viewSwitch,\n      nextBtn,\n      todayBtn,\n      clearBtn\n    };\n    this.main = main;\n    this.controls = controls;\n    const elementClass = datepicker.inline ? 'inline' : 'dropdown';\n    element.classList.add(`datepicker-${elementClass}`);\n    processPickerOptions(this, datepicker.config);\n    this.viewDate = computeResetViewDate(datepicker); // set up event listeners\n\n    Object(lib_event[\"b\" /* registerListeners */])(datepicker, [[element, 'click', onClickPicker.bind(null, datepicker)], [main, 'click', onClickView.bind(null, datepicker)], [controls.viewSwitch, 'click', onClickViewSwitch.bind(null, datepicker)], [controls.prevBtn, 'click', onClickPrevBtn.bind(null, datepicker)], [controls.nextBtn, 'click', onClickNextBtn.bind(null, datepicker)], [controls.todayBtn, 'click', onClickTodayBtn.bind(null, datepicker)], [controls.clearBtn, 'click', onClickClearBtn.bind(null, datepicker)]]); // set up views\n\n    this.views = [new DaysView_DaysView(this), new MonthsView_MonthsView(this), new YearsView_YearsView(this, {\n      id: 2,\n      name: 'years',\n      cellClass: 'year',\n      step: 1\n    }), new YearsView_YearsView(this, {\n      id: 3,\n      name: 'decades',\n      cellClass: 'decade',\n      step: 10\n    })];\n    this.currentView = this.views[datepicker.config.startView];\n    this.currentView.render();\n    this.main.appendChild(this.currentView.element);\n    datepicker.config.container.appendChild(this.element);\n  }\n\n  setOptions(options) {\n    processPickerOptions(this, options);\n    this.views.forEach(view => {\n      view.init(options, false);\n    });\n    this.currentView.render();\n  }\n\n  detach() {\n    this.datepicker.config.container.removeChild(this.element);\n  }\n\n  show() {\n    if (this.active) {\n      return;\n    }\n\n    this.element.classList.add('active');\n    this.active = true;\n    const datepicker = this.datepicker;\n\n    if (!datepicker.inline) {\n      // ensure picker's direction matches input's\n      const inputDirection = getTextDirection(datepicker.inputField);\n\n      if (inputDirection !== getTextDirection(datepicker.config.container)) {\n        this.element.dir = inputDirection;\n      } else if (this.element.dir) {\n        this.element.removeAttribute('dir');\n      }\n\n      this.place();\n\n      if (datepicker.config.disableTouchKeyboard) {\n        datepicker.inputField.blur();\n      }\n    }\n\n    triggerDatepickerEvent(datepicker, 'show');\n  }\n\n  hide() {\n    if (!this.active) {\n      return;\n    }\n\n    this.datepicker.exitEditMode();\n    this.element.classList.remove('active');\n    this.active = false;\n    triggerDatepickerEvent(this.datepicker, 'hide');\n  }\n\n  place() {\n    const {\n      classList,\n      style\n    } = this.element;\n    const {\n      config,\n      inputField\n    } = this.datepicker;\n    const container = config.container;\n    const {\n      width: calendarWidth,\n      height: calendarHeight\n    } = this.element.getBoundingClientRect();\n    const {\n      left: containerLeft,\n      top: containerTop,\n      width: containerWidth\n    } = container.getBoundingClientRect();\n    const {\n      left: inputLeft,\n      top: inputTop,\n      width: inputWidth,\n      height: inputHeight\n    } = inputField.getBoundingClientRect();\n    let {\n      x: orientX,\n      y: orientY\n    } = config.orientation;\n    let scrollTop;\n    let left;\n    let top;\n\n    if (container === document.body) {\n      scrollTop = window.scrollY;\n      left = inputLeft + window.scrollX;\n      top = inputTop + scrollTop;\n    } else {\n      scrollTop = container.scrollTop;\n      left = inputLeft - containerLeft;\n      top = inputTop - containerTop + scrollTop;\n    }\n\n    if (orientX === 'auto') {\n      if (left < 0) {\n        // align to the left and move into visible area if input's left edge < window's\n        orientX = 'left';\n        left = 10;\n      } else if (left + calendarWidth > containerWidth) {\n        // align to the right if canlendar's right edge > container's\n        orientX = 'right';\n      } else {\n        orientX = getTextDirection(inputField) === 'rtl' ? 'right' : 'left';\n      }\n    }\n\n    if (orientX === 'right') {\n      left -= calendarWidth - inputWidth;\n    }\n\n    if (orientY === 'auto') {\n      orientY = top - calendarHeight < scrollTop ? 'bottom' : 'top';\n    }\n\n    if (orientY === 'top') {\n      top -= calendarHeight;\n    } else {\n      top += inputHeight;\n    }\n\n    classList.remove('datepicker-orient-top', 'datepicker-orient-bottom', 'datepicker-orient-right', 'datepicker-orient-left');\n    classList.add(`datepicker-orient-${orientY}`, `datepicker-orient-${orientX}`);\n    style.top = top ? `${top}px` : top;\n    style.left = left ? `${left}px` : left;\n  }\n\n  setViewSwitchLabel(labelText) {\n    this.controls.viewSwitch.textContent = labelText;\n  }\n\n  setPrevBtnDisabled(disabled) {\n    this.controls.prevBtn.disabled = disabled;\n  }\n\n  setNextBtnDisabled(disabled) {\n    this.controls.nextBtn.disabled = disabled;\n  }\n\n  changeView(viewId) {\n    const oldView = this.currentView;\n    const newView = this.views[viewId];\n\n    if (newView.id !== oldView.id) {\n      this.currentView = newView;\n      this._renderMethod = 'render';\n      triggerDatepickerEvent(this.datepicker, 'changeView');\n      this.main.replaceChild(newView.element, oldView.element);\n    }\n\n    return this;\n  } // Change the focused date (view date)\n\n\n  changeFocus(newViewDate) {\n    this._renderMethod = setViewDate(this, newViewDate) ? 'render' : 'refreshFocus';\n    this.views.forEach(view => {\n      view.updateFocus();\n    });\n    return this;\n  } // Apply the change of the selected dates\n\n\n  update() {\n    const newViewDate = computeResetViewDate(this.datepicker);\n    this._renderMethod = setViewDate(this, newViewDate) ? 'render' : 'refresh';\n    this.views.forEach(view => {\n      view.updateFocus();\n      view.updateSelection();\n    });\n    return this;\n  } // Refresh the picker UI\n\n\n  render() {\n    const renderMethod = this._renderMethod || 'render';\n    delete this._renderMethod;\n    this.currentView[renderMethod]();\n  }\n\n}\n// CONCATENATED MODULE: ./node_modules/vanillajs-datepicker/js/events/inputFieldListeners.js\n\n\n // Find the closest date that doesn't meet the condition for unavailable date\n// Returns undefined if no available date is found\n// addFn: function to calculate the next date\n//   - args: time value, amount\n// increase: amount to pass to addFn\n// testFn: function to test the unavailablity of the date\n//   - args: time value; retun: true if unavailable\n\nfunction findNextAvailableOne(date, addFn, increase, testFn, min, max) {\n  if (!Object(utils[\"c\" /* isInRange */])(date, min, max)) {\n    return;\n  }\n\n  if (testFn(date)) {\n    const newDate = addFn(date, increase);\n    return findNextAvailableOne(newDate, addFn, increase, testFn, min, max);\n  }\n\n  return date;\n} // direction: -1 (left/up), 1 (right/down)\n// vertical: true for up/down, false for left/right\n\n\nfunction moveByArrowKey(datepicker, ev, direction, vertical) {\n  const currentView = datepicker.picker.currentView;\n  const step = currentView.step || 1;\n  let viewDate = datepicker.picker.viewDate;\n  let addFn;\n  let testFn;\n\n  switch (currentView.id) {\n    case 0:\n      if (vertical) {\n        viewDate = Object(lib_date[\"a\" /* addDays */])(viewDate, direction * 7);\n      } else if (ev.ctrlKey || ev.metaKey) {\n        viewDate = Object(lib_date[\"d\" /* addYears */])(viewDate, direction);\n      } else {\n        viewDate = Object(lib_date[\"a\" /* addDays */])(viewDate, direction);\n      }\n\n      addFn = lib_date[\"a\" /* addDays */];\n\n      testFn = date => currentView.disabled.includes(date);\n\n      break;\n\n    case 1:\n      viewDate = Object(lib_date[\"b\" /* addMonths */])(viewDate, vertical ? direction * 4 : direction);\n      addFn = lib_date[\"b\" /* addMonths */];\n\n      testFn = date => {\n        const dt = new Date(date);\n        const {\n          year,\n          disabled\n        } = currentView;\n        return dt.getFullYear() === year && disabled.includes(dt.getMonth());\n      };\n\n      break;\n\n    default:\n      viewDate = Object(lib_date[\"d\" /* addYears */])(viewDate, direction * (vertical ? 4 : 1) * step);\n      addFn = lib_date[\"d\" /* addYears */];\n\n      testFn = date => currentView.disabled.includes(Object(lib_date[\"h\" /* startOfYearPeriod */])(date, step));\n\n  }\n\n  viewDate = findNextAvailableOne(viewDate, addFn, direction < 0 ? -step : step, testFn, currentView.minDate, currentView.maxDate);\n\n  if (viewDate !== undefined) {\n    datepicker.picker.changeFocus(viewDate).render();\n  }\n}\n\nfunction onKeydown(datepicker, ev) {\n  if (ev.key === 'Tab') {\n    datepicker.refresh('input');\n    datepicker.hide();\n    return;\n  }\n\n  const viewId = datepicker.picker.currentView.id;\n\n  if (!datepicker.picker.active) {\n    switch (ev.key) {\n      case 'ArrowDown':\n      case 'Escape':\n        datepicker.picker.show();\n        break;\n\n      case 'Enter':\n        datepicker.update();\n        break;\n\n      default:\n        return;\n    }\n  } else if (datepicker.editMode) {\n    switch (ev.key) {\n      case 'Escape':\n        datepicker.exitEditMode();\n        break;\n\n      case 'Enter':\n        datepicker.exitEditMode({\n          update: true,\n          autohide: datepicker.config.autohide\n        });\n        break;\n\n      default:\n        return;\n    }\n  } else {\n    switch (ev.key) {\n      case 'Escape':\n        if (ev.shiftKey) {\n          datepicker.enterEditMode();\n        } else {\n          datepicker.picker.hide();\n        }\n\n        break;\n\n      case 'ArrowLeft':\n        if (ev.ctrlKey || ev.metaKey) {\n          goToPrevOrNext(datepicker, -1);\n        } else {\n          moveByArrowKey(datepicker, ev, -1, false);\n        }\n\n        break;\n\n      case 'ArrowRight':\n        if (ev.ctrlKey || ev.metaKey) {\n          goToPrevOrNext(datepicker, 1);\n        } else {\n          moveByArrowKey(datepicker, ev, 1, false);\n        }\n\n        break;\n\n      case 'ArrowUp':\n        if (ev.ctrlKey || ev.metaKey) {\n          switchView(datepicker);\n        } else {\n          moveByArrowKey(datepicker, ev, -1, true);\n        }\n\n        break;\n\n      case 'ArrowDown':\n        moveByArrowKey(datepicker, ev, 1, true);\n        break;\n\n      case 'Enter':\n        if (viewId === 0) {\n          datepicker.setDate(datepicker.picker.viewDate);\n        } else {\n          datepicker.picker.changeView(viewId - 1).render();\n        }\n\n        break;\n\n      case 'Backspace':\n      case 'Delete':\n        datepicker.enterEditMode();\n        return;\n\n      default:\n        if (ev.key.length === 1 && !ev.ctrlKey && !ev.metaKey) {\n          datepicker.enterEditMode();\n        }\n\n        return;\n    }\n  }\n\n  ev.preventDefault();\n  ev.stopPropagation();\n}\nfunction onFocus(datepicker) {\n  if (datepicker.config.showOnFocus) {\n    datepicker.show();\n  }\n} // for the prevention for entering edit mode while getting focus on click\n\nfunction onMousedown(datepicker, ev) {\n  const el = ev.target;\n\n  if (datepicker.picker.active) {\n    el._clicking = setTimeout(() => {\n      delete el._clicking;\n    }, 2000);\n  }\n}\nfunction onClickInput(datepicker, ev) {\n  const el = ev.target;\n\n  if (!el._clicking) {\n    return;\n  }\n\n  clearTimeout(el._clicking);\n  delete el._clicking;\n  datepicker.enterEditMode();\n}\nfunction onPaste(datepicker, ev) {\n  if (ev.clipboardData.types.includes('text/plain')) {\n    datepicker.enterEditMode();\n  }\n}\n// CONCATENATED MODULE: ./node_modules/vanillajs-datepicker/js/events/otherListeners.js\n // for the `document` to delegate the events from outside the picker/input field\n\nfunction onClickOutside(datepicker, ev) {\n  const element = datepicker.element;\n  const pickerElem = datepicker.picker.element;\n\n  if (Object(lib_event[\"a\" /* findElementInEventPath */])(ev, el => el === element || el === pickerElem)) {\n    return;\n  }\n\n  datepicker.refresh('input');\n  datepicker.hide();\n}\n// CONCATENATED MODULE: ./node_modules/vanillajs-datepicker/js/Datepicker.js\n\n\n\n\n\n\n\n\n\n\n\n\nfunction stringifyDates(dates, config) {\n  return dates.map(dt => Object(date_format[\"a\" /* formatDate */])(dt, config.format, config.locale)).join(config.dateDelimiter);\n} // parse input dates and create an array of time values for selection\n// returns undefined if there are no valid dates in inputDates\n// when origDates (current selection) is passed, the function works to mix\n// the input dates into the current selection\n\n\nfunction processInputDates(inputDates, config, origDates = undefined) {\n  if (inputDates.length === 0) {\n    // empty input is considered valid unless origiDates is passed\n    return origDates ? undefined : [];\n  }\n\n  let newDates = inputDates.reduce((dates, dt) => {\n    const date = Object(date_format[\"b\" /* parseDate */])(dt, config.format, config.locale);\n\n    if (date !== undefined && Object(utils[\"c\" /* isInRange */])(date, config.minDate, config.maxDate) && !dates.includes(date) && !config.datesDisabled.includes(date) && !config.daysOfWeekDisabled.includes(new Date(date).getDay())) {\n      dates.push(date);\n    }\n\n    return dates;\n  }, []);\n\n  if (newDates.length === 0) {\n    return;\n  }\n\n  if (origDates && config.multidate) {\n    // get the synmetric difference between origDates and newDates\n    newDates = newDates.reduce((dates, date) => {\n      if (!origDates.includes(date)) {\n        dates.push(date);\n      }\n\n      return dates;\n    }, origDates.filter(date => !newDates.includes(date)));\n  } // do length check always because user can input multiple dates regardless of the mode\n\n\n  return config.maxNumberOfDates && newDates.length > config.maxNumberOfDates ? newDates.slice(config.maxNumberOfDates * -1) : newDates;\n}\n/**\n * Class representing a date picker\n */\n\n\nclass Datepicker_Datepicker {\n  /**\n   * Create a date picker\n   * @param  {Element} element - element to bind a date picker\n   * @param  {Object} [options] - config options\n   * @param  {DateRangePicker} [rangepicker] - DateRangePicker instance the\n   * date picker belongs to. Use this only when creating date picker as a part\n   * of date range picker\n   */\n  constructor(element, options = {}, rangepicker = undefined) {\n    element.datepicker = this;\n    this.element = element; // set up config\n\n    const config = this.config = Object.assign({\n      buttonClass: options.buttonClass && String(options.buttonClass) || 'button',\n      container: document.body,\n      defaultViewDate: Object(lib_date[\"j\" /* today */])(),\n      maxDate: undefined,\n      minDate: undefined\n    }, processOptions(options_defaultOptions, this));\n    this._options = options;\n    Object.assign(config, processOptions(options, this)); // configure by type\n\n    const inline = this.inline = element.tagName !== 'INPUT';\n    let inputField;\n    let initialDates;\n\n    if (inline) {\n      config.container = element;\n      initialDates = Object(utils[\"h\" /* stringToArray */])(element.dataset.date, config.dateDelimiter);\n      delete element.dataset.date;\n    } else {\n      const container = options.container ? document.querySelector(options.container) : null;\n\n      if (container) {\n        config.container = container;\n      }\n\n      inputField = this.inputField = element;\n      inputField.classList.add('datepicker-input');\n      initialDates = Object(utils[\"h\" /* stringToArray */])(inputField.value, config.dateDelimiter);\n    } // set initial value\n\n\n    this.dates = processInputDates(initialDates, config) || [];\n\n    if (rangepicker && rangepicker.constructor.name === 'DateRangePicker') {\n      this.rangepicker = rangepicker; // add getter for range\n\n      Object.defineProperty(this, 'range', {\n        get() {\n          return this.rangepicker.dates;\n        }\n\n      });\n    }\n\n    const picker = this.picker = new Picker_Picker(this);\n\n    if (inline) {\n      this.show();\n    } else {\n      // set up event listeners in other modes\n      const onMousedownDocument = onClickOutside.bind(null, this);\n      const listeners = [[inputField, 'keydown', onKeydown.bind(null, this)], [inputField, 'focus', onFocus.bind(null, this)], [inputField, 'mousedown', onMousedown.bind(null, this)], [inputField, 'click', onClickInput.bind(null, this)], [inputField, 'paste', onPaste.bind(null, this)], [document, 'mousedown', onMousedownDocument], [document, 'touchstart', onMousedownDocument], [window, 'resize', picker.place.bind(picker)]];\n      Object(lib_event[\"b\" /* registerListeners */])(this, listeners);\n    }\n  }\n  /**\n   * Format Date object or time value in given format and language\n   * @param  {Date|Number} date - date or time value to format\n   * @param  {String|Object} format - format string or object that contains\n   * toDisplay() custom formatter, whose signature is\n   * - args:\n   *   - date: {Date} - Date instance of the date passed to the method\n   *   - format: {Object} - the format object passed to the method\n   *   - locale: {Object} - locale for the language specified by `lang`\n   * - return:\n   *     {String} formatted date\n   * @param  {String} [lang=en] - language code for the locale to use\n   * @return {String} formatted date\n   */\n\n\n  static formatDate(date, format, lang) {\n    return Object(date_format[\"a\" /* formatDate */])(date, format, lang && base_locales_locales[lang] || base_locales_locales.en);\n  }\n  /**\n   * Pasre date string\n   * @param  {String|Date|Number} dateStr - date string, Date object or time\n   * value to parse\n   * @param  {String|Object} format - format string or object that contains\n   * toValue() custom parser, whose signature is\n   * - args:\n   *   - dateStr: {String|Date|Number} - the dateStr passed to the method\n   *   - format: {Object} - the format object passed to the method\n   *   - locale: {Object} - locale for the language specified by `lang`\n   * - return:\n   *     {Date|Number} parsed date or its time value\n   * @param  {String} [lang=en] - language code for the locale to use\n   * @return {Number} time value of parsed date\n   */\n\n\n  static parseDate(dateStr, format, lang) {\n    return Object(date_format[\"b\" /* parseDate */])(dateStr, format, lang && base_locales_locales[lang] || base_locales_locales.en);\n  }\n  /**\n   * @type {Object} - Installed locales in `[languageCode]: localeObject` format\n   * en`:_English (US)_ is pre-installed.\n   */\n\n\n  static get locales() {\n    return base_locales_locales;\n  }\n  /**\n   * @type {Boolean} - Whether the picker element is shown. `true` whne shown\n   */\n\n\n  get active() {\n    return !!(this.picker && this.picker.active);\n  }\n  /**\n   * Set new values to the config options\n   * @param {Object} options - config options to update\n   */\n\n\n  setOptions(options) {\n    const picker = this.picker;\n    const newOptions = processOptions(options, this);\n    Object.assign(this._options, options);\n    Object.assign(this.config, newOptions);\n    picker.setOptions(newOptions);\n    const currentViewId = picker.currentView.id;\n\n    if (newOptions.maxView < currentViewId) {\n      picker.changeView(newOptions.maxView);\n    } else if (newOptions.startView !== undefined && !picker.active && newOptions.startView !== currentViewId) {\n      picker.changeView(newOptions.startView);\n    }\n\n    this.refresh();\n  }\n  /**\n   * Show the picker element\n   */\n\n\n  show() {\n    if (this.inputField && this.inputField.disabled) {\n      return;\n    }\n\n    this.picker.show();\n  }\n  /**\n   * Hide the picker element\n   * Not avilable on inline picker\n   */\n\n\n  hide() {\n    if (this.inline) {\n      return;\n    }\n\n    this.picker.hide();\n    this.picker.update().changeView(this.config.startView).render();\n  }\n  /**\n   * Destroy the Datepicker instance\n   * @return {Detepicker} - the instance destroyed\n   */\n\n\n  destroy() {\n    this.hide();\n    Object(lib_event[\"c\" /* unregisterListeners */])(this);\n    this.picker.detach();\n\n    if (!this.inline) {\n      this.inputField.classList.remove('datepicker-input');\n    }\n\n    delete this.element.datepicker;\n    return this;\n  }\n  /**\n   * Get the selected date(s)\n   *\n   * The method returns a Date object of selected date by default, and returns\n   * an array of selected dates in multidate mode. If format string is passed,\n   * it returns date string(s) formatted in given format.\n   *\n   * @param  {String} [format] - Format string to stringify the date(s)\n   * @return {Date|String|Date[]|String[]} - selected date(s), or if none is\n   * selected, empty array in multidate mode and untitled in sigledate mode\n   */\n\n\n  getDate(format = undefined) {\n    const callback = format ? date => Object(date_format[\"a\" /* formatDate */])(date, format, this.config.locale) : date => new Date(date);\n\n    if (this.config.multidate) {\n      return this.dates.map(callback);\n    }\n\n    if (this.dates.length > 0) {\n      return callback(this.dates[0]);\n    }\n  }\n  /**\n   * Set selected date(s)\n   *\n   * In multidate mode, you can pass multiple dates as a series of arguments\n   * or an array. (Since each date is parsed individually, the type of the\n   * dates doesn't have to be the same.)\n   * The given dates are used to toggle the select status of each date. The\n   * number of selected dates is kept from exceeding the length set to\n   * maxNumberOfDates.\n   *\n   * With clear: true option, the method can be used to clear the selection\n   * and to replace the selection instead of toggling in multidate mode.\n   * If the option is passed with no date arguments or an empty dates array,\n   * it works as \"clear\" (clear the selection then set nothing), and if the\n   * option is passed with new dates to select, it works as \"replace\" (clear\n   * the selection then set the given dates)\n   *\n   * When render: false option is used, the method omits re-rendering the\n   * picker element. In this case, you need to call refresh() method later in\n   * order for the picker element to reflect the changes. The input field is\n   * refreshed always regardless of this option.\n   *\n   * When invalid (unparsable, repeated, disabled or out-of-range) dates are\n   * passed, the method ignores them and applies only valid ones. In the case\n   * that all the given dates are invalid, which is distiguished from passing\n   * no dates, the method considers it as an error and leaves the selection\n   * untouched.\n   *\n   * @param {...(Date|Number|String)|Array} [dates] - Date strings, Date\n   * objects, time values or mix of those for new selection\n   * @param {Object} [options] - function options\n   * - clear: {boolean} - Whether to clear the existing selection\n   *     defualt: false\n   * - render: {boolean} - Whether to re-render the picker element\n   *     default: true\n   * - autohide: {boolean} - Whether to hide the picker element after re-render\n   *     Ignored when used with render: false\n   *     default: config.autohide\n   */\n\n\n  setDate(...args) {\n    const dates = [...args];\n    const opts = {\n      clear: false,\n      render: true,\n      autohide: this.config.autohide\n    };\n    const lastArg = Object(utils[\"d\" /* lastItemOf */])(args);\n\n    if (typeof lastArg === 'object' && !Array.isArray(lastArg) && !(lastArg instanceof Date)) {\n      Object.assign(opts, dates.pop());\n    }\n\n    const inputDates = Array.isArray(dates[0]) ? dates[0] : dates;\n    const origDates = opts.clear ? undefined : this.dates;\n    const newDates = processInputDates(inputDates, this.config, origDates);\n\n    if (!newDates) {\n      return;\n    }\n\n    if (newDates.toString() !== this.dates.toString()) {\n      this.dates = newDates;\n\n      if (opts.render) {\n        this.picker.update();\n        this.refresh();\n      } else {\n        this.refresh('input');\n      }\n\n      triggerDatepickerEvent(this, 'changeDate');\n    } else {\n      this.refresh('input');\n    }\n\n    if (opts.render && opts.autohide) {\n      this.hide();\n    }\n  }\n  /**\n   * Update the selected date(s) with input field's value\n   * Not avilable on inline picker\n   *\n   * The input field will be refreshed with properly formatted date string.\n   *\n   * @param  {Object} [options] - function options\n   * - autohide: {boolean} - whether to hide the picker element after refresh\n   *     default: false\n   */\n\n\n  update(options = undefined) {\n    if (this.inline) {\n      return;\n    }\n\n    const opts = Object.assign({\n      autohide: false\n    }, options);\n    const inputDates = Object(utils[\"h\" /* stringToArray */])(this.inputField.value, this.config.dateDelimiter);\n    const newDates = processInputDates(inputDates, this.config);\n\n    if (!newDates) {\n      return;\n    }\n\n    if (newDates.toString() !== this.dates.toString()) {\n      this.dates = newDates;\n      this.picker.update();\n      this.refresh();\n      triggerDatepickerEvent(this, 'changeDate');\n    } else {\n      this.refresh('input');\n    }\n\n    if (opts.autohide) {\n      this.hide();\n    }\n  }\n  /**\n   * Refresh the picker element and the associated input field\n   * @param {String} [target] - target item when refreshing one item only\n   * 'picker' or 'input'\n   */\n\n\n  refresh(target = undefined) {\n    if (target !== 'input') {\n      this.picker.render();\n    }\n\n    if (!this.inline && target !== 'picker') {\n      this.inputField.value = stringifyDates(this.dates, this.config);\n    }\n  }\n  /**\n   * Enter edit mode\n   * Not avilable on inline picker or when the picker element is hidden\n   */\n\n\n  enterEditMode() {\n    if (this.inline || !this.picker.active || this.editMode) {\n      return;\n    }\n\n    this.editMode = true;\n    this.inputField.classList.add('in-edit');\n  }\n  /**\n   * Exit from edit mode\n   * Not avilable on inline picker\n   * @param  {Object} [options] - function options\n   * - update: {boolean} - whether to call update() after exiting\n   *     If false, input field is revert to the existing selection\n   *     default: false\n   */\n\n\n  exitEditMode(options = undefined) {\n    if (this.inline || !this.editMode) {\n      return;\n    }\n\n    const opts = Object.assign({\n      update: false\n    }, options);\n    delete this.editMode;\n    this.inputField.classList.remove('in-edit');\n\n    if (opts.update) {\n      this.update(opts);\n    } else {\n      this.inputField.value = stringifyDates(this.dates, this.config);\n    }\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n")},,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// UNUSED EXPORTS: Masked, createMask, MaskedRegExp, MaskedPattern, MaskedRange, MaskedDate, MaskElement, HTMLMaskElement, HTMLContenteditableMaskElement, InputMask, MaskedEnum, MaskedNumber, MaskedFunction, MaskedDynamic, PIPE_TYPE, createPipe, pipe\n\n// CONCATENATED MODULE: ./node_modules/imask/esm/_rollupPluginBabelHelpers-3c58f0e3.js\nfunction _typeof(obj) {\n  "@babel/helpers - typeof";\n\n  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if ("value" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== "function" && superClass !== null) {\n    throw new TypeError("Super expression must either be null or a function");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === "object" || typeof call === "function")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== "undefined" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _rollupPluginBabelHelpers_3c58f0e3_set(target, property, value, receiver) {\n  if (typeof Reflect !== "undefined" && Reflect.set) {\n    _rollupPluginBabelHelpers_3c58f0e3_set = Reflect.set;\n  } else {\n    _rollupPluginBabelHelpers_3c58f0e3_set = function set(target, property, value, receiver) {\n      var base = _superPropBase(target, property);\n\n      var desc;\n\n      if (base) {\n        desc = Object.getOwnPropertyDescriptor(base, property);\n\n        if (desc.set) {\n          desc.set.call(receiver, value);\n          return true;\n        } else if (!desc.writable) {\n          return false;\n        }\n      }\n\n      desc = Object.getOwnPropertyDescriptor(receiver, property);\n\n      if (desc) {\n        if (!desc.writable) {\n          return false;\n        }\n\n        desc.value = value;\n        Object.defineProperty(receiver, property, desc);\n      } else {\n        _defineProperty(receiver, property, value);\n      }\n\n      return true;\n    };\n  }\n\n  return _rollupPluginBabelHelpers_3c58f0e3_set(target, property, value, receiver);\n}\n\nfunction _set(target, property, value, receiver, isStrict) {\n  var s = _rollupPluginBabelHelpers_3c58f0e3_set(target, property, value, receiver || target);\n\n  if (!s && isStrict) {\n    throw new Error(\'failed to set property\');\n  }\n\n  return value;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i["return"] != null) _i["return"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError("Invalid attempt to destructure non-iterable instance");\n}\n\n\n// CONCATENATED MODULE: ./node_modules/imask/esm/core/utils.js\n\n/** Checks if value is string */\n\nfunction isString(str) {\n  return typeof str === \'string\' || str instanceof String;\n}\n/**\r\n  Direction\r\n  @prop {string} NONE\r\n  @prop {string} LEFT\r\n  @prop {string} FORCE_LEFT\r\n  @prop {string} RIGHT\r\n  @prop {string} FORCE_RIGHT\r\n*/\n\n\nvar DIRECTION = {\n  NONE: \'NONE\',\n  LEFT: \'LEFT\',\n  FORCE_LEFT: \'FORCE_LEFT\',\n  RIGHT: \'RIGHT\',\n  FORCE_RIGHT: \'FORCE_RIGHT\'\n};\n/**\r\n  Direction\r\n  @enum {string}\r\n*/\n\n/** Returns next char index in direction */\n\nfunction indexInDirection(pos, direction) {\n  if (direction === DIRECTION.LEFT) --pos;\n  return pos;\n}\n/** Returns next char position in direction */\n\n\nfunction posInDirection(pos, direction) {\n  switch (direction) {\n    case DIRECTION.LEFT:\n    case DIRECTION.FORCE_LEFT:\n      return --pos;\n\n    case DIRECTION.RIGHT:\n    case DIRECTION.FORCE_RIGHT:\n      return ++pos;\n\n    default:\n      return pos;\n  }\n}\n/** */\n\n\nfunction forceDirection(direction) {\n  switch (direction) {\n    case DIRECTION.LEFT:\n      return DIRECTION.FORCE_LEFT;\n\n    case DIRECTION.RIGHT:\n      return DIRECTION.FORCE_RIGHT;\n\n    default:\n      return direction;\n  }\n}\n/** Escapes regular expression control chars */\n\n\nfunction escapeRegExp(str) {\n  return str.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, \'\\\\$1\');\n} // cloned from https://github.com/epoberezkin/fast-deep-equal with small changes\n\n\nfunction objectIncludes(b, a) {\n  if (a === b) return true;\n  var arrA = Array.isArray(a),\n      arrB = Array.isArray(b),\n      i;\n\n  if (arrA && arrB) {\n    if (a.length != b.length) return false;\n\n    for (i = 0; i < a.length; i++) {\n      if (!objectIncludes(a[i], b[i])) return false;\n    }\n\n    return true;\n  }\n\n  if (arrA != arrB) return false;\n\n  if (a && b && _typeof(a) === \'object\' && _typeof(b) === \'object\') {\n    var dateA = a instanceof Date,\n        dateB = b instanceof Date;\n    if (dateA && dateB) return a.getTime() == b.getTime();\n    if (dateA != dateB) return false;\n    var regexpA = a instanceof RegExp,\n        regexpB = b instanceof RegExp;\n    if (regexpA && regexpB) return a.toString() == b.toString();\n    if (regexpA != regexpB) return false;\n    var keys = Object.keys(a); // if (keys.length !== Object.keys(b).length) return false;\n\n    for (i = 0; i < keys.length; i++) {\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n    }\n\n    for (i = 0; i < keys.length; i++) {\n      if (!objectIncludes(b[keys[i]], a[keys[i]])) return false;\n    }\n\n    return true;\n  } else if (a && b && typeof a === \'function\' && typeof b === \'function\') {\n    return a.toString() === b.toString();\n  }\n\n  return false;\n}\n/** Selection range */\n\n\n\n// CONCATENATED MODULE: ./node_modules/imask/esm/core/action-details.js\n\n\n/** Provides details of changing input */\n\nvar action_details_ActionDetails = /*#__PURE__*/function () {\n  /** Current input value */\n\n  /** Current cursor position */\n\n  /** Old input value */\n\n  /** Old selection */\n  function ActionDetails(value, cursorPos, oldValue, oldSelection) {\n    _classCallCheck(this, ActionDetails);\n\n    this.value = value;\n    this.cursorPos = cursorPos;\n    this.oldValue = oldValue;\n    this.oldSelection = oldSelection; // double check if left part was changed (autofilling, other non-standard input triggers)\n\n    while (this.value.slice(0, this.startChangePos) !== this.oldValue.slice(0, this.startChangePos)) {\n      --this.oldSelection.start;\n    }\n  }\n  /**\r\n    Start changing position\r\n    @readonly\r\n  */\n\n\n  _createClass(ActionDetails, [{\n    key: "startChangePos",\n    get: function get() {\n      return Math.min(this.cursorPos, this.oldSelection.start);\n    }\n    /**\r\n      Inserted symbols count\r\n      @readonly\r\n    */\n\n  }, {\n    key: "insertedCount",\n    get: function get() {\n      return this.cursorPos - this.startChangePos;\n    }\n    /**\r\n      Inserted symbols\r\n      @readonly\r\n    */\n\n  }, {\n    key: "inserted",\n    get: function get() {\n      return this.value.substr(this.startChangePos, this.insertedCount);\n    }\n    /**\r\n      Removed symbols count\r\n      @readonly\r\n    */\n\n  }, {\n    key: "removedCount",\n    get: function get() {\n      // Math.max for opposite operation\n      return Math.max(this.oldSelection.end - this.startChangePos || // for Delete\n      this.oldValue.length - this.value.length, 0);\n    }\n    /**\r\n      Removed symbols\r\n      @readonly\r\n    */\n\n  }, {\n    key: "removed",\n    get: function get() {\n      return this.oldValue.substr(this.startChangePos, this.removedCount);\n    }\n    /**\r\n      Unchanged head symbols\r\n      @readonly\r\n    */\n\n  }, {\n    key: "head",\n    get: function get() {\n      return this.value.substring(0, this.startChangePos);\n    }\n    /**\r\n      Unchanged tail symbols\r\n      @readonly\r\n    */\n\n  }, {\n    key: "tail",\n    get: function get() {\n      return this.value.substring(this.startChangePos + this.insertedCount);\n    }\n    /**\r\n      Remove direction\r\n      @readonly\r\n    */\n\n  }, {\n    key: "removeDirection",\n    get: function get() {\n      if (!this.removedCount || this.insertedCount) return DIRECTION.NONE; // align right if delete at right or if range removed (event with backspace)\n\n      return this.oldSelection.end === this.cursorPos || this.oldSelection.start === this.cursorPos ? DIRECTION.RIGHT : DIRECTION.LEFT;\n    }\n  }]);\n\n  return ActionDetails;\n}();\n\n/* harmony default export */ var action_details = (action_details_ActionDetails);\n// CONCATENATED MODULE: ./node_modules/imask/esm/core/change-details.js\n\n/**\r\n  Provides details of changing model value\r\n  @param {Object} [details]\r\n  @param {string} [details.inserted] - Inserted symbols\r\n  @param {boolean} [details.skip] - Can skip chars\r\n  @param {number} [details.removeCount] - Removed symbols count\r\n  @param {number} [details.tailShift] - Additional offset if any changes occurred before tail\r\n*/\n\nvar change_details_ChangeDetails = /*#__PURE__*/function () {\n  /** Inserted symbols */\n\n  /** Can skip chars */\n\n  /** Additional offset if any changes occurred before tail */\n\n  /** Raw inserted is used by dynamic mask */\n  function ChangeDetails(details) {\n    _classCallCheck(this, ChangeDetails);\n\n    Object.assign(this, {\n      inserted: \'\',\n      rawInserted: \'\',\n      skip: false,\n      tailShift: 0\n    }, details);\n  }\n  /**\r\n    Aggregate changes\r\n    @returns {ChangeDetails} `this`\r\n  */\n\n\n  _createClass(ChangeDetails, [{\n    key: "aggregate",\n    value: function aggregate(details) {\n      this.rawInserted += details.rawInserted;\n      this.skip = this.skip || details.skip;\n      this.inserted += details.inserted;\n      this.tailShift += details.tailShift;\n      return this;\n    }\n    /** Total offset considering all changes */\n\n  }, {\n    key: "offset",\n    get: function get() {\n      return this.tailShift + this.inserted.length;\n    }\n  }]);\n\n  return ChangeDetails;\n}();\n\n/* harmony default export */ var change_details = (change_details_ChangeDetails);\n// CONCATENATED MODULE: ./node_modules/imask/esm/core/continuous-tail-details.js\n\n/** Provides details of continuous extracted tail */\n\nvar continuous_tail_details_ContinuousTailDetails = /*#__PURE__*/function () {\n  /** Tail value as string */\n\n  /** Tail start position */\n\n  /** Start position */\n  function ContinuousTailDetails() {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \'\';\n    var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var stop = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, ContinuousTailDetails);\n\n    this.value = value;\n    this.from = from;\n    this.stop = stop;\n  }\n\n  _createClass(ContinuousTailDetails, [{\n    key: "toString",\n    value: function toString() {\n      return this.value;\n    }\n  }, {\n    key: "extend",\n    value: function extend(tail) {\n      this.value += String(tail);\n    }\n  }, {\n    key: "appendTo",\n    value: function appendTo(masked) {\n      return masked.append(this.toString(), {\n        tail: true\n      }).aggregate(masked._appendPlaceholder());\n    }\n  }, {\n    key: "shiftBefore",\n    value: function shiftBefore(pos) {\n      if (this.from >= pos || !this.value.length) return \'\';\n      var shiftChar = this.value[0];\n      this.value = this.value.slice(1);\n      return shiftChar;\n    }\n  }, {\n    key: "state",\n    get: function get() {\n      return {\n        value: this.value,\n        from: this.from,\n        stop: this.stop\n      };\n    },\n    set: function set(state) {\n      Object.assign(this, state);\n    }\n  }]);\n\n  return ContinuousTailDetails;\n}();\n\n/* harmony default export */ var continuous_tail_details = (continuous_tail_details_ContinuousTailDetails);\n// CONCATENATED MODULE: ./node_modules/imask/esm/core/holder.js\n/**\r\n * Applies mask on element.\r\n * @constructor\r\n * @param {HTMLInputElement|HTMLTextAreaElement|MaskElement} el - Element to apply mask\r\n * @param {Object} opts - Custom mask options\r\n * @return {InputMask}\r\n */\nfunction IMask(el) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}; // currently available only for input-like elements\n\n  return new IMask.InputMask(el, opts);\n}\n\n/* harmony default export */ var holder = (IMask);\n// CONCATENATED MODULE: ./node_modules/imask/esm/masked/base.js\n\n\n\n\n\n/** Supported mask type */\n\n/** Provides common masking stuff */\n\nvar base_Masked = /*#__PURE__*/function () {\n  // $Shape<MaskedOptions>; TODO after fix https://github.com/facebook/flow/issues/4773\n\n  /** @type {Mask} */\n\n  /** */\n  // $FlowFixMe no ideas\n\n  /** Transforms value before mask processing */\n\n  /** Validates if value is acceptable */\n\n  /** Does additional processing in the end of editing */\n\n  /** Format typed value to string */\n\n  /** Parse strgin to get typed value */\n\n  /** Enable characters overwriting */\n\n  /** */\n  function Masked(opts) {\n    _classCallCheck(this, Masked);\n\n    this._value = \'\';\n\n    this._update(Object.assign({}, Masked.DEFAULTS, {}, opts));\n\n    this.isInitialized = true;\n  }\n  /** Sets and applies new options */\n\n\n  _createClass(Masked, [{\n    key: "updateOptions",\n    value: function updateOptions(opts) {\n      if (!Object.keys(opts).length) return;\n      this.withValueRefresh(this._update.bind(this, opts));\n    }\n    /**\r\n      Sets new options\r\n      @protected\r\n    */\n\n  }, {\n    key: "_update",\n    value: function _update(opts) {\n      Object.assign(this, opts);\n    }\n    /** Mask state */\n\n  }, {\n    key: "reset",\n\n    /** Resets value */\n    value: function reset() {\n      this._value = \'\';\n    }\n    /** */\n\n  }, {\n    key: "resolve",\n\n    /** Resolve new value */\n    value: function resolve(value) {\n      this.reset();\n      this.append(value, {\n        input: true\n      }, \'\');\n      this.doCommit();\n      return this.value;\n    }\n    /** */\n\n  }, {\n    key: "nearestInputPos",\n\n    /** Finds nearest input position in direction */\n    value: function nearestInputPos(cursorPos, direction) {\n      return cursorPos;\n    }\n    /** Extracts value in range considering flags */\n\n  }, {\n    key: "extractInput",\n    value: function extractInput() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n      return this.value.slice(fromPos, toPos);\n    }\n    /** Extracts tail in range */\n\n  }, {\n    key: "extractTail",\n    value: function extractTail() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n      return new continuous_tail_details(this.extractInput(fromPos, toPos), fromPos);\n    }\n    /** Appends tail */\n    // $FlowFixMe no ideas\n\n  }, {\n    key: "appendTail",\n    value: function appendTail(tail) {\n      if (isString(tail)) tail = new continuous_tail_details(String(tail));\n      return tail.appendTo(this);\n    }\n    /** Appends char */\n\n  }, {\n    key: "_appendCharRaw",\n    value: function _appendCharRaw(ch) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      ch = this.doPrepare(ch, flags);\n      if (!ch) return new change_details();\n      this._value += ch;\n      return new change_details({\n        inserted: ch,\n        rawInserted: ch\n      });\n    }\n    /** Appends char */\n\n  }, {\n    key: "_appendChar",\n    value: function _appendChar(ch) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var checkTail = arguments.length > 2 ? arguments[2] : undefined;\n      var consistentState = this.state;\n\n      var details = this._appendCharRaw(ch, flags);\n\n      if (details.inserted) {\n        var consistentTail;\n        var appended = this.doValidate(flags) !== false;\n\n        if (appended && checkTail != null) {\n          // validation ok, check tail\n          var beforeTailState = this.state;\n\n          if (this.overwrite) {\n            consistentTail = checkTail.state;\n            checkTail.shiftBefore(this.value.length);\n          }\n\n          var tailDetails = this.appendTail(checkTail);\n          appended = tailDetails.rawInserted === checkTail.toString(); // if ok, rollback state after tail\n\n          if (appended && tailDetails.inserted) this.state = beforeTailState;\n        } // revert all if something went wrong\n\n\n        if (!appended) {\n          details = new change_details();\n          this.state = consistentState;\n          if (checkTail && consistentTail) checkTail.state = consistentTail;\n        }\n      }\n\n      return details;\n    }\n    /** Appends optional placeholder at end */\n\n  }, {\n    key: "_appendPlaceholder",\n    value: function _appendPlaceholder() {\n      return new change_details();\n    }\n    /** Appends symbols considering flags */\n    // $FlowFixMe no ideas\n\n  }, {\n    key: "append",\n    value: function append(str, flags, tail) {\n      if (!isString(str)) throw new Error(\'value should be string\');\n      var details = new change_details();\n      var checkTail = isString(tail) ? new continuous_tail_details(String(tail)) : tail;\n      if (flags.tail) flags._beforeTailState = this.state;\n\n      for (var ci = 0; ci < str.length; ++ci) {\n        details.aggregate(this._appendChar(str[ci], flags, checkTail));\n      } // append tail but aggregate only tailShift\n\n\n      if (checkTail != null) {\n        details.tailShift += this.appendTail(checkTail).tailShift; // TODO it\'s a good idea to clear state after appending ends\n        // but it causes bugs when one append calls another (when dynamic dispatch set rawInputValue)\n        // this._resetBeforeTailState();\n      }\n\n      return details;\n    }\n    /** */\n\n  }, {\n    key: "remove",\n    value: function remove() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n      this._value = this.value.slice(0, fromPos) + this.value.slice(toPos);\n      return new change_details();\n    }\n    /** Calls function and reapplies current value */\n\n  }, {\n    key: "withValueRefresh",\n    value: function withValueRefresh(fn) {\n      if (this._refreshing || !this.isInitialized) return fn();\n      this._refreshing = true;\n      var rawInput = this.rawInputValue;\n      var value = this.value;\n      var ret = fn();\n      this.rawInputValue = rawInput; // append lost trailing chars at end\n\n      if (this.value !== value && value.indexOf(this.value) === 0) {\n        this.append(value.slice(this.value.length), {}, \'\');\n      }\n\n      delete this._refreshing;\n      return ret;\n    }\n    /** */\n\n  }, {\n    key: "runIsolated",\n    value: function runIsolated(fn) {\n      if (this._isolated || !this.isInitialized) return fn(this);\n      this._isolated = true;\n      var state = this.state;\n      var ret = fn(this);\n      this.state = state;\n      delete this._isolated;\n      return ret;\n    }\n    /**\r\n      Prepares string before mask processing\r\n      @protected\r\n    */\n\n  }, {\n    key: "doPrepare",\n    value: function doPrepare(str) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.prepare ? this.prepare(str, this, flags) : str;\n    }\n    /**\r\n      Validates if value is acceptable\r\n      @protected\r\n    */\n\n  }, {\n    key: "doValidate",\n    value: function doValidate(flags) {\n      return (!this.validate || this.validate(this.value, this, flags)) && (!this.parent || this.parent.doValidate(flags));\n    }\n    /**\r\n      Does additional processing in the end of editing\r\n      @protected\r\n    */\n\n  }, {\n    key: "doCommit",\n    value: function doCommit() {\n      if (this.commit) this.commit(this.value, this);\n    }\n    /** */\n\n  }, {\n    key: "doFormat",\n    value: function doFormat(value) {\n      return this.format ? this.format(value, this) : value;\n    }\n    /** */\n\n  }, {\n    key: "doParse",\n    value: function doParse(str) {\n      return this.parse ? this.parse(str, this) : str;\n    }\n    /** */\n\n  }, {\n    key: "splice",\n    value: function splice(start, deleteCount, inserted, removeDirection) {\n      var tailPos = start + deleteCount;\n      var tail = this.extractTail(tailPos);\n      var startChangePos = this.nearestInputPos(start, removeDirection);\n      var changeDetails = new change_details({\n        tailShift: startChangePos - start // adjust tailShift if start was aligned\n\n      }).aggregate(this.remove(startChangePos)).aggregate(this.append(inserted, {\n        input: true\n      }, tail));\n      return changeDetails;\n    }\n  }, {\n    key: "state",\n    get: function get() {\n      return {\n        _value: this.value\n      };\n    },\n    set: function set(state) {\n      this._value = state._value;\n    }\n  }, {\n    key: "value",\n    get: function get() {\n      return this._value;\n    },\n    set: function set(value) {\n      this.resolve(value);\n    }\n  }, {\n    key: "unmaskedValue",\n    get: function get() {\n      return this.value;\n    },\n    set: function set(value) {\n      this.reset();\n      this.append(value, {}, \'\');\n      this.doCommit();\n    }\n    /** */\n\n  }, {\n    key: "typedValue",\n    get: function get() {\n      return this.doParse(this.value);\n    },\n    set: function set(value) {\n      this.value = this.doFormat(value);\n    }\n    /** Value that includes raw user input */\n\n  }, {\n    key: "rawInputValue",\n    get: function get() {\n      return this.extractInput(0, this.value.length, {\n        raw: true\n      });\n    },\n    set: function set(value) {\n      this.reset();\n      this.append(value, {\n        raw: true\n      }, \'\');\n      this.doCommit();\n    }\n    /** */\n\n  }, {\n    key: "isComplete",\n    get: function get() {\n      return true;\n    }\n  }]);\n\n  return Masked;\n}();\n\nbase_Masked.DEFAULTS = {\n  format: function format(v) {\n    return v;\n  },\n  parse: function parse(v) {\n    return v;\n  }\n};\nholder.Masked = base_Masked;\n/* harmony default export */ var base = (base_Masked);\n// CONCATENATED MODULE: ./node_modules/imask/esm/masked/factory.js\n\n\n\n/** Get Masked class by mask type */\n\nfunction maskedClass(mask) {\n  if (mask == null) {\n    throw new Error(\'mask property should be defined\');\n  } // $FlowFixMe\n\n\n  if (mask instanceof RegExp) return holder.MaskedRegExp; // $FlowFixMe\n\n  if (isString(mask)) return holder.MaskedPattern; // $FlowFixMe\n\n  if (mask instanceof Date || mask === Date) return holder.MaskedDate; // $FlowFixMe\n\n  if (mask instanceof Number || typeof mask === \'number\' || mask === Number) return holder.MaskedNumber; // $FlowFixMe\n\n  if (Array.isArray(mask) || mask === Array) return holder.MaskedDynamic; // $FlowFixMe\n\n  if (holder.Masked && mask.prototype instanceof holder.Masked) return mask; // $FlowFixMe\n\n  if (mask instanceof Function) return holder.MaskedFunction; // $FlowFixMe\n\n  if (mask instanceof holder.Masked) return mask.constructor;\n  console.warn(\'Mask not found for mask\', mask); // eslint-disable-line no-console\n  // $FlowFixMe\n\n  return holder.Masked;\n}\n/** Creates new {@link Masked} depending on mask type */\n\n\nfunction createMask(opts) {\n  // $FlowFixMe\n  if (holder.Masked && opts instanceof holder.Masked) return opts;\n  opts = Object.assign({}, opts);\n  var mask = opts.mask; // $FlowFixMe\n\n  if (holder.Masked && mask instanceof holder.Masked) return mask;\n  var MaskedClass = maskedClass(mask);\n  if (!MaskedClass) throw new Error(\'Masked class is not found for provided mask, appropriate module needs to be import manually before creating mask.\');\n  return new MaskedClass(opts);\n}\n\nholder.createMask = createMask;\n/* harmony default export */ var factory = (createMask);\n\n// CONCATENATED MODULE: ./node_modules/imask/esm/masked/pattern/input-definition.js\n\n\n\n\n\nvar DEFAULT_INPUT_DEFINITIONS = {\n  \'0\': /\\d/,\n  \'a\': /[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,\n  // http://stackoverflow.com/a/22075070\n  \'*\': /./\n};\n/** */\n\nvar input_definition_PatternInputDefinition = /*#__PURE__*/function () {\n  /** */\n\n  /** */\n\n  /** */\n\n  /** */\n\n  /** */\n\n  /** */\n  function PatternInputDefinition(opts) {\n    _classCallCheck(this, PatternInputDefinition);\n\n    var mask = opts.mask,\n        blockOpts = _objectWithoutProperties(opts, ["mask"]);\n\n    this.masked = factory({\n      mask: mask\n    });\n    Object.assign(this, blockOpts);\n  }\n\n  _createClass(PatternInputDefinition, [{\n    key: "reset",\n    value: function reset() {\n      this._isFilled = false;\n      this.masked.reset();\n    }\n  }, {\n    key: "remove",\n    value: function remove() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n\n      if (fromPos === 0 && toPos >= 1) {\n        this._isFilled = false;\n        return this.masked.remove(fromPos, toPos);\n      }\n\n      return new change_details();\n    }\n  }, {\n    key: "_appendChar",\n    value: function _appendChar(str) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (this._isFilled) return new change_details();\n      var state = this.masked.state; // simulate input\n\n      var details = this.masked._appendChar(str, flags);\n\n      if (details.inserted && this.doValidate(flags) === false) {\n        details.inserted = details.rawInserted = \'\';\n        this.masked.state = state;\n      }\n\n      if (!details.inserted && !this.isOptional && !this.lazy && !flags.input) {\n        details.inserted = this.placeholderChar;\n      }\n\n      details.skip = !details.inserted && !this.isOptional;\n      this._isFilled = Boolean(details.inserted);\n      return details;\n    }\n  }, {\n    key: "append",\n    value: function append() {\n      var _this$masked;\n\n      return (_this$masked = this.masked).append.apply(_this$masked, arguments);\n    }\n  }, {\n    key: "_appendPlaceholder",\n    value: function _appendPlaceholder() {\n      var details = new change_details();\n      if (this._isFilled || this.isOptional) return details;\n      this._isFilled = true;\n      details.inserted = this.placeholderChar;\n      return details;\n    }\n  }, {\n    key: "extractTail",\n    value: function extractTail() {\n      var _this$masked2;\n\n      return (_this$masked2 = this.masked).extractTail.apply(_this$masked2, arguments);\n    }\n  }, {\n    key: "appendTail",\n    value: function appendTail() {\n      var _this$masked3;\n\n      return (_this$masked3 = this.masked).appendTail.apply(_this$masked3, arguments);\n    }\n  }, {\n    key: "extractInput",\n    value: function extractInput() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n      var flags = arguments.length > 2 ? arguments[2] : undefined;\n      return this.masked.extractInput(fromPos, toPos, flags);\n    }\n  }, {\n    key: "nearestInputPos",\n    value: function nearestInputPos(cursorPos) {\n      var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DIRECTION.NONE;\n      var minPos = 0;\n      var maxPos = this.value.length;\n      var boundPos = Math.min(Math.max(cursorPos, minPos), maxPos);\n\n      switch (direction) {\n        case DIRECTION.LEFT:\n        case DIRECTION.FORCE_LEFT:\n          return this.isComplete ? boundPos : minPos;\n\n        case DIRECTION.RIGHT:\n        case DIRECTION.FORCE_RIGHT:\n          return this.isComplete ? boundPos : maxPos;\n\n        case DIRECTION.NONE:\n        default:\n          return boundPos;\n      }\n    }\n  }, {\n    key: "doValidate",\n    value: function doValidate() {\n      var _this$masked4, _this$parent;\n\n      return (_this$masked4 = this.masked).doValidate.apply(_this$masked4, arguments) && (!this.parent || (_this$parent = this.parent).doValidate.apply(_this$parent, arguments));\n    }\n  }, {\n    key: "doCommit",\n    value: function doCommit() {\n      this.masked.doCommit();\n    }\n  }, {\n    key: "value",\n    get: function get() {\n      return this.masked.value || (this._isFilled && !this.isOptional ? this.placeholderChar : \'\');\n    }\n  }, {\n    key: "unmaskedValue",\n    get: function get() {\n      return this.masked.unmaskedValue;\n    }\n  }, {\n    key: "isComplete",\n    get: function get() {\n      return Boolean(this.masked.value) || this.isOptional;\n    }\n  }, {\n    key: "state",\n    get: function get() {\n      return {\n        masked: this.masked.state,\n        _isFilled: this._isFilled\n      };\n    },\n    set: function set(state) {\n      this.masked.state = state.masked;\n      this._isFilled = state._isFilled;\n    }\n  }]);\n\n  return PatternInputDefinition;\n}();\n\n/* harmony default export */ var input_definition = (input_definition_PatternInputDefinition);\n\n// CONCATENATED MODULE: ./node_modules/imask/esm/masked/pattern/fixed-definition.js\n\n\n\n\n\nvar fixed_definition_PatternFixedDefinition = /*#__PURE__*/function () {\n  /** */\n\n  /** */\n\n  /** */\n\n  /** */\n  function PatternFixedDefinition(opts) {\n    _classCallCheck(this, PatternFixedDefinition);\n\n    Object.assign(this, opts);\n    this._value = \'\';\n  }\n\n  _createClass(PatternFixedDefinition, [{\n    key: "reset",\n    value: function reset() {\n      this._isRawInput = false;\n      this._value = \'\';\n    }\n  }, {\n    key: "remove",\n    value: function remove() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._value.length;\n      this._value = this._value.slice(0, fromPos) + this._value.slice(toPos);\n      if (!this._value) this._isRawInput = false;\n      return new change_details();\n    }\n  }, {\n    key: "nearestInputPos",\n    value: function nearestInputPos(cursorPos) {\n      var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DIRECTION.NONE;\n      var minPos = 0;\n      var maxPos = this._value.length;\n\n      switch (direction) {\n        case DIRECTION.LEFT:\n        case DIRECTION.FORCE_LEFT:\n          return minPos;\n\n        case DIRECTION.NONE:\n        case DIRECTION.RIGHT:\n        case DIRECTION.FORCE_RIGHT:\n        default:\n          return maxPos;\n      }\n    }\n  }, {\n    key: "extractInput",\n    value: function extractInput() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._value.length;\n      var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return flags.raw && this._isRawInput && this._value.slice(fromPos, toPos) || \'\';\n    }\n  }, {\n    key: "_appendChar",\n    value: function _appendChar(str) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var details = new change_details();\n      if (this._value) return details;\n      var appended = this.char === str[0];\n      var isResolved = appended && (this.isUnmasking || flags.input || flags.raw) && !flags.tail;\n      if (isResolved) details.rawInserted = this.char;\n      this._value = details.inserted = this.char;\n      this._isRawInput = isResolved && (flags.raw || flags.input);\n      return details;\n    }\n  }, {\n    key: "_appendPlaceholder",\n    value: function _appendPlaceholder() {\n      var details = new change_details();\n      if (this._value) return details;\n      this._value = details.inserted = this.char;\n      return details;\n    }\n  }, {\n    key: "extractTail",\n    value: function extractTail() {\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n      return new continuous_tail_details(\'\');\n    } // $FlowFixMe no ideas\n\n  }, {\n    key: "appendTail",\n    value: function appendTail(tail) {\n      if (isString(tail)) tail = new continuous_tail_details(String(tail));\n      return tail.appendTo(this);\n    }\n  }, {\n    key: "append",\n    value: function append(str, flags, tail) {\n      var details = this._appendChar(str, flags);\n\n      if (tail != null) {\n        details.tailShift += this.appendTail(tail).tailShift;\n      }\n\n      return details;\n    }\n  }, {\n    key: "doCommit",\n    value: function doCommit() {}\n  }, {\n    key: "value",\n    get: function get() {\n      return this._value;\n    }\n  }, {\n    key: "unmaskedValue",\n    get: function get() {\n      return this.isUnmasking ? this.value : \'\';\n    }\n  }, {\n    key: "isComplete",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: "state",\n    get: function get() {\n      return {\n        _value: this._value,\n        _isRawInput: this._isRawInput\n      };\n    },\n    set: function set(state) {\n      Object.assign(this, state);\n    }\n  }]);\n\n  return PatternFixedDefinition;\n}();\n\n/* harmony default export */ var fixed_definition = (fixed_definition_PatternFixedDefinition);\n// CONCATENATED MODULE: ./node_modules/imask/esm/masked/pattern/chunk-tail-details.js\n\n\n\n\n\n\nvar chunk_tail_details_ChunksTailDetails = /*#__PURE__*/function () {\n  /** */\n  function ChunksTailDetails() {\n    var chunks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    _classCallCheck(this, ChunksTailDetails);\n\n    this.chunks = chunks;\n    this.from = from;\n  }\n\n  _createClass(ChunksTailDetails, [{\n    key: "toString",\n    value: function toString() {\n      return this.chunks.map(String).join(\'\');\n    } // $FlowFixMe no ideas\n\n  }, {\n    key: "extend",\n    value: function extend(tailChunk) {\n      if (!String(tailChunk)) return;\n      if (isString(tailChunk)) tailChunk = new continuous_tail_details(String(tailChunk));\n      var lastChunk = this.chunks[this.chunks.length - 1];\n      var extendLast = lastChunk && ( // if stops are same or tail has no stop\n      lastChunk.stop === tailChunk.stop || tailChunk.stop == null) && // if tail chunk goes just after last chunk\n      tailChunk.from === lastChunk.from + lastChunk.toString().length;\n\n      if (tailChunk instanceof continuous_tail_details) {\n        // check the ability to extend previous chunk\n        if (extendLast) {\n          // extend previous chunk\n          lastChunk.extend(tailChunk.toString());\n        } else {\n          // append new chunk\n          this.chunks.push(tailChunk);\n        }\n      } else if (tailChunk instanceof ChunksTailDetails) {\n        if (tailChunk.stop == null) {\n          // unwrap floating chunks to parent, keeping `from` pos\n          var firstTailChunk;\n\n          while (tailChunk.chunks.length && tailChunk.chunks[0].stop == null) {\n            firstTailChunk = tailChunk.chunks.shift();\n            firstTailChunk.from += tailChunk.from;\n            this.extend(firstTailChunk);\n          }\n        } // if tail chunk still has value\n\n\n        if (tailChunk.toString()) {\n          // if chunks contains stops, then popup stop to container\n          tailChunk.stop = tailChunk.blockIndex;\n          this.chunks.push(tailChunk);\n        }\n      }\n    }\n  }, {\n    key: "appendTo",\n    value: function appendTo(masked) {\n      // $FlowFixMe\n      if (!(masked instanceof holder.MaskedPattern)) {\n        var tail = new continuous_tail_details(this.toString());\n        return tail.appendTo(masked);\n      }\n\n      var details = new change_details();\n\n      for (var ci = 0; ci < this.chunks.length && !details.skip; ++ci) {\n        var chunk = this.chunks[ci];\n\n        var lastBlockIter = masked._mapPosToBlock(masked.value.length);\n\n        var stop = chunk.stop;\n        var chunkBlock = void 0;\n\n        if (stop != null && ( // if block not found or stop is behind lastBlock\n        !lastBlockIter || lastBlockIter.index <= stop)) {\n          if (chunk instanceof ChunksTailDetails || // for continuous block also check if stop is exist\n          masked._stops.indexOf(stop) >= 0) {\n            details.aggregate(masked._appendPlaceholder(stop));\n          }\n\n          chunkBlock = chunk instanceof ChunksTailDetails && masked._blocks[stop];\n        }\n\n        if (chunkBlock) {\n          var tailDetails = chunkBlock.appendTail(chunk);\n          tailDetails.skip = false; // always ignore skip, it will be set on last\n\n          details.aggregate(tailDetails);\n          masked._value += tailDetails.inserted; // get not inserted chars\n\n          var remainChars = chunk.toString().slice(tailDetails.rawInserted.length);\n          if (remainChars) details.aggregate(masked.append(remainChars, {\n            tail: true\n          }));\n        } else {\n          details.aggregate(masked.append(chunk.toString(), {\n            tail: true\n          }));\n        }\n      }\n\n      return details;\n    }\n  }, {\n    key: "shiftBefore",\n    value: function shiftBefore(pos) {\n      if (this.from >= pos || !this.chunks.length) return \'\';\n      var chunkShiftPos = pos - this.from;\n      var ci = 0;\n\n      while (ci < this.chunks.length) {\n        var chunk = this.chunks[ci];\n        var shiftChar = chunk.shiftBefore(chunkShiftPos);\n\n        if (chunk.toString()) {\n          // chunk still contains value\n          // but not shifted - means no more available chars to shift\n          if (!shiftChar) break;\n          ++ci;\n        } else {\n          // clean if chunk has no value\n          this.chunks.splice(ci, 1);\n        }\n\n        if (shiftChar) return shiftChar;\n      }\n\n      return \'\';\n    }\n  }, {\n    key: "state",\n    get: function get() {\n      return {\n        chunks: this.chunks.map(function (c) {\n          return c.state;\n        }),\n        from: this.from,\n        stop: this.stop,\n        blockIndex: this.blockIndex\n      };\n    },\n    set: function set(state) {\n      var chunks = state.chunks,\n          props = _objectWithoutProperties(state, ["chunks"]);\n\n      Object.assign(this, props);\n      this.chunks = chunks.map(function (cstate) {\n        var chunk = "chunks" in cstate ? new ChunksTailDetails() : new continuous_tail_details(); // $FlowFixMe already checked above\n\n        chunk.state = cstate;\n        return chunk;\n      });\n    }\n  }]);\n\n  return ChunksTailDetails;\n}();\n\n/* harmony default export */ var chunk_tail_details = (chunk_tail_details_ChunksTailDetails);\n// CONCATENATED MODULE: ./node_modules/imask/esm/masked/regexp.js\n\n\n\n\n\n\n/** Masking by RegExp */\n\nvar regexp_MaskedRegExp = /*#__PURE__*/function (_Masked) {\n  _inherits(MaskedRegExp, _Masked);\n\n  function MaskedRegExp() {\n    _classCallCheck(this, MaskedRegExp);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MaskedRegExp).apply(this, arguments));\n  }\n\n  _createClass(MaskedRegExp, [{\n    key: "_update",\n\n    /**\r\n      @override\r\n      @param {Object} opts\r\n    */\n    value: function _update(opts) {\n      if (opts.mask) opts.validate = function (value) {\n        return value.search(opts.mask) >= 0;\n      };\n\n      _get(_getPrototypeOf(MaskedRegExp.prototype), "_update", this).call(this, opts);\n    }\n  }]);\n\n  return MaskedRegExp;\n}(base);\n\nholder.MaskedRegExp = regexp_MaskedRegExp;\n/* harmony default export */ var masked_regexp = (regexp_MaskedRegExp);\n// CONCATENATED MODULE: ./node_modules/imask/esm/masked/pattern.js\n\n\n\n\n\n\n\n\n\n\n\n/**\r\n  Pattern mask\r\n  @param {Object} opts\r\n  @param {Object} opts.blocks\r\n  @param {Object} opts.definitions\r\n  @param {string} opts.placeholderChar\r\n  @param {boolean} opts.lazy\r\n*/\n\nvar pattern_MaskedPattern = /*#__PURE__*/function (_Masked) {\n  _inherits(MaskedPattern, _Masked);\n  /** */\n\n  /** */\n\n  /** Single char for empty input */\n\n  /** Show placeholder only when needed */\n\n\n  function MaskedPattern() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, MaskedPattern); // TODO type $Shape<MaskedPatternOptions>={} does not work\n\n\n    opts.definitions = Object.assign({}, DEFAULT_INPUT_DEFINITIONS, opts.definitions);\n    return _possibleConstructorReturn(this, _getPrototypeOf(MaskedPattern).call(this, Object.assign({}, MaskedPattern.DEFAULTS, {}, opts)));\n  }\n  /**\r\n    @override\r\n    @param {Object} opts\r\n  */\n\n\n  _createClass(MaskedPattern, [{\n    key: "_update",\n    value: function _update() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      opts.definitions = Object.assign({}, this.definitions, opts.definitions);\n\n      _get(_getPrototypeOf(MaskedPattern.prototype), "_update", this).call(this, opts);\n\n      this._rebuildMask();\n    }\n    /** */\n\n  }, {\n    key: "_rebuildMask",\n    value: function _rebuildMask() {\n      var _this = this;\n\n      var defs = this.definitions;\n      this._blocks = [];\n      this._stops = [];\n      this._maskedBlocks = {};\n      var pattern = this.mask;\n      if (!pattern || !defs) return;\n      var unmaskingBlock = false;\n      var optionalBlock = false;\n\n      for (var i = 0; i < pattern.length; ++i) {\n        if (this.blocks) {\n          var _ret = function () {\n            var p = pattern.slice(i);\n            var bNames = Object.keys(_this.blocks).filter(function (bName) {\n              return p.indexOf(bName) === 0;\n            }); // order by key length\n\n            bNames.sort(function (a, b) {\n              return b.length - a.length;\n            }); // use block name with max length\n\n            var bName = bNames[0];\n\n            if (bName) {\n              var maskedBlock = factory(Object.assign({\n                parent: _this,\n                lazy: _this.lazy,\n                placeholderChar: _this.placeholderChar,\n                overwrite: _this.overwrite\n              }, _this.blocks[bName]));\n\n              if (maskedBlock) {\n                _this._blocks.push(maskedBlock); // store block index\n\n\n                if (!_this._maskedBlocks[bName]) _this._maskedBlocks[bName] = [];\n\n                _this._maskedBlocks[bName].push(_this._blocks.length - 1);\n              }\n\n              i += bName.length - 1;\n              return "continue";\n            }\n          }();\n\n          if (_ret === "continue") continue;\n        }\n\n        var char = pattern[i];\n\n        var _isInput = (char in defs);\n\n        if (char === MaskedPattern.STOP_CHAR) {\n          this._stops.push(this._blocks.length);\n\n          continue;\n        }\n\n        if (char === \'{\' || char === \'}\') {\n          unmaskingBlock = !unmaskingBlock;\n          continue;\n        }\n\n        if (char === \'[\' || char === \']\') {\n          optionalBlock = !optionalBlock;\n          continue;\n        }\n\n        if (char === MaskedPattern.ESCAPE_CHAR) {\n          ++i;\n          char = pattern[i];\n          if (!char) break;\n          _isInput = false;\n        }\n\n        var def = _isInput ? new input_definition({\n          parent: this,\n          lazy: this.lazy,\n          placeholderChar: this.placeholderChar,\n          mask: defs[char],\n          isOptional: optionalBlock\n        }) : new fixed_definition({\n          char: char,\n          isUnmasking: unmaskingBlock\n        });\n\n        this._blocks.push(def);\n      }\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "reset",\n\n    /**\r\n      @override\r\n    */\n    value: function reset() {\n      _get(_getPrototypeOf(MaskedPattern.prototype), "reset", this).call(this);\n\n      this._blocks.forEach(function (b) {\n        return b.reset();\n      });\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "doCommit",\n\n    /**\r\n      @override\r\n    */\n    value: function doCommit() {\n      this._blocks.forEach(function (b) {\n        return b.doCommit();\n      });\n\n      _get(_getPrototypeOf(MaskedPattern.prototype), "doCommit", this).call(this);\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "appendTail",\n\n    /**\r\n      @override\r\n    */\n    value: function appendTail(tail) {\n      return _get(_getPrototypeOf(MaskedPattern.prototype), "appendTail", this).call(this, tail).aggregate(this._appendPlaceholder());\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "_appendCharRaw",\n    value: function _appendCharRaw(ch) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      ch = this.doPrepare(ch, flags);\n\n      var blockIter = this._mapPosToBlock(this.value.length);\n\n      var details = new change_details();\n      if (!blockIter) return details;\n\n      for (var bi = blockIter.index;; ++bi) {\n        var _block = this._blocks[bi];\n        if (!_block) break;\n\n        var blockDetails = _block._appendChar(ch, flags);\n\n        var skip = blockDetails.skip;\n        details.aggregate(blockDetails);\n        if (skip || blockDetails.rawInserted) break; // go next char\n      }\n\n      return details;\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "extractTail",\n    value: function extractTail() {\n      var _this2 = this;\n\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n      var chunkTail = new chunk_tail_details();\n      if (fromPos === toPos) return chunkTail;\n\n      this._forEachBlocksInRange(fromPos, toPos, function (b, bi, bFromPos, bToPos) {\n        var blockChunk = b.extractTail(bFromPos, bToPos);\n        blockChunk.stop = _this2._findStopBefore(bi);\n        blockChunk.from = _this2._blockStartPos(bi);\n        if (blockChunk instanceof chunk_tail_details) blockChunk.blockIndex = bi;\n        chunkTail.extend(blockChunk);\n      });\n\n      return chunkTail;\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "extractInput",\n    value: function extractInput() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n      var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      if (fromPos === toPos) return \'\';\n      var input = \'\';\n\n      this._forEachBlocksInRange(fromPos, toPos, function (b, _, fromPos, toPos) {\n        input += b.extractInput(fromPos, toPos, flags);\n      });\n\n      return input;\n    }\n  }, {\n    key: "_findStopBefore",\n    value: function _findStopBefore(blockIndex) {\n      var stopBefore;\n\n      for (var si = 0; si < this._stops.length; ++si) {\n        var stop = this._stops[si];\n        if (stop <= blockIndex) stopBefore = stop;else break;\n      }\n\n      return stopBefore;\n    }\n    /** Appends placeholder depending on laziness */\n\n  }, {\n    key: "_appendPlaceholder",\n    value: function _appendPlaceholder(toBlockIndex) {\n      var _this3 = this;\n\n      var details = new change_details();\n      if (this.lazy && toBlockIndex == null) return details;\n\n      var startBlockIter = this._mapPosToBlock(this.value.length);\n\n      if (!startBlockIter) return details;\n      var startBlockIndex = startBlockIter.index;\n      var endBlockIndex = toBlockIndex != null ? toBlockIndex : this._blocks.length;\n\n      this._blocks.slice(startBlockIndex, endBlockIndex).forEach(function (b) {\n        if (!b.lazy || toBlockIndex != null) {\n          // $FlowFixMe `_blocks` may not be present\n          var args = b._blocks != null ? [b._blocks.length] : [];\n\n          var bDetails = b._appendPlaceholder.apply(b, args);\n\n          _this3._value += bDetails.inserted;\n          details.aggregate(bDetails);\n        }\n      });\n\n      return details;\n    }\n    /** Finds block in pos */\n\n  }, {\n    key: "_mapPosToBlock",\n    value: function _mapPosToBlock(pos) {\n      var accVal = \'\';\n\n      for (var bi = 0; bi < this._blocks.length; ++bi) {\n        var _block2 = this._blocks[bi];\n        var blockStartPos = accVal.length;\n        accVal += _block2.value;\n\n        if (pos <= accVal.length) {\n          return {\n            index: bi,\n            offset: pos - blockStartPos\n          };\n        }\n      }\n    }\n    /** */\n\n  }, {\n    key: "_blockStartPos",\n    value: function _blockStartPos(blockIndex) {\n      return this._blocks.slice(0, blockIndex).reduce(function (pos, b) {\n        return pos += b.value.length;\n      }, 0);\n    }\n    /** */\n\n  }, {\n    key: "_forEachBlocksInRange",\n    value: function _forEachBlocksInRange(fromPos) {\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n      var fn = arguments.length > 2 ? arguments[2] : undefined;\n\n      var fromBlockIter = this._mapPosToBlock(fromPos);\n\n      if (fromBlockIter) {\n        var toBlockIter = this._mapPosToBlock(toPos); // process first block\n\n\n        var isSameBlock = toBlockIter && fromBlockIter.index === toBlockIter.index;\n        var fromBlockStartPos = fromBlockIter.offset;\n        var fromBlockEndPos = toBlockIter && isSameBlock ? toBlockIter.offset : this._blocks[fromBlockIter.index].value.length;\n        fn(this._blocks[fromBlockIter.index], fromBlockIter.index, fromBlockStartPos, fromBlockEndPos);\n\n        if (toBlockIter && !isSameBlock) {\n          // process intermediate blocks\n          for (var bi = fromBlockIter.index + 1; bi < toBlockIter.index; ++bi) {\n            fn(this._blocks[bi], bi, 0, this._blocks[bi].value.length);\n          } // process last block\n\n\n          fn(this._blocks[toBlockIter.index], toBlockIter.index, 0, toBlockIter.offset);\n        }\n      }\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "remove",\n    value: function remove() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n\n      var removeDetails = _get(_getPrototypeOf(MaskedPattern.prototype), "remove", this).call(this, fromPos, toPos);\n\n      this._forEachBlocksInRange(fromPos, toPos, function (b, _, bFromPos, bToPos) {\n        removeDetails.aggregate(b.remove(bFromPos, bToPos));\n      });\n\n      return removeDetails;\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "nearestInputPos",\n    value: function nearestInputPos(cursorPos) {\n      var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DIRECTION.NONE; // TODO refactor - extract alignblock\n\n      var beginBlockData = this._mapPosToBlock(cursorPos) || {\n        index: 0,\n        offset: 0\n      };\n      var beginBlockOffset = beginBlockData.offset,\n          beginBlockIndex = beginBlockData.index;\n      var beginBlock = this._blocks[beginBlockIndex];\n      if (!beginBlock) return cursorPos;\n      var beginBlockCursorPos = beginBlockOffset; // if position inside block - try to adjust it\n\n      if (beginBlockCursorPos !== 0 && beginBlockCursorPos < beginBlock.value.length) {\n        beginBlockCursorPos = beginBlock.nearestInputPos(beginBlockOffset, forceDirection(direction));\n      }\n\n      var cursorAtRight = beginBlockCursorPos === beginBlock.value.length;\n      var cursorAtLeft = beginBlockCursorPos === 0; //  cursor is INSIDE first block (not at bounds)\n\n      if (!cursorAtLeft && !cursorAtRight) return this._blockStartPos(beginBlockIndex) + beginBlockCursorPos;\n      var searchBlockIndex = cursorAtRight ? beginBlockIndex + 1 : beginBlockIndex;\n\n      if (direction === DIRECTION.NONE) {\n        // NONE direction used to calculate start input position if no chars were removed\n        // FOR NONE:\n        // -\n        // input|any\n        // ->\n        //  any|input\n        // <-\n        //  filled-input|any\n        // check if first block at left is input\n        if (searchBlockIndex > 0) {\n          var blockIndexAtLeft = searchBlockIndex - 1;\n          var blockAtLeft = this._blocks[blockIndexAtLeft];\n          var blockInputPos = blockAtLeft.nearestInputPos(0, DIRECTION.NONE); // is input\n\n          if (!blockAtLeft.value.length || blockInputPos !== blockAtLeft.value.length) {\n            return this._blockStartPos(searchBlockIndex);\n          }\n        } // ->\n\n\n        var firstInputAtRight = searchBlockIndex;\n\n        for (var bi = firstInputAtRight; bi < this._blocks.length; ++bi) {\n          var blockAtRight = this._blocks[bi];\n\n          var _blockInputPos = blockAtRight.nearestInputPos(0, DIRECTION.NONE);\n\n          if (!blockAtRight.value.length || _blockInputPos !== blockAtRight.value.length) {\n            return this._blockStartPos(bi) + _blockInputPos;\n          }\n        } // <-\n        // find first non-fixed symbol\n\n\n        for (var _bi = searchBlockIndex - 1; _bi >= 0; --_bi) {\n          var _block3 = this._blocks[_bi];\n\n          var _blockInputPos2 = _block3.nearestInputPos(0, DIRECTION.NONE); // is input\n\n\n          if (!_block3.value.length || _blockInputPos2 !== _block3.value.length) {\n            return this._blockStartPos(_bi) + _block3.value.length;\n          }\n        }\n\n        return cursorPos;\n      }\n\n      if (direction === DIRECTION.LEFT || direction === DIRECTION.FORCE_LEFT) {\n        // -\n        //  any|filled-input\n        // <-\n        //  any|first not empty is not-len-aligned\n        //  not-0-aligned|any\n        // ->\n        //  any|not-len-aligned or end\n        // check if first block at right is filled input\n        var firstFilledBlockIndexAtRight;\n\n        for (var _bi2 = searchBlockIndex; _bi2 < this._blocks.length; ++_bi2) {\n          if (this._blocks[_bi2].value) {\n            firstFilledBlockIndexAtRight = _bi2;\n            break;\n          }\n        }\n\n        if (firstFilledBlockIndexAtRight != null) {\n          var filledBlock = this._blocks[firstFilledBlockIndexAtRight];\n\n          var _blockInputPos3 = filledBlock.nearestInputPos(0, DIRECTION.RIGHT);\n\n          if (_blockInputPos3 === 0 && filledBlock.unmaskedValue.length) {\n            // filled block is input\n            return this._blockStartPos(firstFilledBlockIndexAtRight) + _blockInputPos3;\n          }\n        } // <-\n        // find this vars\n\n\n        var firstFilledInputBlockIndex = -1;\n        var firstEmptyInputBlockIndex; // TODO consider nested empty inputs\n\n        for (var _bi3 = searchBlockIndex - 1; _bi3 >= 0; --_bi3) {\n          var _block4 = this._blocks[_bi3];\n\n          var _blockInputPos4 = _block4.nearestInputPos(_block4.value.length, DIRECTION.FORCE_LEFT);\n\n          if (!_block4.value || _blockInputPos4 !== 0) firstEmptyInputBlockIndex = _bi3;\n\n          if (_blockInputPos4 !== 0) {\n            if (_blockInputPos4 !== _block4.value.length) {\n              // aligned inside block - return immediately\n              return this._blockStartPos(_bi3) + _blockInputPos4;\n            } else {\n              // found filled\n              firstFilledInputBlockIndex = _bi3;\n              break;\n            }\n          }\n        }\n\n        if (direction === DIRECTION.LEFT) {\n          // try find first empty input before start searching position only when not forced\n          for (var _bi4 = firstFilledInputBlockIndex + 1; _bi4 <= Math.min(searchBlockIndex, this._blocks.length - 1); ++_bi4) {\n            var _block5 = this._blocks[_bi4];\n\n            var _blockInputPos5 = _block5.nearestInputPos(0, DIRECTION.NONE);\n\n            var blockAlignedPos = this._blockStartPos(_bi4) + _blockInputPos5;\n\n            if (blockAlignedPos > cursorPos) break; // if block is not lazy input\n\n            if (_blockInputPos5 !== _block5.value.length) return blockAlignedPos;\n          }\n        } // process overflow\n\n\n        if (firstFilledInputBlockIndex >= 0) {\n          return this._blockStartPos(firstFilledInputBlockIndex) + this._blocks[firstFilledInputBlockIndex].value.length;\n        } // for lazy if has aligned left inside fixed and has came to the start - use start position\n\n\n        if (direction === DIRECTION.FORCE_LEFT || this.lazy && !this.extractInput() && !isInput(this._blocks[searchBlockIndex])) {\n          return 0;\n        }\n\n        if (firstEmptyInputBlockIndex != null) {\n          return this._blockStartPos(firstEmptyInputBlockIndex);\n        } // find first input\n\n\n        for (var _bi5 = searchBlockIndex; _bi5 < this._blocks.length; ++_bi5) {\n          var _block6 = this._blocks[_bi5];\n\n          var _blockInputPos6 = _block6.nearestInputPos(0, DIRECTION.NONE); // is input\n\n\n          if (!_block6.value.length || _blockInputPos6 !== _block6.value.length) {\n            return this._blockStartPos(_bi5) + _blockInputPos6;\n          }\n        }\n\n        return 0;\n      }\n\n      if (direction === DIRECTION.RIGHT || direction === DIRECTION.FORCE_RIGHT) {\n        // ->\n        //  any|not-len-aligned and filled\n        //  any|not-len-aligned\n        // <-\n        //  not-0-aligned or start|any\n        var firstInputBlockAlignedIndex;\n        var firstInputBlockAlignedPos;\n\n        for (var _bi6 = searchBlockIndex; _bi6 < this._blocks.length; ++_bi6) {\n          var _block7 = this._blocks[_bi6];\n\n          var _blockInputPos7 = _block7.nearestInputPos(0, DIRECTION.NONE);\n\n          if (_blockInputPos7 !== _block7.value.length) {\n            firstInputBlockAlignedPos = this._blockStartPos(_bi6) + _blockInputPos7;\n            firstInputBlockAlignedIndex = _bi6;\n            break;\n          }\n        }\n\n        if (firstInputBlockAlignedIndex != null && firstInputBlockAlignedPos != null) {\n          for (var _bi7 = firstInputBlockAlignedIndex; _bi7 < this._blocks.length; ++_bi7) {\n            var _block8 = this._blocks[_bi7];\n\n            var _blockInputPos8 = _block8.nearestInputPos(0, DIRECTION.FORCE_RIGHT);\n\n            if (_blockInputPos8 !== _block8.value.length) {\n              return this._blockStartPos(_bi7) + _blockInputPos8;\n            }\n          }\n\n          return direction === DIRECTION.FORCE_RIGHT ? this.value.length : firstInputBlockAlignedPos;\n        }\n\n        for (var _bi8 = Math.min(searchBlockIndex, this._blocks.length - 1); _bi8 >= 0; --_bi8) {\n          var _block9 = this._blocks[_bi8];\n\n          var _blockInputPos9 = _block9.nearestInputPos(_block9.value.length, DIRECTION.LEFT);\n\n          if (_blockInputPos9 !== 0) {\n            var alignedPos = this._blockStartPos(_bi8) + _blockInputPos9;\n\n            if (alignedPos >= cursorPos) return alignedPos;\n            break;\n          }\n        }\n      }\n\n      return cursorPos;\n    }\n    /** Get block by name */\n\n  }, {\n    key: "maskedBlock",\n    value: function maskedBlock(name) {\n      return this.maskedBlocks(name)[0];\n    }\n    /** Get all blocks by name */\n\n  }, {\n    key: "maskedBlocks",\n    value: function maskedBlocks(name) {\n      var _this4 = this;\n\n      var indices = this._maskedBlocks[name];\n      if (!indices) return [];\n      return indices.map(function (gi) {\n        return _this4._blocks[gi];\n      });\n    }\n  }, {\n    key: "state",\n    get: function get() {\n      return Object.assign({}, _get(_getPrototypeOf(MaskedPattern.prototype), "state", this), {\n        _blocks: this._blocks.map(function (b) {\n          return b.state;\n        })\n      });\n    },\n    set: function set(state) {\n      var _blocks = state._blocks,\n          maskedState = _objectWithoutProperties(state, ["_blocks"]);\n\n      this._blocks.forEach(function (b, bi) {\n        return b.state = _blocks[bi];\n      });\n\n      _set(_getPrototypeOf(MaskedPattern.prototype), "state", maskedState, this, true);\n    }\n  }, {\n    key: "isComplete",\n    get: function get() {\n      return this._blocks.every(function (b) {\n        return b.isComplete;\n      });\n    }\n  }, {\n    key: "unmaskedValue",\n    get: function get() {\n      return this._blocks.reduce(function (str, b) {\n        return str += b.unmaskedValue;\n      }, \'\');\n    },\n    set: function set(unmaskedValue) {\n      _set(_getPrototypeOf(MaskedPattern.prototype), "unmaskedValue", unmaskedValue, this, true);\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "value",\n    get: function get() {\n      // TODO return _value when not in change?\n      return this._blocks.reduce(function (str, b) {\n        return str += b.value;\n      }, \'\');\n    },\n    set: function set(value) {\n      _set(_getPrototypeOf(MaskedPattern.prototype), "value", value, this, true);\n    }\n  }]);\n\n  return MaskedPattern;\n}(base);\n\npattern_MaskedPattern.DEFAULTS = {\n  lazy: true,\n  placeholderChar: \'_\'\n};\npattern_MaskedPattern.STOP_CHAR = \'`\';\npattern_MaskedPattern.ESCAPE_CHAR = \'\\\\\';\npattern_MaskedPattern.InputDefinition = input_definition;\npattern_MaskedPattern.FixedDefinition = fixed_definition;\n\nfunction isInput(block) {\n  if (!block) return false;\n  var value = block.value;\n  return !value || block.nearestInputPos(0, DIRECTION.NONE) !== value.length;\n}\n\nholder.MaskedPattern = pattern_MaskedPattern;\n/* harmony default export */ var masked_pattern = (pattern_MaskedPattern);\n// CONCATENATED MODULE: ./node_modules/imask/esm/masked/range.js\n\n\n\n\n\n\n\n\n\n\n\n\n/** Pattern which accepts ranges */\n\nvar range_MaskedRange = /*#__PURE__*/function (_MaskedPattern) {\n  _inherits(MaskedRange, _MaskedPattern);\n\n  function MaskedRange() {\n    _classCallCheck(this, MaskedRange);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MaskedRange).apply(this, arguments));\n  }\n\n  _createClass(MaskedRange, [{\n    key: "_update",\n\n    /**\r\n      @override\r\n    */\n    value: function _update(opts) {\n      // TODO type\n      opts = Object.assign({\n        to: this.to || 0,\n        from: this.from || 0\n      }, opts);\n      var maxLength = String(opts.to).length;\n      if (opts.maxLength != null) maxLength = Math.max(maxLength, opts.maxLength);\n      opts.maxLength = maxLength;\n      var fromStr = String(opts.from).padStart(maxLength, \'0\');\n      var toStr = String(opts.to).padStart(maxLength, \'0\');\n      var sameCharsCount = 0;\n\n      while (sameCharsCount < toStr.length && toStr[sameCharsCount] === fromStr[sameCharsCount]) {\n        ++sameCharsCount;\n      }\n\n      opts.mask = toStr.slice(0, sameCharsCount).replace(/0/g, \'\\\\0\') + \'0\'.repeat(maxLength - sameCharsCount);\n\n      _get(_getPrototypeOf(MaskedRange.prototype), "_update", this).call(this, opts);\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "boundaries",\n    value: function boundaries(str) {\n      var minstr = \'\';\n      var maxstr = \'\';\n\n      var _ref = str.match(/^(\\D*)(\\d*)(\\D*)/) || [],\n          _ref2 = _slicedToArray(_ref, 3),\n          placeholder = _ref2[1],\n          num = _ref2[2];\n\n      if (num) {\n        minstr = \'0\'.repeat(placeholder.length) + num;\n        maxstr = \'9\'.repeat(placeholder.length) + num;\n      }\n\n      minstr = minstr.padEnd(this.maxLength, \'0\');\n      maxstr = maxstr.padEnd(this.maxLength, \'9\');\n      return [minstr, maxstr];\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "doPrepare",\n    value: function doPrepare(str) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      str = _get(_getPrototypeOf(MaskedRange.prototype), "doPrepare", this).call(this, str, flags).replace(/\\D/g, \'\');\n      if (!this.autofix) return str;\n      var fromStr = String(this.from).padStart(this.maxLength, \'0\');\n      var toStr = String(this.to).padStart(this.maxLength, \'0\');\n      var val = this.value;\n      var prepStr = \'\';\n\n      for (var ci = 0; ci < str.length; ++ci) {\n        var nextVal = val + prepStr + str[ci];\n\n        var _this$boundaries = this.boundaries(nextVal),\n            _this$boundaries2 = _slicedToArray(_this$boundaries, 2),\n            minstr = _this$boundaries2[0],\n            maxstr = _this$boundaries2[1];\n\n        if (Number(maxstr) < this.from) prepStr += fromStr[nextVal.length - 1];else if (Number(minstr) > this.to) prepStr += toStr[nextVal.length - 1];else prepStr += str[ci];\n      }\n\n      return prepStr;\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "doValidate",\n    value: function doValidate() {\n      var _get2;\n\n      var str = this.value;\n      var firstNonZero = str.search(/[^0]/);\n      if (firstNonZero === -1 && str.length <= this._matchFrom) return true;\n\n      var _this$boundaries3 = this.boundaries(str),\n          _this$boundaries4 = _slicedToArray(_this$boundaries3, 2),\n          minstr = _this$boundaries4[0],\n          maxstr = _this$boundaries4[1];\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return this.from <= Number(maxstr) && Number(minstr) <= this.to && (_get2 = _get(_getPrototypeOf(MaskedRange.prototype), "doValidate", this)).call.apply(_get2, [this].concat(args));\n    }\n  }, {\n    key: "_matchFrom",\n\n    /**\r\n      Optionally sets max length of pattern.\r\n      Used when pattern length is longer then `to` param length. Pads zeros at start in this case.\r\n    */\n\n    /** Min bound */\n\n    /** Max bound */\n\n    /** */\n    get: function get() {\n      return this.maxLength - String(this.from).length;\n    }\n  }, {\n    key: "isComplete",\n    get: function get() {\n      return _get(_getPrototypeOf(MaskedRange.prototype), "isComplete", this) && Boolean(this.value);\n    }\n  }]);\n\n  return MaskedRange;\n}(masked_pattern);\n\nholder.MaskedRange = range_MaskedRange;\n/* harmony default export */ var range = (range_MaskedRange);\n// CONCATENATED MODULE: ./node_modules/imask/esm/masked/date.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n/** Date mask */\n\nvar date_MaskedDate = /*#__PURE__*/function (_MaskedPattern) {\n  _inherits(MaskedDate, _MaskedPattern);\n  /** Pattern mask for date according to {@link MaskedDate#format} */\n\n  /** Start date */\n\n  /** End date */\n\n  /** */\n\n  /**\r\n    @param {Object} opts\r\n  */\n\n\n  function MaskedDate(opts) {\n    _classCallCheck(this, MaskedDate);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MaskedDate).call(this, Object.assign({}, MaskedDate.DEFAULTS, {}, opts)));\n  }\n  /**\r\n    @override\r\n  */\n\n\n  _createClass(MaskedDate, [{\n    key: "_update",\n    value: function _update(opts) {\n      if (opts.mask === Date) delete opts.mask;\n      if (opts.pattern) opts.mask = opts.pattern;\n      var blocks = opts.blocks;\n      opts.blocks = Object.assign({}, MaskedDate.GET_DEFAULT_BLOCKS()); // adjust year block\n\n      if (opts.min) opts.blocks.Y.from = opts.min.getFullYear();\n      if (opts.max) opts.blocks.Y.to = opts.max.getFullYear();\n\n      if (opts.min && opts.max && opts.blocks.Y.from === opts.blocks.Y.to) {\n        opts.blocks.m.from = opts.min.getMonth() + 1;\n        opts.blocks.m.to = opts.max.getMonth() + 1;\n\n        if (opts.blocks.m.from === opts.blocks.m.to) {\n          opts.blocks.d.from = opts.min.getDate();\n          opts.blocks.d.to = opts.max.getDate();\n        }\n      }\n\n      Object.assign(opts.blocks, blocks); // add autofix\n\n      Object.keys(opts.blocks).forEach(function (bk) {\n        var b = opts.blocks[bk];\n        if (!(\'autofix\' in b)) b.autofix = opts.autofix;\n      });\n\n      _get(_getPrototypeOf(MaskedDate.prototype), "_update", this).call(this, opts);\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "doValidate",\n    value: function doValidate() {\n      var _get2;\n\n      var date = this.date;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return (_get2 = _get(_getPrototypeOf(MaskedDate.prototype), "doValidate", this)).call.apply(_get2, [this].concat(args)) && (!this.isComplete || this.isDateExist(this.value) && date != null && (this.min == null || this.min <= date) && (this.max == null || date <= this.max));\n    }\n    /** Checks if date is exists */\n\n  }, {\n    key: "isDateExist",\n    value: function isDateExist(str) {\n      return this.format(this.parse(str, this), this).indexOf(str) >= 0;\n    }\n    /** Parsed Date */\n\n  }, {\n    key: "date",\n    get: function get() {\n      return this.typedValue;\n    },\n    set: function set(date) {\n      this.typedValue = date;\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "typedValue",\n    get: function get() {\n      return this.isComplete ? _get(_getPrototypeOf(MaskedDate.prototype), "typedValue", this) : null;\n    },\n    set: function set(value) {\n      _set(_getPrototypeOf(MaskedDate.prototype), "typedValue", value, this, true);\n    }\n  }]);\n\n  return MaskedDate;\n}(masked_pattern);\n\ndate_MaskedDate.DEFAULTS = {\n  pattern: \'d{.}`m{.}`Y\',\n  format: function format(date) {\n    var day = String(date.getDate()).padStart(2, \'0\');\n    var month = String(date.getMonth() + 1).padStart(2, \'0\');\n    var year = date.getFullYear();\n    return [day, month, year].join(\'.\');\n  },\n  parse: function parse(str) {\n    var _str$split = str.split(\'.\'),\n        _str$split2 = _slicedToArray(_str$split, 3),\n        day = _str$split2[0],\n        month = _str$split2[1],\n        year = _str$split2[2];\n\n    return new Date(year, month - 1, day);\n  }\n};\n\ndate_MaskedDate.GET_DEFAULT_BLOCKS = function () {\n  return {\n    d: {\n      mask: range,\n      from: 1,\n      to: 31,\n      maxLength: 2\n    },\n    m: {\n      mask: range,\n      from: 1,\n      to: 12,\n      maxLength: 2\n    },\n    Y: {\n      mask: range,\n      from: 1900,\n      to: 9999\n    }\n  };\n};\n\nholder.MaskedDate = date_MaskedDate;\n/* harmony default export */ var masked_date = (date_MaskedDate);\n// CONCATENATED MODULE: ./node_modules/imask/esm/controls/mask-element.js\n\n\n/**\r\n  Generic element API to use with mask\r\n  @interface\r\n*/\n\nvar mask_element_MaskElement = /*#__PURE__*/function () {\n  function MaskElement() {\n    _classCallCheck(this, MaskElement);\n  }\n\n  _createClass(MaskElement, [{\n    key: "select",\n\n    /** Safely sets element selection */\n    value: function select(start, end) {\n      if (start == null || end == null || start === this.selectionStart && end === this.selectionEnd) return;\n\n      try {\n        this._unsafeSelect(start, end);\n      } catch (e) {}\n    }\n    /** Should be overriden in subclasses */\n\n  }, {\n    key: "_unsafeSelect",\n    value: function _unsafeSelect(start, end) {}\n    /** Should be overriden in subclasses */\n\n  }, {\n    key: "bindEvents",\n\n    /** Should be overriden in subclasses */\n    value: function bindEvents(handlers) {}\n    /** Should be overriden in subclasses */\n\n  }, {\n    key: "unbindEvents",\n    value: function unbindEvents() {}\n  }, {\n    key: "selectionStart",\n\n    /** */\n\n    /** */\n\n    /** */\n\n    /** Safely returns selection start */\n    get: function get() {\n      var start;\n\n      try {\n        start = this._unsafeSelectionStart;\n      } catch (e) {}\n\n      return start != null ? start : this.value.length;\n    }\n    /** Safely returns selection end */\n\n  }, {\n    key: "selectionEnd",\n    get: function get() {\n      var end;\n\n      try {\n        end = this._unsafeSelectionEnd;\n      } catch (e) {}\n\n      return end != null ? end : this.value.length;\n    }\n  }, {\n    key: "isActive",\n    get: function get() {\n      return false;\n    }\n  }]);\n\n  return MaskElement;\n}();\n\nholder.MaskElement = mask_element_MaskElement;\n/* harmony default export */ var mask_element = (mask_element_MaskElement);\n// CONCATENATED MODULE: ./node_modules/imask/esm/controls/html-mask-element.js\n\n\n\n/** Bridge between HTMLElement and {@link Masked} */\n\nvar html_mask_element_HTMLMaskElement = /*#__PURE__*/function (_MaskElement) {\n  _inherits(HTMLMaskElement, _MaskElement);\n  /** Mapping between HTMLElement events and mask internal events */\n\n  /** HTMLElement to use mask on */\n\n  /**\r\n    @param {HTMLInputElement|HTMLTextAreaElement} input\r\n  */\n\n\n  function HTMLMaskElement(input) {\n    var _this;\n\n    _classCallCheck(this, HTMLMaskElement);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HTMLMaskElement).call(this));\n    _this.input = input;\n    _this._handlers = {};\n    return _this;\n  }\n  /** */\n  // $FlowFixMe https://github.com/facebook/flow/issues/2839\n\n\n  _createClass(HTMLMaskElement, [{\n    key: "_unsafeSelect",\n\n    /**\r\n      Sets HTMLElement selection\r\n      @override\r\n    */\n    value: function _unsafeSelect(start, end) {\n      this.input.setSelectionRange(start, end);\n    }\n    /**\r\n      HTMLElement value\r\n      @override\r\n    */\n\n  }, {\n    key: "bindEvents",\n\n    /**\r\n      Binds HTMLElement events to mask internal events\r\n      @override\r\n    */\n    value: function bindEvents(handlers) {\n      var _this2 = this;\n\n      Object.keys(handlers).forEach(function (event) {\n        return _this2._toggleEventHandler(HTMLMaskElement.EVENTS_MAP[event], handlers[event]);\n      });\n    }\n    /**\r\n      Unbinds HTMLElement events to mask internal events\r\n      @override\r\n    */\n\n  }, {\n    key: "unbindEvents",\n    value: function unbindEvents() {\n      var _this3 = this;\n\n      Object.keys(this._handlers).forEach(function (event) {\n        return _this3._toggleEventHandler(event);\n      });\n    }\n    /** */\n\n  }, {\n    key: "_toggleEventHandler",\n    value: function _toggleEventHandler(event, handler) {\n      if (this._handlers[event]) {\n        this.input.removeEventListener(event, this._handlers[event]);\n        delete this._handlers[event];\n      }\n\n      if (handler) {\n        this.input.addEventListener(event, handler);\n        this._handlers[event] = handler;\n      }\n    }\n  }, {\n    key: "rootElement",\n    get: function get() {\n      return this.input.getRootNode ? this.input.getRootNode() : document;\n    }\n    /**\r\n      Is element in focus\r\n      @readonly\r\n    */\n\n  }, {\n    key: "isActive",\n    get: function get() {\n      //$FlowFixMe\n      return this.input === this.rootElement.activeElement;\n    }\n    /**\r\n      Returns HTMLElement selection start\r\n      @override\r\n    */\n\n  }, {\n    key: "_unsafeSelectionStart",\n    get: function get() {\n      return this.input.selectionStart;\n    }\n    /**\r\n      Returns HTMLElement selection end\r\n      @override\r\n    */\n\n  }, {\n    key: "_unsafeSelectionEnd",\n    get: function get() {\n      return this.input.selectionEnd;\n    }\n  }, {\n    key: "value",\n    get: function get() {\n      return this.input.value;\n    },\n    set: function set(value) {\n      this.input.value = value;\n    }\n  }]);\n\n  return HTMLMaskElement;\n}(mask_element);\n\nhtml_mask_element_HTMLMaskElement.EVENTS_MAP = {\n  selectionChange: \'keydown\',\n  input: \'input\',\n  drop: \'drop\',\n  click: \'click\',\n  focus: \'focus\',\n  commit: \'blur\'\n};\nholder.HTMLMaskElement = html_mask_element_HTMLMaskElement;\n/* harmony default export */ var html_mask_element = (html_mask_element_HTMLMaskElement);\n// CONCATENATED MODULE: ./node_modules/imask/esm/controls/html-contenteditable-mask-element.js\n\n\n\n\n\nvar html_contenteditable_mask_element_HTMLContenteditableMaskElement = /*#__PURE__*/function (_HTMLMaskElement) {\n  _inherits(HTMLContenteditableMaskElement, _HTMLMaskElement);\n\n  function HTMLContenteditableMaskElement() {\n    _classCallCheck(this, HTMLContenteditableMaskElement);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(HTMLContenteditableMaskElement).apply(this, arguments));\n  }\n\n  _createClass(HTMLContenteditableMaskElement, [{\n    key: "_unsafeSelect",\n\n    /**\r\n      Sets HTMLElement selection\r\n      @override\r\n    */\n    value: function _unsafeSelect(start, end) {\n      if (!this.rootElement.createRange) return;\n      var range = this.rootElement.createRange();\n      range.setStart(this.input.firstChild || this.input, start);\n      range.setEnd(this.input.lastChild || this.input, end);\n      var root = this.rootElement;\n      var selection = root.getSelection && root.getSelection();\n\n      if (selection) {\n        selection.removeAllRanges();\n        selection.addRange(range);\n      }\n    }\n    /**\r\n      HTMLElement value\r\n      @override\r\n    */\n\n  }, {\n    key: "_unsafeSelectionStart",\n\n    /**\r\n      Returns HTMLElement selection start\r\n      @override\r\n    */\n    get: function get() {\n      var root = this.rootElement;\n      var selection = root.getSelection && root.getSelection();\n      return selection && selection.anchorOffset;\n    }\n    /**\r\n      Returns HTMLElement selection end\r\n      @override\r\n    */\n\n  }, {\n    key: "_unsafeSelectionEnd",\n    get: function get() {\n      var root = this.rootElement;\n      var selection = root.getSelection && root.getSelection();\n      return selection && this._unsafeSelectionStart + String(selection).length;\n    }\n  }, {\n    key: "value",\n    get: function get() {\n      // $FlowFixMe\n      return this.input.textContent;\n    },\n    set: function set(value) {\n      this.input.textContent = value;\n    }\n  }]);\n\n  return HTMLContenteditableMaskElement;\n}(html_mask_element);\n\nholder.HTMLContenteditableMaskElement = html_contenteditable_mask_element_HTMLContenteditableMaskElement;\n/* harmony default export */ var html_contenteditable_mask_element = (html_contenteditable_mask_element_HTMLContenteditableMaskElement);\n// CONCATENATED MODULE: ./node_modules/imask/esm/controls/input.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/** Listens to element events and controls changes between element and {@link Masked} */\n\nvar input_InputMask = /*#__PURE__*/function () {\n  /**\r\n    View element\r\n    @readonly\r\n  */\n\n  /**\r\n    Internal {@link Masked} model\r\n    @readonly\r\n  */\n\n  /**\r\n    @param {MaskElement|HTMLInputElement|HTMLTextAreaElement} el\r\n    @param {Object} opts\r\n  */\n  function InputMask(el, opts) {\n    _classCallCheck(this, InputMask);\n\n    this.el = el instanceof mask_element ? el : el.isContentEditable && el.tagName !== \'INPUT\' && el.tagName !== \'TEXTAREA\' ? new html_contenteditable_mask_element(el) : new html_mask_element(el);\n    this.masked = factory(opts);\n    this._listeners = {};\n    this._value = \'\';\n    this._unmaskedValue = \'\';\n    this._saveSelection = this._saveSelection.bind(this);\n    this._onInput = this._onInput.bind(this);\n    this._onChange = this._onChange.bind(this);\n    this._onDrop = this._onDrop.bind(this);\n    this._onFocus = this._onFocus.bind(this);\n    this._onClick = this._onClick.bind(this);\n    this.alignCursor = this.alignCursor.bind(this);\n    this.alignCursorFriendly = this.alignCursorFriendly.bind(this);\n\n    this._bindEvents(); // refresh\n\n\n    this.updateValue();\n\n    this._onChange();\n  }\n  /** Read or update mask */\n\n\n  _createClass(InputMask, [{\n    key: "maskEquals",\n    value: function maskEquals(mask) {\n      return mask == null || mask === this.masked.mask || mask === Date && this.masked instanceof masked_date;\n    }\n  }, {\n    key: "_bindEvents",\n\n    /**\r\n      Starts listening to element events\r\n      @protected\r\n    */\n    value: function _bindEvents() {\n      this.el.bindEvents({\n        selectionChange: this._saveSelection,\n        input: this._onInput,\n        drop: this._onDrop,\n        click: this._onClick,\n        focus: this._onFocus,\n        commit: this._onChange\n      });\n    }\n    /**\r\n      Stops listening to element events\r\n      @protected\r\n     */\n\n  }, {\n    key: "_unbindEvents",\n    value: function _unbindEvents() {\n      if (this.el) this.el.unbindEvents();\n    }\n    /**\r\n      Fires custom event\r\n      @protected\r\n     */\n\n  }, {\n    key: "_fireEvent",\n    value: function _fireEvent(ev) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      var listeners = this._listeners[ev];\n      if (!listeners) return;\n      listeners.forEach(function (l) {\n        return l.apply(void 0, args);\n      });\n    }\n    /**\r\n      Current selection start\r\n      @readonly\r\n    */\n\n  }, {\n    key: "_saveSelection",\n\n    /**\r\n      Stores current selection\r\n      @protected\r\n    */\n    value: function _saveSelection()\n    /* ev */\n    {\n      if (this.value !== this.el.value) {\n        console.warn(\'Element value was changed outside of mask. Syncronize mask using `mask.updateValue()` to work properly.\'); // eslint-disable-line no-console\n      }\n\n      this._selection = {\n        start: this.selectionStart,\n        end: this.cursorPos\n      };\n    }\n    /** Syncronizes model value from view */\n\n  }, {\n    key: "updateValue",\n    value: function updateValue() {\n      this.masked.value = this.el.value;\n      this._value = this.masked.value;\n    }\n    /** Syncronizes view from model value, fires change events */\n\n  }, {\n    key: "updateControl",\n    value: function updateControl() {\n      var newUnmaskedValue = this.masked.unmaskedValue;\n      var newValue = this.masked.value;\n      var isChanged = this.unmaskedValue !== newUnmaskedValue || this.value !== newValue;\n      this._unmaskedValue = newUnmaskedValue;\n      this._value = newValue;\n      if (this.el.value !== newValue) this.el.value = newValue;\n      if (isChanged) this._fireChangeEvents();\n    }\n    /** Updates options with deep equal check, recreates @{link Masked} model if mask type changes */\n\n  }, {\n    key: "updateOptions",\n    value: function updateOptions(opts) {\n      var mask = opts.mask,\n          restOpts = _objectWithoutProperties(opts, ["mask"]);\n\n      var updateMask = !this.maskEquals(mask);\n      var updateOpts = !objectIncludes(this.masked, restOpts);\n      if (updateMask) this.mask = mask;\n      if (updateOpts) this.masked.updateOptions(restOpts);\n      if (updateMask || updateOpts) this.updateControl();\n    }\n    /** Updates cursor */\n\n  }, {\n    key: "updateCursor",\n    value: function updateCursor(cursorPos) {\n      if (cursorPos == null) return;\n      this.cursorPos = cursorPos; // also queue change cursor for mobile browsers\n\n      this._delayUpdateCursor(cursorPos);\n    }\n    /**\r\n      Delays cursor update to support mobile browsers\r\n      @private\r\n    */\n\n  }, {\n    key: "_delayUpdateCursor",\n    value: function _delayUpdateCursor(cursorPos) {\n      var _this = this;\n\n      this._abortUpdateCursor();\n\n      this._changingCursorPos = cursorPos;\n      this._cursorChanging = setTimeout(function () {\n        if (!_this.el) return; // if was destroyed\n\n        _this.cursorPos = _this._changingCursorPos;\n\n        _this._abortUpdateCursor();\n      }, 10);\n    }\n    /**\r\n      Fires custom events\r\n      @protected\r\n    */\n\n  }, {\n    key: "_fireChangeEvents",\n    value: function _fireChangeEvents() {\n      this._fireEvent(\'accept\', this._inputEvent);\n\n      if (this.masked.isComplete) this._fireEvent(\'complete\', this._inputEvent);\n    }\n    /**\r\n      Aborts delayed cursor update\r\n      @private\r\n    */\n\n  }, {\n    key: "_abortUpdateCursor",\n    value: function _abortUpdateCursor() {\n      if (this._cursorChanging) {\n        clearTimeout(this._cursorChanging);\n        delete this._cursorChanging;\n      }\n    }\n    /** Aligns cursor to nearest available position */\n\n  }, {\n    key: "alignCursor",\n    value: function alignCursor() {\n      this.cursorPos = this.masked.nearestInputPos(this.cursorPos, DIRECTION.LEFT);\n    }\n    /** Aligns cursor only if selection is empty */\n\n  }, {\n    key: "alignCursorFriendly",\n    value: function alignCursorFriendly() {\n      if (this.selectionStart !== this.cursorPos) return; // skip if range is selected\n\n      this.alignCursor();\n    }\n    /** Adds listener on custom event */\n\n  }, {\n    key: "on",\n    value: function on(ev, handler) {\n      if (!this._listeners[ev]) this._listeners[ev] = [];\n\n      this._listeners[ev].push(handler);\n\n      return this;\n    }\n    /** Removes custom event listener */\n\n  }, {\n    key: "off",\n    value: function off(ev, handler) {\n      if (!this._listeners[ev]) return this;\n\n      if (!handler) {\n        delete this._listeners[ev];\n        return this;\n      }\n\n      var hIndex = this._listeners[ev].indexOf(handler);\n\n      if (hIndex >= 0) this._listeners[ev].splice(hIndex, 1);\n      return this;\n    }\n    /** Handles view input event */\n\n  }, {\n    key: "_onInput",\n    value: function _onInput(e) {\n      this._inputEvent = e;\n\n      this._abortUpdateCursor(); // fix strange IE behavior\n\n\n      if (!this._selection) return this.updateValue();\n      var details = new action_details( // new state\n      this.el.value, this.cursorPos, // old state\n      this.value, this._selection);\n      var oldRawValue = this.masked.rawInputValue;\n      var offset = this.masked.splice(details.startChangePos, details.removed.length, details.inserted, details.removeDirection).offset; // force align in remove direction only if no input chars were removed\n      // otherwise we still need to align with NONE (to get out from fixed symbols for instance)\n\n      var removeDirection = oldRawValue === this.masked.rawInputValue ? details.removeDirection : DIRECTION.NONE;\n      var cursorPos = this.masked.nearestInputPos(details.startChangePos + offset, removeDirection);\n      this.updateControl();\n      this.updateCursor(cursorPos);\n      delete this._inputEvent;\n    }\n    /** Handles view change event and commits model value */\n\n  }, {\n    key: "_onChange",\n    value: function _onChange() {\n      if (this.value !== this.el.value) {\n        this.updateValue();\n      }\n\n      this.masked.doCommit();\n      this.updateControl();\n\n      this._saveSelection();\n    }\n    /** Handles view drop event, prevents by default */\n\n  }, {\n    key: "_onDrop",\n    value: function _onDrop(ev) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n    /** Restore last selection on focus */\n\n  }, {\n    key: "_onFocus",\n    value: function _onFocus(ev) {\n      this.alignCursorFriendly();\n    }\n    /** Restore last selection on focus */\n\n  }, {\n    key: "_onClick",\n    value: function _onClick(ev) {\n      this.alignCursorFriendly();\n    }\n    /** Unbind view events and removes element reference */\n\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      this._unbindEvents(); // $FlowFixMe why not do so?\n\n\n      this._listeners.length = 0; // $FlowFixMe\n\n      delete this.el;\n    }\n  }, {\n    key: "mask",\n    get: function get() {\n      return this.masked.mask;\n    },\n    set: function set(mask) {\n      if (this.maskEquals(mask)) return;\n\n      if (!(mask instanceof holder.Masked) && this.masked.constructor === maskedClass(mask)) {\n        this.masked.updateOptions({\n          mask: mask\n        });\n        return;\n      }\n\n      var masked = factory({\n        mask: mask\n      });\n      masked.unmaskedValue = this.masked.unmaskedValue;\n      this.masked = masked;\n    }\n    /** Raw value */\n\n  }, {\n    key: "value",\n    get: function get() {\n      return this._value;\n    },\n    set: function set(str) {\n      this.masked.value = str;\n      this.updateControl();\n      this.alignCursor();\n    }\n    /** Unmasked value */\n\n  }, {\n    key: "unmaskedValue",\n    get: function get() {\n      return this._unmaskedValue;\n    },\n    set: function set(str) {\n      this.masked.unmaskedValue = str;\n      this.updateControl();\n      this.alignCursor();\n    }\n    /** Typed unmasked value */\n\n  }, {\n    key: "typedValue",\n    get: function get() {\n      return this.masked.typedValue;\n    },\n    set: function set(val) {\n      this.masked.typedValue = val;\n      this.updateControl();\n      this.alignCursor();\n    }\n  }, {\n    key: "selectionStart",\n    get: function get() {\n      return this._cursorChanging ? this._changingCursorPos : this.el.selectionStart;\n    }\n    /** Current cursor position */\n\n  }, {\n    key: "cursorPos",\n    get: function get() {\n      return this._cursorChanging ? this._changingCursorPos : this.el.selectionEnd;\n    },\n    set: function set(pos) {\n      if (!this.el || !this.el.isActive) return;\n      this.el.select(pos, pos);\n\n      this._saveSelection();\n    }\n  }]);\n\n  return InputMask;\n}();\n\nholder.InputMask = input_InputMask;\n/* harmony default export */ var controls_input = (input_InputMask);\n// CONCATENATED MODULE: ./node_modules/imask/esm/imask.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ var imask = (holder);\n// CONCATENATED MODULE: ./node_modules/imask/esm/masked/enum.js\n\n\n\n\n\n\n\n\n\n\n\n\n/** Pattern which validates enum values */\n\nvar enum_MaskedEnum = /*#__PURE__*/function (_MaskedPattern) {\n  _inherits(MaskedEnum, _MaskedPattern);\n\n  function MaskedEnum() {\n    _classCallCheck(this, MaskedEnum);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MaskedEnum).apply(this, arguments));\n  }\n\n  _createClass(MaskedEnum, [{\n    key: "_update",\n\n    /**\r\n      @override\r\n      @param {Object} opts\r\n    */\n    value: function _update(opts) {\n      // TODO type\n      if (opts.enum) opts.mask = \'*\'.repeat(opts.enum[0].length);\n\n      _get(_getPrototypeOf(MaskedEnum.prototype), "_update", this).call(this, opts);\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "doValidate",\n    value: function doValidate() {\n      var _this = this,\n          _get2;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return this.enum.some(function (e) {\n        return e.indexOf(_this.unmaskedValue) >= 0;\n      }) && (_get2 = _get(_getPrototypeOf(MaskedEnum.prototype), "doValidate", this)).call.apply(_get2, [this].concat(args));\n    }\n  }]);\n\n  return MaskedEnum;\n}(masked_pattern);\n\nholder.MaskedEnum = enum_MaskedEnum;\n/* harmony default export */ var masked_enum = (enum_MaskedEnum);\n// CONCATENATED MODULE: ./node_modules/imask/esm/masked/number.js\n\n\n\n\n\n\n/**\r\n  Number mask\r\n  @param {Object} opts\r\n  @param {string} opts.radix - Single char\r\n  @param {string} opts.thousandsSeparator - Single char\r\n  @param {Array<string>} opts.mapToRadix - Array of single chars\r\n  @param {number} opts.min\r\n  @param {number} opts.max\r\n  @param {number} opts.scale - Digits after point\r\n  @param {boolean} opts.signed - Allow negative\r\n  @param {boolean} opts.normalizeZeros - Flag to remove leading and trailing zeros in the end of editing\r\n  @param {boolean} opts.padFractionalZeros - Flag to pad trailing zeros after point in the end of editing\r\n*/\n\nvar number_MaskedNumber = /*#__PURE__*/function (_Masked) {\n  _inherits(MaskedNumber, _Masked);\n  /** Single char */\n\n  /** Single char */\n\n  /** Array of single chars */\n\n  /** */\n\n  /** */\n\n  /** Digits after point */\n\n  /** */\n\n  /** Flag to remove leading and trailing zeros in the end of editing */\n\n  /** Flag to pad trailing zeros after point in the end of editing */\n\n\n  function MaskedNumber(opts) {\n    _classCallCheck(this, MaskedNumber);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MaskedNumber).call(this, Object.assign({}, MaskedNumber.DEFAULTS, {}, opts)));\n  }\n  /**\r\n    @override\r\n  */\n\n\n  _createClass(MaskedNumber, [{\n    key: "_update",\n    value: function _update(opts) {\n      _get(_getPrototypeOf(MaskedNumber.prototype), "_update", this).call(this, opts);\n\n      this._updateRegExps();\n    }\n    /** */\n\n  }, {\n    key: "_updateRegExps",\n    value: function _updateRegExps() {\n      // use different regexp to process user input (more strict, input suffix) and tail shifting\n      var start = \'^\' + (this.allowNegative ? \'[+|\\\\-]?\' : \'\');\n      var midInput = \'(0|([1-9]+\\\\d*))?\';\n      var mid = \'\\\\d*\';\n      var end = (this.scale ? \'(\' + escapeRegExp(this.radix) + \'\\\\d{0,\' + this.scale + \'})?\' : \'\') + \'$\';\n      this._numberRegExpInput = new RegExp(start + midInput + end);\n      this._numberRegExp = new RegExp(start + mid + end);\n      this._mapToRadixRegExp = new RegExp(\'[\' + this.mapToRadix.map(escapeRegExp).join(\'\') + \']\', \'g\');\n      this._thousandsSeparatorRegExp = new RegExp(escapeRegExp(this.thousandsSeparator), \'g\');\n    }\n    /** */\n\n  }, {\n    key: "_removeThousandsSeparators",\n    value: function _removeThousandsSeparators(value) {\n      return value.replace(this._thousandsSeparatorRegExp, \'\');\n    }\n    /** */\n\n  }, {\n    key: "_insertThousandsSeparators",\n    value: function _insertThousandsSeparators(value) {\n      // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\n      var parts = value.split(this.radix);\n      parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.thousandsSeparator);\n      return parts.join(this.radix);\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "doPrepare",\n    value: function doPrepare(str) {\n      var _get2;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return (_get2 = _get(_getPrototypeOf(MaskedNumber.prototype), "doPrepare", this)).call.apply(_get2, [this, this._removeThousandsSeparators(str.replace(this._mapToRadixRegExp, this.radix))].concat(args));\n    }\n    /** */\n\n  }, {\n    key: "_separatorsCount",\n    value: function _separatorsCount(to) {\n      var extendOnSeparators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var count = 0;\n\n      for (var pos = 0; pos < to; ++pos) {\n        if (this._value.indexOf(this.thousandsSeparator, pos) === pos) {\n          ++count;\n          if (extendOnSeparators) to += this.thousandsSeparator.length;\n        }\n      }\n\n      return count;\n    }\n    /** */\n\n  }, {\n    key: "_separatorsCountFromSlice",\n    value: function _separatorsCountFromSlice() {\n      var slice = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._value;\n      return this._separatorsCount(this._removeThousandsSeparators(slice).length, true);\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "extractInput",\n    value: function extractInput() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n      var flags = arguments.length > 2 ? arguments[2] : undefined;\n\n      var _this$_adjustRangeWit = this._adjustRangeWithSeparators(fromPos, toPos);\n\n      var _this$_adjustRangeWit2 = _slicedToArray(_this$_adjustRangeWit, 2);\n\n      fromPos = _this$_adjustRangeWit2[0];\n      toPos = _this$_adjustRangeWit2[1];\n      return this._removeThousandsSeparators(_get(_getPrototypeOf(MaskedNumber.prototype), "extractInput", this).call(this, fromPos, toPos, flags));\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "_appendCharRaw",\n    value: function _appendCharRaw(ch) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!this.thousandsSeparator) return _get(_getPrototypeOf(MaskedNumber.prototype), "_appendCharRaw", this).call(this, ch, flags);\n      var prevBeforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;\n\n      var prevBeforeTailSeparatorsCount = this._separatorsCountFromSlice(prevBeforeTailValue);\n\n      this._value = this._removeThousandsSeparators(this.value);\n\n      var appendDetails = _get(_getPrototypeOf(MaskedNumber.prototype), "_appendCharRaw", this).call(this, ch, flags);\n\n      this._value = this._insertThousandsSeparators(this._value);\n      var beforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;\n\n      var beforeTailSeparatorsCount = this._separatorsCountFromSlice(beforeTailValue);\n\n      appendDetails.tailShift += (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length;\n      appendDetails.skip = !appendDetails.rawInserted && ch === this.thousandsSeparator;\n      return appendDetails;\n    }\n    /** */\n\n  }, {\n    key: "_findSeparatorAround",\n    value: function _findSeparatorAround(pos) {\n      if (this.thousandsSeparator) {\n        var searchFrom = pos - this.thousandsSeparator.length + 1;\n        var separatorPos = this.value.indexOf(this.thousandsSeparator, searchFrom);\n        if (separatorPos <= pos) return separatorPos;\n      }\n\n      return -1;\n    }\n  }, {\n    key: "_adjustRangeWithSeparators",\n    value: function _adjustRangeWithSeparators(from, to) {\n      var separatorAroundFromPos = this._findSeparatorAround(from);\n\n      if (separatorAroundFromPos >= 0) from = separatorAroundFromPos;\n\n      var separatorAroundToPos = this._findSeparatorAround(to);\n\n      if (separatorAroundToPos >= 0) to = separatorAroundToPos + this.thousandsSeparator.length;\n      return [from, to];\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "remove",\n    value: function remove() {\n      var fromPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var toPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value.length;\n\n      var _this$_adjustRangeWit3 = this._adjustRangeWithSeparators(fromPos, toPos);\n\n      var _this$_adjustRangeWit4 = _slicedToArray(_this$_adjustRangeWit3, 2);\n\n      fromPos = _this$_adjustRangeWit4[0];\n      toPos = _this$_adjustRangeWit4[1];\n      var valueBeforePos = this.value.slice(0, fromPos);\n      var valueAfterPos = this.value.slice(toPos);\n\n      var prevBeforeTailSeparatorsCount = this._separatorsCount(valueBeforePos.length);\n\n      this._value = this._insertThousandsSeparators(this._removeThousandsSeparators(valueBeforePos + valueAfterPos));\n\n      var beforeTailSeparatorsCount = this._separatorsCountFromSlice(valueBeforePos);\n\n      return new change_details({\n        tailShift: (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length\n      });\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "nearestInputPos",\n    value: function nearestInputPos(cursorPos, direction) {\n      if (!this.thousandsSeparator) return cursorPos;\n\n      switch (direction) {\n        case DIRECTION.NONE:\n        case DIRECTION.LEFT:\n        case DIRECTION.FORCE_LEFT:\n          {\n            var separatorAtLeftPos = this._findSeparatorAround(cursorPos - 1);\n\n            if (separatorAtLeftPos >= 0) {\n              var separatorAtLeftEndPos = separatorAtLeftPos + this.thousandsSeparator.length;\n\n              if (cursorPos < separatorAtLeftEndPos || this.value.length <= separatorAtLeftEndPos || direction === DIRECTION.FORCE_LEFT) {\n                return separatorAtLeftPos;\n              }\n            }\n\n            break;\n          }\n\n        case DIRECTION.RIGHT:\n        case DIRECTION.FORCE_RIGHT:\n          {\n            var separatorAtRightPos = this._findSeparatorAround(cursorPos);\n\n            if (separatorAtRightPos >= 0) {\n              return separatorAtRightPos + this.thousandsSeparator.length;\n            }\n          }\n      }\n\n      return cursorPos;\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "doValidate",\n    value: function doValidate(flags) {\n      var regexp = flags.input ? this._numberRegExpInput : this._numberRegExp; // validate as string\n\n      var valid = regexp.test(this._removeThousandsSeparators(this.value));\n\n      if (valid) {\n        // validate as number\n        var number = this.number;\n        valid = valid && !isNaN(number) && ( // check min bound for negative values\n        this.min == null || this.min >= 0 || this.min <= this.number) && ( // check max bound for positive values\n        this.max == null || this.max <= 0 || this.number <= this.max);\n      }\n\n      return valid && _get(_getPrototypeOf(MaskedNumber.prototype), "doValidate", this).call(this, flags);\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "doCommit",\n    value: function doCommit() {\n      if (this.value) {\n        var number = this.number;\n        var validnum = number; // check bounds\n\n        if (this.min != null) validnum = Math.max(validnum, this.min);\n        if (this.max != null) validnum = Math.min(validnum, this.max);\n        if (validnum !== number) this.unmaskedValue = String(validnum);\n        var formatted = this.value;\n        if (this.normalizeZeros) formatted = this._normalizeZeros(formatted);\n        if (this.padFractionalZeros) formatted = this._padFractionalZeros(formatted);\n        this._value = formatted;\n      }\n\n      _get(_getPrototypeOf(MaskedNumber.prototype), "doCommit", this).call(this);\n    }\n    /** */\n\n  }, {\n    key: "_normalizeZeros",\n    value: function _normalizeZeros(value) {\n      var parts = this._removeThousandsSeparators(value).split(this.radix); // remove leading zeros\n\n\n      parts[0] = parts[0].replace(/^(\\D*)(0*)(\\d*)/, function (match, sign, zeros, num) {\n        return sign + num;\n      }); // add leading zero\n\n      if (value.length && !/\\d$/.test(parts[0])) parts[0] = parts[0] + \'0\';\n\n      if (parts.length > 1) {\n        parts[1] = parts[1].replace(/0*$/, \'\'); // remove trailing zeros\n\n        if (!parts[1].length) parts.length = 1; // remove fractional\n      }\n\n      return this._insertThousandsSeparators(parts.join(this.radix));\n    }\n    /** */\n\n  }, {\n    key: "_padFractionalZeros",\n    value: function _padFractionalZeros(value) {\n      if (!value) return value;\n      var parts = value.split(this.radix);\n      if (parts.length < 2) parts.push(\'\');\n      parts[1] = parts[1].padEnd(this.scale, \'0\');\n      return parts.join(this.radix);\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "unmaskedValue",\n    get: function get() {\n      return this._removeThousandsSeparators(this._normalizeZeros(this.value)).replace(this.radix, \'.\');\n    },\n    set: function set(unmaskedValue) {\n      _set(_getPrototypeOf(MaskedNumber.prototype), "unmaskedValue", unmaskedValue.replace(\'.\', this.radix), this, true);\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "typedValue",\n    get: function get() {\n      return Number(this.unmaskedValue);\n    },\n    set: function set(n) {\n      _set(_getPrototypeOf(MaskedNumber.prototype), "unmaskedValue", String(n), this, true);\n    }\n    /** Parsed Number */\n\n  }, {\n    key: "number",\n    get: function get() {\n      return this.typedValue;\n    },\n    set: function set(number) {\n      this.typedValue = number;\n    }\n    /**\r\n      Is negative allowed\r\n      @readonly\r\n    */\n\n  }, {\n    key: "allowNegative",\n    get: function get() {\n      return this.signed || this.min != null && this.min < 0 || this.max != null && this.max < 0;\n    }\n  }]);\n\n  return MaskedNumber;\n}(base);\n\nnumber_MaskedNumber.DEFAULTS = {\n  radix: \',\',\n  thousandsSeparator: \'\',\n  mapToRadix: [\'.\'],\n  scale: 2,\n  signed: false,\n  normalizeZeros: true,\n  padFractionalZeros: false\n};\nholder.MaskedNumber = number_MaskedNumber;\n/* harmony default export */ var masked_number = (number_MaskedNumber);\n// CONCATENATED MODULE: ./node_modules/imask/esm/masked/function.js\n\n\n\n\n\n\n/** Masking by custom Function */\n\nvar function_MaskedFunction = /*#__PURE__*/function (_Masked) {\n  _inherits(MaskedFunction, _Masked);\n\n  function MaskedFunction() {\n    _classCallCheck(this, MaskedFunction);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MaskedFunction).apply(this, arguments));\n  }\n\n  _createClass(MaskedFunction, [{\n    key: "_update",\n\n    /**\r\n      @override\r\n      @param {Object} opts\r\n    */\n    value: function _update(opts) {\n      if (opts.mask) opts.validate = opts.mask;\n\n      _get(_getPrototypeOf(MaskedFunction.prototype), "_update", this).call(this, opts);\n    }\n  }]);\n\n  return MaskedFunction;\n}(base);\n\nholder.MaskedFunction = function_MaskedFunction;\n/* harmony default export */ var masked_function = (function_MaskedFunction);\n// CONCATENATED MODULE: ./node_modules/imask/esm/masked/dynamic.js\n\n\n\n\n\n\n\n/** Dynamic mask for choosing apropriate mask in run-time */\n\nvar dynamic_MaskedDynamic = /*#__PURE__*/function (_Masked) {\n  _inherits(MaskedDynamic, _Masked);\n  /** Currently chosen mask */\n\n  /** Compliled {@link Masked} options */\n\n  /** Chooses {@link Masked} depending on input value */\n\n  /**\r\n    @param {Object} opts\r\n  */\n\n\n  function MaskedDynamic(opts) {\n    var _this;\n\n    _classCallCheck(this, MaskedDynamic);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MaskedDynamic).call(this, Object.assign({}, MaskedDynamic.DEFAULTS, {}, opts)));\n    _this.currentMask = null;\n    return _this;\n  }\n  /**\r\n    @override\r\n  */\n\n\n  _createClass(MaskedDynamic, [{\n    key: "_update",\n    value: function _update(opts) {\n      _get(_getPrototypeOf(MaskedDynamic.prototype), "_update", this).call(this, opts);\n\n      if (\'mask\' in opts) {\n        // mask could be totally dynamic with only `dispatch` option\n        this.compiledMasks = Array.isArray(opts.mask) ? opts.mask.map(function (m) {\n          return factory(m);\n        }) : [];\n      }\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "_appendCharRaw",\n    value: function _appendCharRaw() {\n      var details = this._applyDispatch.apply(this, arguments);\n\n      if (this.currentMask) {\n        var _this$currentMask;\n\n        details.aggregate((_this$currentMask = this.currentMask)._appendChar.apply(_this$currentMask, arguments));\n      }\n\n      return details;\n    }\n  }, {\n    key: "_applyDispatch",\n    value: function _applyDispatch() {\n      var appended = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \'\';\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var prevValueBeforeTail = flags.tail && flags._beforeTailState != null ? flags._beforeTailState._value : this.value;\n      var inputValue = this.rawInputValue;\n      var insertValue = flags.tail && flags._beforeTailState != null ? // $FlowFixMe - tired to fight with type system\n      flags._beforeTailState._rawInputValue : inputValue;\n      var tailValue = inputValue.slice(insertValue.length);\n      var prevMask = this.currentMask;\n      var details = new change_details();\n      var prevMaskState = prevMask && prevMask.state; // clone flags to prevent overwriting `_beforeTailState`\n\n      this.currentMask = this.doDispatch(appended, Object.assign({}, flags)); // restore state after dispatch\n\n      if (this.currentMask) {\n        if (this.currentMask !== prevMask) {\n          // if mask changed reapply input\n          this.currentMask.reset(); // $FlowFixMe - it\'s ok, we don\'t change current mask above\n\n          var d = this.currentMask.append(insertValue, {\n            raw: true\n          });\n          details.tailShift = d.inserted.length - prevValueBeforeTail.length;\n\n          if (tailValue) {\n            // $FlowFixMe - it\'s ok, we don\'t change current mask above\n            details.tailShift += this.currentMask.append(tailValue, {\n              raw: true,\n              tail: true\n            }).tailShift;\n          }\n        } else {\n          // Dispatch can do something bad with state, so\n          // restore prev mask state\n          this.currentMask.state = prevMaskState;\n        }\n      }\n\n      return details;\n    }\n  }, {\n    key: "_appendPlaceholder",\n    value: function _appendPlaceholder() {\n      var details = this._applyDispatch.apply(this, arguments);\n\n      if (this.currentMask) {\n        details.aggregate(this.currentMask._appendPlaceholder());\n      }\n\n      return details;\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "doDispatch",\n    value: function doDispatch(appended) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.dispatch(appended, this, flags);\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "doValidate",\n    value: function doValidate() {\n      var _get2, _this$currentMask2;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return (_get2 = _get(_getPrototypeOf(MaskedDynamic.prototype), "doValidate", this)).call.apply(_get2, [this].concat(args)) && (!this.currentMask || (_this$currentMask2 = this.currentMask).doValidate.apply(_this$currentMask2, args));\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "reset",\n    value: function reset() {\n      if (this.currentMask) this.currentMask.reset();\n      this.compiledMasks.forEach(function (m) {\n        return m.reset();\n      });\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "remove",\n\n    /**\r\n      @override\r\n    */\n    value: function remove() {\n      var details = new change_details();\n\n      if (this.currentMask) {\n        var _this$currentMask3;\n\n        details.aggregate((_this$currentMask3 = this.currentMask).remove.apply(_this$currentMask3, arguments)) // update with dispatch\n        .aggregate(this._applyDispatch());\n      }\n\n      return details;\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "extractInput",\n\n    /**\r\n      @override\r\n    */\n    value: function extractInput() {\n      var _this$currentMask4;\n\n      return this.currentMask ? (_this$currentMask4 = this.currentMask).extractInput.apply(_this$currentMask4, arguments) : \'\';\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "extractTail",\n    value: function extractTail() {\n      var _this$currentMask5, _get3;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return this.currentMask ? (_this$currentMask5 = this.currentMask).extractTail.apply(_this$currentMask5, args) : (_get3 = _get(_getPrototypeOf(MaskedDynamic.prototype), "extractTail", this)).call.apply(_get3, [this].concat(args));\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "doCommit",\n    value: function doCommit() {\n      if (this.currentMask) this.currentMask.doCommit();\n\n      _get(_getPrototypeOf(MaskedDynamic.prototype), "doCommit", this).call(this);\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "nearestInputPos",\n    value: function nearestInputPos() {\n      var _this$currentMask6, _get4;\n\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      return this.currentMask ? (_this$currentMask6 = this.currentMask).nearestInputPos.apply(_this$currentMask6, args) : (_get4 = _get(_getPrototypeOf(MaskedDynamic.prototype), "nearestInputPos", this)).call.apply(_get4, [this].concat(args));\n    }\n  }, {\n    key: "value",\n    get: function get() {\n      return this.currentMask ? this.currentMask.value : \'\';\n    },\n    set: function set(value) {\n      _set(_getPrototypeOf(MaskedDynamic.prototype), "value", value, this, true);\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "unmaskedValue",\n    get: function get() {\n      return this.currentMask ? this.currentMask.unmaskedValue : \'\';\n    },\n    set: function set(unmaskedValue) {\n      _set(_getPrototypeOf(MaskedDynamic.prototype), "unmaskedValue", unmaskedValue, this, true);\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "typedValue",\n    get: function get() {\n      return this.currentMask ? this.currentMask.typedValue : \'\';\n    } // probably typedValue should not be used with dynamic\n    ,\n    set: function set(value) {\n      var unmaskedValue = String(value); // double check it\n\n      if (this.currentMask) {\n        this.currentMask.typedValue = value;\n        unmaskedValue = this.currentMask.unmaskedValue;\n      }\n\n      this.unmaskedValue = unmaskedValue;\n    }\n    /**\r\n      @override\r\n    */\n\n  }, {\n    key: "isComplete",\n    get: function get() {\n      return !!this.currentMask && this.currentMask.isComplete;\n    }\n  }, {\n    key: "state",\n    get: function get() {\n      return Object.assign({}, _get(_getPrototypeOf(MaskedDynamic.prototype), "state", this), {\n        _rawInputValue: this.rawInputValue,\n        compiledMasks: this.compiledMasks.map(function (m) {\n          return m.state;\n        }),\n        currentMaskRef: this.currentMask,\n        currentMask: this.currentMask && this.currentMask.state\n      });\n    },\n    set: function set(state) {\n      var compiledMasks = state.compiledMasks,\n          currentMaskRef = state.currentMaskRef,\n          currentMask = state.currentMask,\n          maskedState = _objectWithoutProperties(state, ["compiledMasks", "currentMaskRef", "currentMask"]);\n\n      this.compiledMasks.forEach(function (m, mi) {\n        return m.state = compiledMasks[mi];\n      });\n\n      if (currentMaskRef != null) {\n        this.currentMask = currentMaskRef;\n        this.currentMask.state = currentMask;\n      }\n\n      _set(_getPrototypeOf(MaskedDynamic.prototype), "state", maskedState, this, true);\n    }\n  }, {\n    key: "overwrite",\n    get: function get() {\n      return this.currentMask ? this.currentMask.overwrite : _get(_getPrototypeOf(MaskedDynamic.prototype), "overwrite", this);\n    },\n    set: function set(overwrite) {\n      console.warn(\'"overwrite" option is not available in dynamic mask, use this option in siblings\');\n    }\n  }]);\n\n  return MaskedDynamic;\n}(base);\n\ndynamic_MaskedDynamic.DEFAULTS = {\n  dispatch: function dispatch(appended, masked, flags) {\n    if (!masked.compiledMasks.length) return;\n    var inputValue = masked.rawInputValue; // simulate input\n\n    var inputs = masked.compiledMasks.map(function (m, index) {\n      m.reset();\n      m.append(inputValue, {\n        raw: true\n      });\n      m.append(appended, flags);\n      var weight = m.rawInputValue.length;\n      return {\n        weight: weight,\n        index: index\n      };\n    }); // pop masks with longer values first\n\n    inputs.sort(function (i1, i2) {\n      return i2.weight - i1.weight;\n    });\n    return masked.compiledMasks[inputs[0].index];\n  }\n};\nholder.MaskedDynamic = dynamic_MaskedDynamic;\n/* harmony default export */ var dynamic = (dynamic_MaskedDynamic);\n// CONCATENATED MODULE: ./node_modules/imask/esm/masked/pipe.js\n\n\n\n\n/** Mask pipe source and destination types */\n\nvar PIPE_TYPE = {\n  MASKED: \'value\',\n  UNMASKED: \'unmaskedValue\',\n  TYPED: \'typedValue\'\n};\n/** Creates new pipe function depending on mask type, source and destination options */\n\nfunction createPipe(mask) {\n  var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PIPE_TYPE.MASKED;\n  var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : PIPE_TYPE.MASKED;\n  var masked = factory(mask);\n  return function (value) {\n    return masked.runIsolated(function (m) {\n      m[from] = value;\n      return m[to];\n    });\n  };\n}\n/** Pipes value through mask depending on mask type, source and destination options */\n\n\nfunction pipe(value) {\n  for (var _len = arguments.length, pipeArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    pipeArgs[_key - 1] = arguments[_key];\n  }\n\n  return createPipe.apply(void 0, pipeArgs)(value);\n}\n\nholder.PIPE_TYPE = PIPE_TYPE;\nholder.createPipe = createPipe;\nholder.pipe = pipe;\n\n// CONCATENATED MODULE: ./node_modules/imask/esm/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntry {\n  globalThis.IMask = imask;\n} catch (e) {}\n\n/* harmony default export */ var esm = __webpack_exports__["a"] = (imask);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! nouislider - 14.6.0 - 6/27/2020 */\n(function (factory) {\n  if (true) {\n    // AMD. Register as an anonymous module.\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(function () {\n  "use strict";\n\n  var VERSION = "14.6.0"; //region Helper Methods\n\n  function isValidFormatter(entry) {\n    return typeof entry === "object" && typeof entry.to === "function" && typeof entry.from === "function";\n  }\n\n  function removeElement(el) {\n    el.parentElement.removeChild(el);\n  }\n\n  function isSet(value) {\n    return value !== null && value !== undefined;\n  } // Bindable version\n\n\n  function preventDefault(e) {\n    e.preventDefault();\n  } // Removes duplicates from an array.\n\n\n  function unique(array) {\n    return array.filter(function (a) {\n      return !this[a] ? this[a] = true : false;\n    }, {});\n  } // Round a value to the closest \'to\'.\n\n\n  function closest(value, to) {\n    return Math.round(value / to) * to;\n  } // Current position of an element relative to the document.\n\n\n  function offset(elem, orientation) {\n    var rect = elem.getBoundingClientRect();\n    var doc = elem.ownerDocument;\n    var docElem = doc.documentElement;\n    var pageOffset = getPageOffset(doc); // getBoundingClientRect contains left scroll in Chrome on Android.\n    // I haven\'t found a feature detection that proves this. Worst case\n    // scenario on mis-match: the \'tap\' feature on horizontal sliders breaks.\n\n    if (/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)) {\n      pageOffset.x = 0;\n    }\n\n    return orientation ? rect.top + pageOffset.y - docElem.clientTop : rect.left + pageOffset.x - docElem.clientLeft;\n  } // Checks whether a value is numerical.\n\n\n  function isNumeric(a) {\n    return typeof a === "number" && !isNaN(a) && isFinite(a);\n  } // Sets a class and removes it after [duration] ms.\n\n\n  function addClassFor(element, className, duration) {\n    if (duration > 0) {\n      addClass(element, className);\n      setTimeout(function () {\n        removeClass(element, className);\n      }, duration);\n    }\n  } // Limits a value to 0 - 100\n\n\n  function limit(a) {\n    return Math.max(Math.min(a, 100), 0);\n  } // Wraps a variable as an array, if it isn\'t one yet.\n  // Note that an input array is returned by reference!\n\n\n  function asArray(a) {\n    return Array.isArray(a) ? a : [a];\n  } // Counts decimals\n\n\n  function countDecimals(numStr) {\n    numStr = String(numStr);\n    var pieces = numStr.split(".");\n    return pieces.length > 1 ? pieces[1].length : 0;\n  } // http://youmightnotneedjquery.com/#add_class\n\n\n  function addClass(el, className) {\n    if (el.classList && !/\\s/.test(className)) {\n      el.classList.add(className);\n    } else {\n      el.className += " " + className;\n    }\n  } // http://youmightnotneedjquery.com/#remove_class\n\n\n  function removeClass(el, className) {\n    if (el.classList && !/\\s/.test(className)) {\n      el.classList.remove(className);\n    } else {\n      el.className = el.className.replace(new RegExp("(^|\\\\b)" + className.split(" ").join("|") + "(\\\\b|$)", "gi"), " ");\n    }\n  } // https://plainjs.com/javascript/attributes/adding-removing-and-testing-for-classes-9/\n\n\n  function hasClass(el, className) {\n    return el.classList ? el.classList.contains(className) : new RegExp("\\\\b" + className + "\\\\b").test(el.className);\n  } // https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY#Notes\n\n\n  function getPageOffset(doc) {\n    var supportPageOffset = window.pageXOffset !== undefined;\n    var isCSS1Compat = (doc.compatMode || "") === "CSS1Compat";\n    var x = supportPageOffset ? window.pageXOffset : isCSS1Compat ? doc.documentElement.scrollLeft : doc.body.scrollLeft;\n    var y = supportPageOffset ? window.pageYOffset : isCSS1Compat ? doc.documentElement.scrollTop : doc.body.scrollTop;\n    return {\n      x: x,\n      y: y\n    };\n  } // we provide a function to compute constants instead\n  // of accessing window.* as soon as the module needs it\n  // so that we do not compute anything if not needed\n\n\n  function getActions() {\n    // Determine the events to bind. IE11 implements pointerEvents without\n    // a prefix, which breaks compatibility with the IE10 implementation.\n    return window.navigator.pointerEnabled ? {\n      start: "pointerdown",\n      move: "pointermove",\n      end: "pointerup"\n    } : window.navigator.msPointerEnabled ? {\n      start: "MSPointerDown",\n      move: "MSPointerMove",\n      end: "MSPointerUp"\n    } : {\n      start: "mousedown touchstart",\n      move: "mousemove touchmove",\n      end: "mouseup touchend"\n    };\n  } // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n  // Issue #785\n\n\n  function getSupportsPassive() {\n    var supportsPassive = false;\n    /* eslint-disable */\n\n    try {\n      var opts = Object.defineProperty({}, "passive", {\n        get: function () {\n          supportsPassive = true;\n        }\n      });\n      window.addEventListener("test", null, opts);\n    } catch (e) {}\n    /* eslint-enable */\n\n\n    return supportsPassive;\n  }\n\n  function getSupportsTouchActionNone() {\n    return window.CSS && CSS.supports && CSS.supports("touch-action", "none");\n  } //endregion\n  //region Range Calculation\n  // Determine the size of a sub-range in relation to a full range.\n\n\n  function subRangeRatio(pa, pb) {\n    return 100 / (pb - pa);\n  } // (percentage) How many percent is this value of this range?\n\n\n  function fromPercentage(range, value, startRange) {\n    return value * 100 / (range[startRange + 1] - range[startRange]);\n  } // (percentage) Where is this value on this range?\n\n\n  function toPercentage(range, value) {\n    return fromPercentage(range, range[0] < 0 ? value + Math.abs(range[0]) : value - range[0], 0);\n  } // (value) How much is this percentage on this range?\n\n\n  function isPercentage(range, value) {\n    return value * (range[1] - range[0]) / 100 + range[0];\n  }\n\n  function getJ(value, arr) {\n    var j = 1;\n\n    while (value >= arr[j]) {\n      j += 1;\n    }\n\n    return j;\n  } // (percentage) Input a value, find where, on a scale of 0-100, it applies.\n\n\n  function toStepping(xVal, xPct, value) {\n    if (value >= xVal.slice(-1)[0]) {\n      return 100;\n    }\n\n    var j = getJ(value, xVal);\n    var va = xVal[j - 1];\n    var vb = xVal[j];\n    var pa = xPct[j - 1];\n    var pb = xPct[j];\n    return pa + toPercentage([va, vb], value) / subRangeRatio(pa, pb);\n  } // (value) Input a percentage, find where it is on the specified range.\n\n\n  function fromStepping(xVal, xPct, value) {\n    // There is no range group that fits 100\n    if (value >= 100) {\n      return xVal.slice(-1)[0];\n    }\n\n    var j = getJ(value, xPct);\n    var va = xVal[j - 1];\n    var vb = xVal[j];\n    var pa = xPct[j - 1];\n    var pb = xPct[j];\n    return isPercentage([va, vb], (value - pa) * subRangeRatio(pa, pb));\n  } // (percentage) Get the step that applies at a certain value.\n\n\n  function getStep(xPct, xSteps, snap, value) {\n    if (value === 100) {\n      return value;\n    }\n\n    var j = getJ(value, xPct);\n    var a = xPct[j - 1];\n    var b = xPct[j]; // If \'snap\' is set, steps are used as fixed points on the slider.\n\n    if (snap) {\n      // Find the closest position, a or b.\n      if (value - a > (b - a) / 2) {\n        return b;\n      }\n\n      return a;\n    }\n\n    if (!xSteps[j - 1]) {\n      return value;\n    }\n\n    return xPct[j - 1] + closest(value - xPct[j - 1], xSteps[j - 1]);\n  }\n\n  function handleEntryPoint(index, value, that) {\n    var percentage; // Wrap numerical input in an array.\n\n    if (typeof value === "number") {\n      value = [value];\n    } // Reject any invalid input, by testing whether value is an array.\n\n\n    if (!Array.isArray(value)) {\n      throw new Error("noUiSlider (" + VERSION + "): \'range\' contains invalid value.");\n    } // Covert min/max syntax to 0 and 100.\n\n\n    if (index === "min") {\n      percentage = 0;\n    } else if (index === "max") {\n      percentage = 100;\n    } else {\n      percentage = parseFloat(index);\n    } // Check for correct input.\n\n\n    if (!isNumeric(percentage) || !isNumeric(value[0])) {\n      throw new Error("noUiSlider (" + VERSION + "): \'range\' value isn\'t numeric.");\n    } // Store values.\n\n\n    that.xPct.push(percentage);\n    that.xVal.push(value[0]); // NaN will evaluate to false too, but to keep\n    // logging clear, set step explicitly. Make sure\n    // not to override the \'step\' setting with false.\n\n    if (!percentage) {\n      if (!isNaN(value[1])) {\n        that.xSteps[0] = value[1];\n      }\n    } else {\n      that.xSteps.push(isNaN(value[1]) ? false : value[1]);\n    }\n\n    that.xHighestCompleteStep.push(0);\n  }\n\n  function handleStepPoint(i, n, that) {\n    // Ignore \'false\' stepping.\n    if (!n) {\n      return;\n    } // Step over zero-length ranges (#948);\n\n\n    if (that.xVal[i] === that.xVal[i + 1]) {\n      that.xSteps[i] = that.xHighestCompleteStep[i] = that.xVal[i];\n      return;\n    } // Factor to range ratio\n\n\n    that.xSteps[i] = fromPercentage([that.xVal[i], that.xVal[i + 1]], n, 0) / subRangeRatio(that.xPct[i], that.xPct[i + 1]);\n    var totalSteps = (that.xVal[i + 1] - that.xVal[i]) / that.xNumSteps[i];\n    var highestStep = Math.ceil(Number(totalSteps.toFixed(3)) - 1);\n    var step = that.xVal[i] + that.xNumSteps[i] * highestStep;\n    that.xHighestCompleteStep[i] = step;\n  } //endregion\n  //region Spectrum\n\n\n  function Spectrum(entry, snap, singleStep) {\n    this.xPct = [];\n    this.xVal = [];\n    this.xSteps = [singleStep || false];\n    this.xNumSteps = [false];\n    this.xHighestCompleteStep = [];\n    this.snap = snap;\n    var index;\n    var ordered = []; // [0, \'min\'], [1, \'50%\'], [2, \'max\']\n    // Map the object keys to an array.\n\n    for (index in entry) {\n      if (entry.hasOwnProperty(index)) {\n        ordered.push([entry[index], index]);\n      }\n    } // Sort all entries by value (numeric sort).\n\n\n    if (ordered.length && typeof ordered[0][0] === "object") {\n      ordered.sort(function (a, b) {\n        return a[0][0] - b[0][0];\n      });\n    } else {\n      ordered.sort(function (a, b) {\n        return a[0] - b[0];\n      });\n    } // Convert all entries to subranges.\n\n\n    for (index = 0; index < ordered.length; index++) {\n      handleEntryPoint(ordered[index][1], ordered[index][0], this);\n    } // Store the actual step values.\n    // xSteps is sorted in the same order as xPct and xVal.\n\n\n    this.xNumSteps = this.xSteps.slice(0); // Convert all numeric steps to the percentage of the subrange they represent.\n\n    for (index = 0; index < this.xNumSteps.length; index++) {\n      handleStepPoint(index, this.xNumSteps[index], this);\n    }\n  }\n\n  Spectrum.prototype.getDistance = function (value) {\n    var index;\n    var distances = [];\n\n    for (index = 0; index < this.xNumSteps.length - 1; index++) {\n      // last "range" can\'t contain step size as it is purely an endpoint.\n      var step = this.xNumSteps[index];\n\n      if (step && value / step % 1 !== 0) {\n        throw new Error("noUiSlider (" + VERSION + "): \'limit\', \'margin\' and \'padding\' of " + this.xPct[index] + "% range must be divisible by step.");\n      } // Calculate percentual distance in current range of limit, margin or padding\n\n\n      distances[index] = fromPercentage(this.xVal, value, index);\n    }\n\n    return distances;\n  }; // Calculate the percentual distance over the whole scale of ranges.\n  // direction: 0 = backwards / 1 = forwards\n\n\n  Spectrum.prototype.getAbsoluteDistance = function (value, distances, direction) {\n    var xPct_index = 0; // Calculate range where to start calculation\n\n    if (value < this.xPct[this.xPct.length - 1]) {\n      while (value > this.xPct[xPct_index + 1]) {\n        xPct_index++;\n      }\n    } else if (value === this.xPct[this.xPct.length - 1]) {\n      xPct_index = this.xPct.length - 2;\n    } // If looking backwards and the value is exactly at a range separator then look one range further\n\n\n    if (!direction && value === this.xPct[xPct_index + 1]) {\n      xPct_index++;\n    }\n\n    var start_factor;\n    var rest_factor = 1;\n    var rest_rel_distance = distances[xPct_index];\n    var range_pct = 0;\n    var rel_range_distance = 0;\n    var abs_distance_counter = 0;\n    var range_counter = 0; // Calculate what part of the start range the value is\n\n    if (direction) {\n      start_factor = (value - this.xPct[xPct_index]) / (this.xPct[xPct_index + 1] - this.xPct[xPct_index]);\n    } else {\n      start_factor = (this.xPct[xPct_index + 1] - value) / (this.xPct[xPct_index + 1] - this.xPct[xPct_index]);\n    } // Do until the complete distance across ranges is calculated\n\n\n    while (rest_rel_distance > 0) {\n      // Calculate the percentage of total range\n      range_pct = this.xPct[xPct_index + 1 + range_counter] - this.xPct[xPct_index + range_counter]; // Detect if the margin, padding or limit is larger then the current range and calculate\n\n      if (distances[xPct_index + range_counter] * rest_factor + 100 - start_factor * 100 > 100) {\n        // If larger then take the percentual distance of the whole range\n        rel_range_distance = range_pct * start_factor; // Rest factor of relative percentual distance still to be calculated\n\n        rest_factor = (rest_rel_distance - 100 * start_factor) / distances[xPct_index + range_counter]; // Set start factor to 1 as for next range it does not apply.\n\n        start_factor = 1;\n      } else {\n        // If smaller or equal then take the percentual distance of the calculate percentual part of that range\n        rel_range_distance = distances[xPct_index + range_counter] * range_pct / 100 * rest_factor; // No rest left as the rest fits in current range\n\n        rest_factor = 0;\n      }\n\n      if (direction) {\n        abs_distance_counter = abs_distance_counter - rel_range_distance; // Limit range to first range when distance becomes outside of minimum range\n\n        if (this.xPct.length + range_counter >= 1) {\n          range_counter--;\n        }\n      } else {\n        abs_distance_counter = abs_distance_counter + rel_range_distance; // Limit range to last range when distance becomes outside of maximum range\n\n        if (this.xPct.length - range_counter >= 1) {\n          range_counter++;\n        }\n      } // Rest of relative percentual distance still to be calculated\n\n\n      rest_rel_distance = distances[xPct_index + range_counter] * rest_factor;\n    }\n\n    return value + abs_distance_counter;\n  };\n\n  Spectrum.prototype.toStepping = function (value) {\n    value = toStepping(this.xVal, this.xPct, value);\n    return value;\n  };\n\n  Spectrum.prototype.fromStepping = function (value) {\n    return fromStepping(this.xVal, this.xPct, value);\n  };\n\n  Spectrum.prototype.getStep = function (value) {\n    value = getStep(this.xPct, this.xSteps, this.snap, value);\n    return value;\n  };\n\n  Spectrum.prototype.getDefaultStep = function (value, isDown, size) {\n    var j = getJ(value, this.xPct); // When at the top or stepping down, look at the previous sub-range\n\n    if (value === 100 || isDown && value === this.xPct[j - 1]) {\n      j = Math.max(j - 1, 1);\n    }\n\n    return (this.xVal[j] - this.xVal[j - 1]) / size;\n  };\n\n  Spectrum.prototype.getNearbySteps = function (value) {\n    var j = getJ(value, this.xPct);\n    return {\n      stepBefore: {\n        startValue: this.xVal[j - 2],\n        step: this.xNumSteps[j - 2],\n        highestStep: this.xHighestCompleteStep[j - 2]\n      },\n      thisStep: {\n        startValue: this.xVal[j - 1],\n        step: this.xNumSteps[j - 1],\n        highestStep: this.xHighestCompleteStep[j - 1]\n      },\n      stepAfter: {\n        startValue: this.xVal[j],\n        step: this.xNumSteps[j],\n        highestStep: this.xHighestCompleteStep[j]\n      }\n    };\n  };\n\n  Spectrum.prototype.countStepDecimals = function () {\n    var stepDecimals = this.xNumSteps.map(countDecimals);\n    return Math.max.apply(null, stepDecimals);\n  }; // Outside testing\n\n\n  Spectrum.prototype.convert = function (value) {\n    return this.getStep(this.toStepping(value));\n  }; //endregion\n  //region Options\n\n  /*\tEvery input option is tested and parsed. This\'ll prevent\n      endless validation in internal methods. These tests are\n      structured with an item for every option available. An\n      option can be marked as required by setting the \'r\' flag.\n      The testing function is provided with three arguments:\n          - The provided value for the option;\n          - A reference to the options object;\n          - The name for the option;\n       The testing function returns false when an error is detected,\n      or true when everything is OK. It can also modify the option\n      object, to make sure all values can be correctly looped elsewhere. */\n  //region Defaults\n\n\n  var defaultFormatter = {\n    to: function (value) {\n      return value !== undefined && value.toFixed(2);\n    },\n    from: Number\n  };\n  var cssClasses = {\n    target: "target",\n    base: "base",\n    origin: "origin",\n    handle: "handle",\n    handleLower: "handle-lower",\n    handleUpper: "handle-upper",\n    touchArea: "touch-area",\n    horizontal: "horizontal",\n    vertical: "vertical",\n    background: "background",\n    connect: "connect",\n    connects: "connects",\n    ltr: "ltr",\n    rtl: "rtl",\n    textDirectionLtr: "txt-dir-ltr",\n    textDirectionRtl: "txt-dir-rtl",\n    draggable: "draggable",\n    drag: "state-drag",\n    tap: "state-tap",\n    active: "active",\n    tooltip: "tooltip",\n    pips: "pips",\n    pipsHorizontal: "pips-horizontal",\n    pipsVertical: "pips-vertical",\n    marker: "marker",\n    markerHorizontal: "marker-horizontal",\n    markerVertical: "marker-vertical",\n    markerNormal: "marker-normal",\n    markerLarge: "marker-large",\n    markerSub: "marker-sub",\n    value: "value",\n    valueHorizontal: "value-horizontal",\n    valueVertical: "value-vertical",\n    valueNormal: "value-normal",\n    valueLarge: "value-large",\n    valueSub: "value-sub"\n  }; //endregion\n\n  function validateFormat(entry) {\n    // Any object with a to and from method is supported.\n    if (isValidFormatter(entry)) {\n      return true;\n    }\n\n    throw new Error("noUiSlider (" + VERSION + "): \'format\' requires \'to\' and \'from\' methods.");\n  }\n\n  function testStep(parsed, entry) {\n    if (!isNumeric(entry)) {\n      throw new Error("noUiSlider (" + VERSION + "): \'step\' is not numeric.");\n    } // The step option can still be used to set stepping\n    // for linear sliders. Overwritten if set in \'range\'.\n\n\n    parsed.singleStep = entry;\n  }\n\n  function testKeyboardPageMultiplier(parsed, entry) {\n    if (!isNumeric(entry)) {\n      throw new Error("noUiSlider (" + VERSION + "): \'keyboardPageMultiplier\' is not numeric.");\n    }\n\n    parsed.keyboardPageMultiplier = entry;\n  }\n\n  function testKeyboardDefaultStep(parsed, entry) {\n    if (!isNumeric(entry)) {\n      throw new Error("noUiSlider (" + VERSION + "): \'keyboardDefaultStep\' is not numeric.");\n    }\n\n    parsed.keyboardDefaultStep = entry;\n  }\n\n  function testRange(parsed, entry) {\n    // Filter incorrect input.\n    if (typeof entry !== "object" || Array.isArray(entry)) {\n      throw new Error("noUiSlider (" + VERSION + "): \'range\' is not an object.");\n    } // Catch missing start or end.\n\n\n    if (entry.min === undefined || entry.max === undefined) {\n      throw new Error("noUiSlider (" + VERSION + "): Missing \'min\' or \'max\' in \'range\'.");\n    } // Catch equal start or end.\n\n\n    if (entry.min === entry.max) {\n      throw new Error("noUiSlider (" + VERSION + "): \'range\' \'min\' and \'max\' cannot be equal.");\n    }\n\n    parsed.spectrum = new Spectrum(entry, parsed.snap, parsed.singleStep);\n  }\n\n  function testStart(parsed, entry) {\n    entry = asArray(entry); // Validate input. Values aren\'t tested, as the public .val method\n    // will always provide a valid location.\n\n    if (!Array.isArray(entry) || !entry.length) {\n      throw new Error("noUiSlider (" + VERSION + "): \'start\' option is incorrect.");\n    } // Store the number of handles.\n\n\n    parsed.handles = entry.length; // When the slider is initialized, the .val method will\n    // be called with the start options.\n\n    parsed.start = entry;\n  }\n\n  function testSnap(parsed, entry) {\n    // Enforce 100% stepping within subranges.\n    parsed.snap = entry;\n\n    if (typeof entry !== "boolean") {\n      throw new Error("noUiSlider (" + VERSION + "): \'snap\' option must be a boolean.");\n    }\n  }\n\n  function testAnimate(parsed, entry) {\n    // Enforce 100% stepping within subranges.\n    parsed.animate = entry;\n\n    if (typeof entry !== "boolean") {\n      throw new Error("noUiSlider (" + VERSION + "): \'animate\' option must be a boolean.");\n    }\n  }\n\n  function testAnimationDuration(parsed, entry) {\n    parsed.animationDuration = entry;\n\n    if (typeof entry !== "number") {\n      throw new Error("noUiSlider (" + VERSION + "): \'animationDuration\' option must be a number.");\n    }\n  }\n\n  function testConnect(parsed, entry) {\n    var connect = [false];\n    var i; // Map legacy options\n\n    if (entry === "lower") {\n      entry = [true, false];\n    } else if (entry === "upper") {\n      entry = [false, true];\n    } // Handle boolean options\n\n\n    if (entry === true || entry === false) {\n      for (i = 1; i < parsed.handles; i++) {\n        connect.push(entry);\n      }\n\n      connect.push(false);\n    } // Reject invalid input\n    else if (!Array.isArray(entry) || !entry.length || entry.length !== parsed.handles + 1) {\n        throw new Error("noUiSlider (" + VERSION + "): \'connect\' option doesn\'t match handle count.");\n      } else {\n        connect = entry;\n      }\n\n    parsed.connect = connect;\n  }\n\n  function testOrientation(parsed, entry) {\n    // Set orientation to an a numerical value for easy\n    // array selection.\n    switch (entry) {\n      case "horizontal":\n        parsed.ort = 0;\n        break;\n\n      case "vertical":\n        parsed.ort = 1;\n        break;\n\n      default:\n        throw new Error("noUiSlider (" + VERSION + "): \'orientation\' option is invalid.");\n    }\n  }\n\n  function testMargin(parsed, entry) {\n    if (!isNumeric(entry)) {\n      throw new Error("noUiSlider (" + VERSION + "): \'margin\' option must be numeric.");\n    } // Issue #582\n\n\n    if (entry === 0) {\n      return;\n    }\n\n    parsed.margin = parsed.spectrum.getDistance(entry);\n  }\n\n  function testLimit(parsed, entry) {\n    if (!isNumeric(entry)) {\n      throw new Error("noUiSlider (" + VERSION + "): \'limit\' option must be numeric.");\n    }\n\n    parsed.limit = parsed.spectrum.getDistance(entry);\n\n    if (!parsed.limit || parsed.handles < 2) {\n      throw new Error("noUiSlider (" + VERSION + "): \'limit\' option is only supported on linear sliders with 2 or more handles.");\n    }\n  }\n\n  function testPadding(parsed, entry) {\n    var index;\n\n    if (!isNumeric(entry) && !Array.isArray(entry)) {\n      throw new Error("noUiSlider (" + VERSION + "): \'padding\' option must be numeric or array of exactly 2 numbers.");\n    }\n\n    if (Array.isArray(entry) && !(entry.length === 2 || isNumeric(entry[0]) || isNumeric(entry[1]))) {\n      throw new Error("noUiSlider (" + VERSION + "): \'padding\' option must be numeric or array of exactly 2 numbers.");\n    }\n\n    if (entry === 0) {\n      return;\n    }\n\n    if (!Array.isArray(entry)) {\n      entry = [entry, entry];\n    } // \'getDistance\' returns false for invalid values.\n\n\n    parsed.padding = [parsed.spectrum.getDistance(entry[0]), parsed.spectrum.getDistance(entry[1])];\n\n    for (index = 0; index < parsed.spectrum.xNumSteps.length - 1; index++) {\n      // last "range" can\'t contain step size as it is purely an endpoint.\n      if (parsed.padding[0][index] < 0 || parsed.padding[1][index] < 0) {\n        throw new Error("noUiSlider (" + VERSION + "): \'padding\' option must be a positive number(s).");\n      }\n    }\n\n    var totalPadding = entry[0] + entry[1];\n    var firstValue = parsed.spectrum.xVal[0];\n    var lastValue = parsed.spectrum.xVal[parsed.spectrum.xVal.length - 1];\n\n    if (totalPadding / (lastValue - firstValue) > 1) {\n      throw new Error("noUiSlider (" + VERSION + "): \'padding\' option must not exceed 100% of the range.");\n    }\n  }\n\n  function testDirection(parsed, entry) {\n    // Set direction as a numerical value for easy parsing.\n    // Invert connection for RTL sliders, so that the proper\n    // handles get the connect/background classes.\n    switch (entry) {\n      case "ltr":\n        parsed.dir = 0;\n        break;\n\n      case "rtl":\n        parsed.dir = 1;\n        break;\n\n      default:\n        throw new Error("noUiSlider (" + VERSION + "): \'direction\' option was not recognized.");\n    }\n  }\n\n  function testBehaviour(parsed, entry) {\n    // Make sure the input is a string.\n    if (typeof entry !== "string") {\n      throw new Error("noUiSlider (" + VERSION + "): \'behaviour\' must be a string containing options.");\n    } // Check if the string contains any keywords.\n    // None are required.\n\n\n    var tap = entry.indexOf("tap") >= 0;\n    var drag = entry.indexOf("drag") >= 0;\n    var fixed = entry.indexOf("fixed") >= 0;\n    var snap = entry.indexOf("snap") >= 0;\n    var hover = entry.indexOf("hover") >= 0;\n    var unconstrained = entry.indexOf("unconstrained") >= 0;\n\n    if (fixed) {\n      if (parsed.handles !== 2) {\n        throw new Error("noUiSlider (" + VERSION + "): \'fixed\' behaviour must be used with 2 handles");\n      } // Use margin to enforce fixed state\n\n\n      testMargin(parsed, parsed.start[1] - parsed.start[0]);\n    }\n\n    if (unconstrained && (parsed.margin || parsed.limit)) {\n      throw new Error("noUiSlider (" + VERSION + "): \'unconstrained\' behaviour cannot be used with margin or limit");\n    }\n\n    parsed.events = {\n      tap: tap || snap,\n      drag: drag,\n      fixed: fixed,\n      snap: snap,\n      hover: hover,\n      unconstrained: unconstrained\n    };\n  }\n\n  function testTooltips(parsed, entry) {\n    if (entry === false) {\n      return;\n    }\n\n    if (entry === true) {\n      parsed.tooltips = [];\n\n      for (var i = 0; i < parsed.handles; i++) {\n        parsed.tooltips.push(true);\n      }\n    } else {\n      parsed.tooltips = asArray(entry);\n\n      if (parsed.tooltips.length !== parsed.handles) {\n        throw new Error("noUiSlider (" + VERSION + "): must pass a formatter for all handles.");\n      }\n\n      parsed.tooltips.forEach(function (formatter) {\n        if (typeof formatter !== "boolean" && (typeof formatter !== "object" || typeof formatter.to !== "function")) {\n          throw new Error("noUiSlider (" + VERSION + "): \'tooltips\' must be passed a formatter or \'false\'.");\n        }\n      });\n    }\n  }\n\n  function testAriaFormat(parsed, entry) {\n    parsed.ariaFormat = entry;\n    validateFormat(entry);\n  }\n\n  function testFormat(parsed, entry) {\n    parsed.format = entry;\n    validateFormat(entry);\n  }\n\n  function testKeyboardSupport(parsed, entry) {\n    parsed.keyboardSupport = entry;\n\n    if (typeof entry !== "boolean") {\n      throw new Error("noUiSlider (" + VERSION + "): \'keyboardSupport\' option must be a boolean.");\n    }\n  }\n\n  function testDocumentElement(parsed, entry) {\n    // This is an advanced option. Passed values are used without validation.\n    parsed.documentElement = entry;\n  }\n\n  function testCssPrefix(parsed, entry) {\n    if (typeof entry !== "string" && entry !== false) {\n      throw new Error("noUiSlider (" + VERSION + "): \'cssPrefix\' must be a string or `false`.");\n    }\n\n    parsed.cssPrefix = entry;\n  }\n\n  function testCssClasses(parsed, entry) {\n    if (typeof entry !== "object") {\n      throw new Error("noUiSlider (" + VERSION + "): \'cssClasses\' must be an object.");\n    }\n\n    if (typeof parsed.cssPrefix === "string") {\n      parsed.cssClasses = {};\n\n      for (var key in entry) {\n        if (!entry.hasOwnProperty(key)) {\n          continue;\n        }\n\n        parsed.cssClasses[key] = parsed.cssPrefix + entry[key];\n      }\n    } else {\n      parsed.cssClasses = entry;\n    }\n  } // Test all developer settings and parse to assumption-safe values.\n\n\n  function testOptions(options) {\n    // To prove a fix for #537, freeze options here.\n    // If the object is modified, an error will be thrown.\n    // Object.freeze(options);\n    var parsed = {\n      margin: 0,\n      limit: 0,\n      padding: 0,\n      animate: true,\n      animationDuration: 300,\n      ariaFormat: defaultFormatter,\n      format: defaultFormatter\n    }; // Tests are executed in the order they are presented here.\n\n    var tests = {\n      step: {\n        r: false,\n        t: testStep\n      },\n      keyboardPageMultiplier: {\n        r: false,\n        t: testKeyboardPageMultiplier\n      },\n      keyboardDefaultStep: {\n        r: false,\n        t: testKeyboardDefaultStep\n      },\n      start: {\n        r: true,\n        t: testStart\n      },\n      connect: {\n        r: true,\n        t: testConnect\n      },\n      direction: {\n        r: true,\n        t: testDirection\n      },\n      snap: {\n        r: false,\n        t: testSnap\n      },\n      animate: {\n        r: false,\n        t: testAnimate\n      },\n      animationDuration: {\n        r: false,\n        t: testAnimationDuration\n      },\n      range: {\n        r: true,\n        t: testRange\n      },\n      orientation: {\n        r: false,\n        t: testOrientation\n      },\n      margin: {\n        r: false,\n        t: testMargin\n      },\n      limit: {\n        r: false,\n        t: testLimit\n      },\n      padding: {\n        r: false,\n        t: testPadding\n      },\n      behaviour: {\n        r: true,\n        t: testBehaviour\n      },\n      ariaFormat: {\n        r: false,\n        t: testAriaFormat\n      },\n      format: {\n        r: false,\n        t: testFormat\n      },\n      tooltips: {\n        r: false,\n        t: testTooltips\n      },\n      keyboardSupport: {\n        r: true,\n        t: testKeyboardSupport\n      },\n      documentElement: {\n        r: false,\n        t: testDocumentElement\n      },\n      cssPrefix: {\n        r: true,\n        t: testCssPrefix\n      },\n      cssClasses: {\n        r: true,\n        t: testCssClasses\n      }\n    };\n    var defaults = {\n      connect: false,\n      direction: "ltr",\n      behaviour: "tap",\n      orientation: "horizontal",\n      keyboardSupport: true,\n      cssPrefix: "noUi-",\n      cssClasses: cssClasses,\n      keyboardPageMultiplier: 5,\n      keyboardDefaultStep: 10\n    }; // AriaFormat defaults to regular format, if any.\n\n    if (options.format && !options.ariaFormat) {\n      options.ariaFormat = options.format;\n    } // Run all options through a testing mechanism to ensure correct\n    // input. It should be noted that options might get modified to\n    // be handled properly. E.g. wrapping integers in arrays.\n\n\n    Object.keys(tests).forEach(function (name) {\n      // If the option isn\'t set, but it is required, throw an error.\n      if (!isSet(options[name]) && defaults[name] === undefined) {\n        if (tests[name].r) {\n          throw new Error("noUiSlider (" + VERSION + "): \'" + name + "\' is required.");\n        }\n\n        return true;\n      }\n\n      tests[name].t(parsed, !isSet(options[name]) ? defaults[name] : options[name]);\n    }); // Forward pips options\n\n    parsed.pips = options.pips; // All recent browsers accept unprefixed transform.\n    // We need -ms- for IE9 and -webkit- for older Android;\n    // Assume use of -webkit- if unprefixed and -ms- are not supported.\n    // https://caniuse.com/#feat=transforms2d\n\n    var d = document.createElement("div");\n    var msPrefix = d.style.msTransform !== undefined;\n    var noPrefix = d.style.transform !== undefined;\n    parsed.transformRule = noPrefix ? "transform" : msPrefix ? "msTransform" : "webkitTransform"; // Pips don\'t move, so we can place them using left/top.\n\n    var styles = [["left", "top"], ["right", "bottom"]];\n    parsed.style = styles[parsed.dir][parsed.ort];\n    return parsed;\n  } //endregion\n\n\n  function scope(target, options, originalOptions) {\n    var actions = getActions();\n    var supportsTouchActionNone = getSupportsTouchActionNone();\n    var supportsPassive = supportsTouchActionNone && getSupportsPassive(); // All variables local to \'scope\' are prefixed with \'scope_\'\n    // Slider DOM Nodes\n\n    var scope_Target = target;\n    var scope_Base;\n    var scope_Handles;\n    var scope_Connects;\n    var scope_Pips;\n    var scope_Tooltips; // Slider state values\n\n    var scope_Spectrum = options.spectrum;\n    var scope_Values = [];\n    var scope_Locations = [];\n    var scope_HandleNumbers = [];\n    var scope_ActiveHandlesCount = 0;\n    var scope_Events = {}; // Exposed API\n\n    var scope_Self; // Document Nodes\n\n    var scope_Document = target.ownerDocument;\n    var scope_DocumentElement = options.documentElement || scope_Document.documentElement;\n    var scope_Body = scope_Document.body; // Pips constants\n\n    var PIPS_NONE = -1;\n    var PIPS_NO_VALUE = 0;\n    var PIPS_LARGE_VALUE = 1;\n    var PIPS_SMALL_VALUE = 2; // For horizontal sliders in standard ltr documents,\n    // make .noUi-origin overflow to the left so the document doesn\'t scroll.\n\n    var scope_DirOffset = scope_Document.dir === "rtl" || options.ort === 1 ? 0 : 100; // Creates a node, adds it to target, returns the new node.\n\n    function addNodeTo(addTarget, className) {\n      var div = scope_Document.createElement("div");\n\n      if (className) {\n        addClass(div, className);\n      }\n\n      addTarget.appendChild(div);\n      return div;\n    } // Append a origin to the base\n\n\n    function addOrigin(base, handleNumber) {\n      var origin = addNodeTo(base, options.cssClasses.origin);\n      var handle = addNodeTo(origin, options.cssClasses.handle);\n      addNodeTo(handle, options.cssClasses.touchArea);\n      handle.setAttribute("data-handle", handleNumber);\n\n      if (options.keyboardSupport) {\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex\n        // 0 = focusable and reachable\n        handle.setAttribute("tabindex", "0");\n        handle.addEventListener("keydown", function (event) {\n          return eventKeydown(event, handleNumber);\n        });\n      }\n\n      handle.setAttribute("role", "slider");\n      handle.setAttribute("aria-orientation", options.ort ? "vertical" : "horizontal");\n\n      if (handleNumber === 0) {\n        addClass(handle, options.cssClasses.handleLower);\n      } else if (handleNumber === options.handles - 1) {\n        addClass(handle, options.cssClasses.handleUpper);\n      }\n\n      return origin;\n    } // Insert nodes for connect elements\n\n\n    function addConnect(base, add) {\n      if (!add) {\n        return false;\n      }\n\n      return addNodeTo(base, options.cssClasses.connect);\n    } // Add handles to the slider base.\n\n\n    function addElements(connectOptions, base) {\n      var connectBase = addNodeTo(base, options.cssClasses.connects);\n      scope_Handles = [];\n      scope_Connects = [];\n      scope_Connects.push(addConnect(connectBase, connectOptions[0])); // [::::O====O====O====]\n      // connectOptions = [0, 1, 1, 1]\n\n      for (var i = 0; i < options.handles; i++) {\n        // Keep a list of all added handles.\n        scope_Handles.push(addOrigin(base, i));\n        scope_HandleNumbers[i] = i;\n        scope_Connects.push(addConnect(connectBase, connectOptions[i + 1]));\n      }\n    } // Initialize a single slider.\n\n\n    function addSlider(addTarget) {\n      // Apply classes and data to the target.\n      addClass(addTarget, options.cssClasses.target);\n\n      if (options.dir === 0) {\n        addClass(addTarget, options.cssClasses.ltr);\n      } else {\n        addClass(addTarget, options.cssClasses.rtl);\n      }\n\n      if (options.ort === 0) {\n        addClass(addTarget, options.cssClasses.horizontal);\n      } else {\n        addClass(addTarget, options.cssClasses.vertical);\n      }\n\n      var textDirection = getComputedStyle(addTarget).direction;\n\n      if (textDirection === "rtl") {\n        addClass(addTarget, options.cssClasses.textDirectionRtl);\n      } else {\n        addClass(addTarget, options.cssClasses.textDirectionLtr);\n      }\n\n      return addNodeTo(addTarget, options.cssClasses.base);\n    }\n\n    function addTooltip(handle, handleNumber) {\n      if (!options.tooltips[handleNumber]) {\n        return false;\n      }\n\n      return addNodeTo(handle.firstChild, options.cssClasses.tooltip);\n    }\n\n    function isSliderDisabled() {\n      return scope_Target.hasAttribute("disabled");\n    } // Disable the slider dragging if any handle is disabled\n\n\n    function isHandleDisabled(handleNumber) {\n      var handleOrigin = scope_Handles[handleNumber];\n      return handleOrigin.hasAttribute("disabled");\n    }\n\n    function removeTooltips() {\n      if (scope_Tooltips) {\n        removeEvent("update.tooltips");\n        scope_Tooltips.forEach(function (tooltip) {\n          if (tooltip) {\n            removeElement(tooltip);\n          }\n        });\n        scope_Tooltips = null;\n      }\n    } // The tooltips option is a shorthand for using the \'update\' event.\n\n\n    function tooltips() {\n      removeTooltips(); // Tooltips are added with options.tooltips in original order.\n\n      scope_Tooltips = scope_Handles.map(addTooltip);\n      bindEvent("update.tooltips", function (values, handleNumber, unencoded) {\n        if (!scope_Tooltips[handleNumber]) {\n          return;\n        }\n\n        var formattedValue = values[handleNumber];\n\n        if (options.tooltips[handleNumber] !== true) {\n          formattedValue = options.tooltips[handleNumber].to(unencoded[handleNumber]);\n        }\n\n        scope_Tooltips[handleNumber].innerHTML = formattedValue;\n      });\n    }\n\n    function aria() {\n      bindEvent("update", function (values, handleNumber, unencoded, tap, positions) {\n        // Update Aria Values for all handles, as a change in one changes min and max values for the next.\n        scope_HandleNumbers.forEach(function (index) {\n          var handle = scope_Handles[index];\n          var min = checkHandlePosition(scope_Locations, index, 0, true, true, true);\n          var max = checkHandlePosition(scope_Locations, index, 100, true, true, true);\n          var now = positions[index]; // Formatted value for display\n\n          var text = options.ariaFormat.to(unencoded[index]); // Map to slider range values\n\n          min = scope_Spectrum.fromStepping(min).toFixed(1);\n          max = scope_Spectrum.fromStepping(max).toFixed(1);\n          now = scope_Spectrum.fromStepping(now).toFixed(1);\n          handle.children[0].setAttribute("aria-valuemin", min);\n          handle.children[0].setAttribute("aria-valuemax", max);\n          handle.children[0].setAttribute("aria-valuenow", now);\n          handle.children[0].setAttribute("aria-valuetext", text);\n        });\n      });\n    }\n\n    function getGroup(mode, values, stepped) {\n      // Use the range.\n      if (mode === "range" || mode === "steps") {\n        return scope_Spectrum.xVal;\n      }\n\n      if (mode === "count") {\n        if (values < 2) {\n          throw new Error("noUiSlider (" + VERSION + "): \'values\' (>= 2) required for mode \'count\'.");\n        } // Divide 0 - 100 in \'count\' parts.\n\n\n        var interval = values - 1;\n        var spread = 100 / interval;\n        values = []; // List these parts and have them handled as \'positions\'.\n\n        while (interval--) {\n          values[interval] = interval * spread;\n        }\n\n        values.push(100);\n        mode = "positions";\n      }\n\n      if (mode === "positions") {\n        // Map all percentages to on-range values.\n        return values.map(function (value) {\n          return scope_Spectrum.fromStepping(stepped ? scope_Spectrum.getStep(value) : value);\n        });\n      }\n\n      if (mode === "values") {\n        // If the value must be stepped, it needs to be converted to a percentage first.\n        if (stepped) {\n          return values.map(function (value) {\n            // Convert to percentage, apply step, return to value.\n            return scope_Spectrum.fromStepping(scope_Spectrum.getStep(scope_Spectrum.toStepping(value)));\n          });\n        } // Otherwise, we can simply use the values.\n\n\n        return values;\n      }\n    }\n\n    function generateSpread(density, mode, group) {\n      function safeIncrement(value, increment) {\n        // Avoid floating point variance by dropping the smallest decimal places.\n        return (value + increment).toFixed(7) / 1;\n      }\n\n      var indexes = {};\n      var firstInRange = scope_Spectrum.xVal[0];\n      var lastInRange = scope_Spectrum.xVal[scope_Spectrum.xVal.length - 1];\n      var ignoreFirst = false;\n      var ignoreLast = false;\n      var prevPct = 0; // Create a copy of the group, sort it and filter away all duplicates.\n\n      group = unique(group.slice().sort(function (a, b) {\n        return a - b;\n      })); // Make sure the range starts with the first element.\n\n      if (group[0] !== firstInRange) {\n        group.unshift(firstInRange);\n        ignoreFirst = true;\n      } // Likewise for the last one.\n\n\n      if (group[group.length - 1] !== lastInRange) {\n        group.push(lastInRange);\n        ignoreLast = true;\n      }\n\n      group.forEach(function (current, index) {\n        // Get the current step and the lower + upper positions.\n        var step;\n        var i;\n        var q;\n        var low = current;\n        var high = group[index + 1];\n        var newPct;\n        var pctDifference;\n        var pctPos;\n        var type;\n        var steps;\n        var realSteps;\n        var stepSize;\n        var isSteps = mode === "steps"; // When using \'steps\' mode, use the provided steps.\n        // Otherwise, we\'ll step on to the next subrange.\n\n        if (isSteps) {\n          step = scope_Spectrum.xNumSteps[index];\n        } // Default to a \'full\' step.\n\n\n        if (!step) {\n          step = high - low;\n        } // Low can be 0, so test for false. If high is undefined,\n        // we are at the last subrange. Index 0 is already handled.\n\n\n        if (low === false || high === undefined) {\n          return;\n        } // Make sure step isn\'t 0, which would cause an infinite loop (#654)\n\n\n        step = Math.max(step, 0.0000001); // Find all steps in the subrange.\n\n        for (i = low; i <= high; i = safeIncrement(i, step)) {\n          // Get the percentage value for the current step,\n          // calculate the size for the subrange.\n          newPct = scope_Spectrum.toStepping(i);\n          pctDifference = newPct - prevPct;\n          steps = pctDifference / density;\n          realSteps = Math.round(steps); // This ratio represents the amount of percentage-space a point indicates.\n          // For a density 1 the points/percentage = 1. For density 2, that percentage needs to be re-divided.\n          // Round the percentage offset to an even number, then divide by two\n          // to spread the offset on both sides of the range.\n\n          stepSize = pctDifference / realSteps; // Divide all points evenly, adding the correct number to this subrange.\n          // Run up to <= so that 100% gets a point, event if ignoreLast is set.\n\n          for (q = 1; q <= realSteps; q += 1) {\n            // The ratio between the rounded value and the actual size might be ~1% off.\n            // Correct the percentage offset by the number of points\n            // per subrange. density = 1 will result in 100 points on the\n            // full range, 2 for 50, 4 for 25, etc.\n            pctPos = prevPct + q * stepSize;\n            indexes[pctPos.toFixed(5)] = [scope_Spectrum.fromStepping(pctPos), 0];\n          } // Determine the point type.\n\n\n          type = group.indexOf(i) > -1 ? PIPS_LARGE_VALUE : isSteps ? PIPS_SMALL_VALUE : PIPS_NO_VALUE; // Enforce the \'ignoreFirst\' option by overwriting the type for 0.\n\n          if (!index && ignoreFirst && i !== high) {\n            type = 0;\n          }\n\n          if (!(i === high && ignoreLast)) {\n            // Mark the \'type\' of this point. 0 = plain, 1 = real value, 2 = step value.\n            indexes[newPct.toFixed(5)] = [i, type];\n          } // Update the percentage count.\n\n\n          prevPct = newPct;\n        }\n      });\n      return indexes;\n    }\n\n    function addMarking(spread, filterFunc, formatter) {\n      var element = scope_Document.createElement("div");\n      var valueSizeClasses = [];\n      valueSizeClasses[PIPS_NO_VALUE] = options.cssClasses.valueNormal;\n      valueSizeClasses[PIPS_LARGE_VALUE] = options.cssClasses.valueLarge;\n      valueSizeClasses[PIPS_SMALL_VALUE] = options.cssClasses.valueSub;\n      var markerSizeClasses = [];\n      markerSizeClasses[PIPS_NO_VALUE] = options.cssClasses.markerNormal;\n      markerSizeClasses[PIPS_LARGE_VALUE] = options.cssClasses.markerLarge;\n      markerSizeClasses[PIPS_SMALL_VALUE] = options.cssClasses.markerSub;\n      var valueOrientationClasses = [options.cssClasses.valueHorizontal, options.cssClasses.valueVertical];\n      var markerOrientationClasses = [options.cssClasses.markerHorizontal, options.cssClasses.markerVertical];\n      addClass(element, options.cssClasses.pips);\n      addClass(element, options.ort === 0 ? options.cssClasses.pipsHorizontal : options.cssClasses.pipsVertical);\n\n      function getClasses(type, source) {\n        var a = source === options.cssClasses.value;\n        var orientationClasses = a ? valueOrientationClasses : markerOrientationClasses;\n        var sizeClasses = a ? valueSizeClasses : markerSizeClasses;\n        return source + " " + orientationClasses[options.ort] + " " + sizeClasses[type];\n      }\n\n      function addSpread(offset, value, type) {\n        // Apply the filter function, if it is set.\n        type = filterFunc ? filterFunc(value, type) : type;\n\n        if (type === PIPS_NONE) {\n          return;\n        } // Add a marker for every point\n\n\n        var node = addNodeTo(element, false);\n        node.className = getClasses(type, options.cssClasses.marker);\n        node.style[options.style] = offset + "%"; // Values are only appended for points marked \'1\' or \'2\'.\n\n        if (type > PIPS_NO_VALUE) {\n          node = addNodeTo(element, false);\n          node.className = getClasses(type, options.cssClasses.value);\n          node.setAttribute("data-value", value);\n          node.style[options.style] = offset + "%";\n          node.innerHTML = formatter.to(value);\n        }\n      } // Append all points.\n\n\n      Object.keys(spread).forEach(function (offset) {\n        addSpread(offset, spread[offset][0], spread[offset][1]);\n      });\n      return element;\n    }\n\n    function removePips() {\n      if (scope_Pips) {\n        removeElement(scope_Pips);\n        scope_Pips = null;\n      }\n    }\n\n    function pips(grid) {\n      // Fix #669\n      removePips();\n      var mode = grid.mode;\n      var density = grid.density || 1;\n      var filter = grid.filter || false;\n      var values = grid.values || false;\n      var stepped = grid.stepped || false;\n      var group = getGroup(mode, values, stepped);\n      var spread = generateSpread(density, mode, group);\n      var format = grid.format || {\n        to: Math.round\n      };\n      scope_Pips = scope_Target.appendChild(addMarking(spread, filter, format));\n      return scope_Pips;\n    } // Shorthand for base dimensions.\n\n\n    function baseSize() {\n      var rect = scope_Base.getBoundingClientRect();\n      var alt = "offset" + ["Width", "Height"][options.ort];\n      return options.ort === 0 ? rect.width || scope_Base[alt] : rect.height || scope_Base[alt];\n    } // Handler for attaching events trough a proxy.\n\n\n    function attachEvent(events, element, callback, data) {\n      // This function can be used to \'filter\' events to the slider.\n      // element is a node, not a nodeList\n      var method = function (e) {\n        e = fixEvent(e, data.pageOffset, data.target || element); // fixEvent returns false if this event has a different target\n        // when handling (multi-) touch events;\n\n        if (!e) {\n          return false;\n        } // doNotReject is passed by all end events to make sure released touches\n        // are not rejected, leaving the slider "stuck" to the cursor;\n\n\n        if (isSliderDisabled() && !data.doNotReject) {\n          return false;\n        } // Stop if an active \'tap\' transition is taking place.\n\n\n        if (hasClass(scope_Target, options.cssClasses.tap) && !data.doNotReject) {\n          return false;\n        } // Ignore right or middle clicks on start #454\n\n\n        if (events === actions.start && e.buttons !== undefined && e.buttons > 1) {\n          return false;\n        } // Ignore right or middle clicks on start #454\n\n\n        if (data.hover && e.buttons) {\n          return false;\n        } // \'supportsPassive\' is only true if a browser also supports touch-action: none in CSS.\n        // iOS safari does not, so it doesn\'t get to benefit from passive scrolling. iOS does support\n        // touch-action: manipulation, but that allows panning, which breaks\n        // sliders after zooming/on non-responsive pages.\n        // See: https://bugs.webkit.org/show_bug.cgi?id=133112\n\n\n        if (!supportsPassive) {\n          e.preventDefault();\n        }\n\n        e.calcPoint = e.points[options.ort]; // Call the event handler with the event [ and additional data ].\n\n        callback(e, data);\n      };\n\n      var methods = []; // Bind a closure on the target for every event type.\n\n      events.split(" ").forEach(function (eventName) {\n        element.addEventListener(eventName, method, supportsPassive ? {\n          passive: true\n        } : false);\n        methods.push([eventName, method]);\n      });\n      return methods;\n    } // Provide a clean event with standardized offset values.\n\n\n    function fixEvent(e, pageOffset, eventTarget) {\n      // Filter the event to register the type, which can be\n      // touch, mouse or pointer. Offset changes need to be\n      // made on an event specific basis.\n      var touch = e.type.indexOf("touch") === 0;\n      var mouse = e.type.indexOf("mouse") === 0;\n      var pointer = e.type.indexOf("pointer") === 0;\n      var x;\n      var y; // IE10 implemented pointer events with a prefix;\n\n      if (e.type.indexOf("MSPointer") === 0) {\n        pointer = true;\n      } // The only thing one handle should be concerned about is the touches that originated on top of it.\n\n\n      if (touch) {\n        // Returns true if a touch originated on the target.\n        var isTouchOnTarget = function (checkTouch) {\n          return checkTouch.target === eventTarget || eventTarget.contains(checkTouch.target) || checkTouch.target.shadowRoot && checkTouch.target.shadowRoot.contains(eventTarget);\n        }; // In the case of touchstart events, we need to make sure there is still no more than one\n        // touch on the target so we look amongst all touches.\n\n\n        if (e.type === "touchstart") {\n          var targetTouches = Array.prototype.filter.call(e.touches, isTouchOnTarget); // Do not support more than one touch per handle.\n\n          if (targetTouches.length > 1) {\n            return false;\n          }\n\n          x = targetTouches[0].pageX;\n          y = targetTouches[0].pageY;\n        } else {\n          // In the other cases, find on changedTouches is enough.\n          var targetTouch = Array.prototype.find.call(e.changedTouches, isTouchOnTarget); // Cancel if the target touch has not moved.\n\n          if (!targetTouch) {\n            return false;\n          }\n\n          x = targetTouch.pageX;\n          y = targetTouch.pageY;\n        }\n      }\n\n      pageOffset = pageOffset || getPageOffset(scope_Document);\n\n      if (mouse || pointer) {\n        x = e.clientX + pageOffset.x;\n        y = e.clientY + pageOffset.y;\n      }\n\n      e.pageOffset = pageOffset;\n      e.points = [x, y];\n      e.cursor = mouse || pointer; // Fix #435\n\n      return e;\n    } // Translate a coordinate in the document to a percentage on the slider\n\n\n    function calcPointToPercentage(calcPoint) {\n      var location = calcPoint - offset(scope_Base, options.ort);\n      var proposal = location * 100 / baseSize(); // Clamp proposal between 0% and 100%\n      // Out-of-bound coordinates may occur when .noUi-base pseudo-elements\n      // are used (e.g. contained handles feature)\n\n      proposal = limit(proposal);\n      return options.dir ? 100 - proposal : proposal;\n    } // Find handle closest to a certain percentage on the slider\n\n\n    function getClosestHandle(clickedPosition) {\n      var smallestDifference = 100;\n      var handleNumber = false;\n      scope_Handles.forEach(function (handle, index) {\n        // Disabled handles are ignored\n        if (isHandleDisabled(index)) {\n          return;\n        }\n\n        var handlePosition = scope_Locations[index];\n        var differenceWithThisHandle = Math.abs(handlePosition - clickedPosition); // Initial state\n\n        var clickAtEdge = differenceWithThisHandle === 100 && smallestDifference === 100; // Difference with this handle is smaller than the previously checked handle\n\n        var isCloser = differenceWithThisHandle < smallestDifference;\n        var isCloserAfter = differenceWithThisHandle <= smallestDifference && clickedPosition > handlePosition;\n\n        if (isCloser || isCloserAfter || clickAtEdge) {\n          handleNumber = index;\n          smallestDifference = differenceWithThisHandle;\n        }\n      });\n      return handleNumber;\n    } // Fire \'end\' when a mouse or pen leaves the document.\n\n\n    function documentLeave(event, data) {\n      if (event.type === "mouseout" && event.target.nodeName === "HTML" && event.relatedTarget === null) {\n        eventEnd(event, data);\n      }\n    } // Handle movement on document for handle and range drag.\n\n\n    function eventMove(event, data) {\n      // Fix #498\n      // Check value of .buttons in \'start\' to work around a bug in IE10 mobile (data.buttonsProperty).\n      // https://connect.microsoft.com/IE/feedback/details/927005/mobile-ie10-windows-phone-buttons-property-of-pointermove-event-always-zero\n      // IE9 has .buttons and .which zero on mousemove.\n      // Firefox breaks the spec MDN defines.\n      if (navigator.appVersion.indexOf("MSIE 9") === -1 && event.buttons === 0 && data.buttonsProperty !== 0) {\n        return eventEnd(event, data);\n      } // Check if we are moving up or down\n\n\n      var movement = (options.dir ? -1 : 1) * (event.calcPoint - data.startCalcPoint); // Convert the movement into a percentage of the slider width/height\n\n      var proposal = movement * 100 / data.baseSize;\n      moveHandles(movement > 0, proposal, data.locations, data.handleNumbers);\n    } // Unbind move events on document, call callbacks.\n\n\n    function eventEnd(event, data) {\n      // The handle is no longer active, so remove the class.\n      if (data.handle) {\n        removeClass(data.handle, options.cssClasses.active);\n        scope_ActiveHandlesCount -= 1;\n      } // Unbind the move and end events, which are added on \'start\'.\n\n\n      data.listeners.forEach(function (c) {\n        scope_DocumentElement.removeEventListener(c[0], c[1]);\n      });\n\n      if (scope_ActiveHandlesCount === 0) {\n        // Remove dragging class.\n        removeClass(scope_Target, options.cssClasses.drag);\n        setZindex(); // Remove cursor styles and text-selection events bound to the body.\n\n        if (event.cursor) {\n          scope_Body.style.cursor = "";\n          scope_Body.removeEventListener("selectstart", preventDefault);\n        }\n      }\n\n      data.handleNumbers.forEach(function (handleNumber) {\n        fireEvent("change", handleNumber);\n        fireEvent("set", handleNumber);\n        fireEvent("end", handleNumber);\n      });\n    } // Bind move events on document.\n\n\n    function eventStart(event, data) {\n      console.log(\'Event start\'); // Ignore event if any handle is disabled\n\n      if (data.handleNumbers.some(isHandleDisabled)) {\n        return false;\n      }\n\n      var handle;\n\n      if (data.handleNumbers.length === 1) {\n        var handleOrigin = scope_Handles[data.handleNumbers[0]];\n        handle = handleOrigin.children[0];\n        scope_ActiveHandlesCount += 1; // Mark the handle as \'active\' so it can be styled.\n\n        addClass(handle, options.cssClasses.active);\n      } // A drag should never propagate up to the \'tap\' event.\n\n\n      event.stopPropagation(); // Record the event listeners.\n\n      var listeners = []; // Attach the move and end events.\n\n      var moveEvent = attachEvent(actions.move, scope_DocumentElement, eventMove, {\n        // The event target has changed so we need to propagate the original one so that we keep\n        // relying on it to extract target touches.\n        target: event.target,\n        handle: handle,\n        listeners: listeners,\n        startCalcPoint: event.calcPoint,\n        baseSize: baseSize(),\n        pageOffset: event.pageOffset,\n        handleNumbers: data.handleNumbers,\n        buttonsProperty: event.buttons,\n        locations: scope_Locations.slice()\n      });\n      var endEvent = attachEvent(actions.end, scope_DocumentElement, eventEnd, {\n        target: event.target,\n        handle: handle,\n        listeners: listeners,\n        doNotReject: true,\n        handleNumbers: data.handleNumbers\n      });\n      var outEvent = attachEvent("mouseout", scope_DocumentElement, documentLeave, {\n        target: event.target,\n        handle: handle,\n        listeners: listeners,\n        doNotReject: true,\n        handleNumbers: data.handleNumbers\n      }); // We want to make sure we pushed the listeners in the listener list rather than creating\n      // a new one as it has already been passed to the event handlers.\n\n      listeners.push.apply(listeners, moveEvent.concat(endEvent, outEvent)); // Text selection isn\'t an issue on touch devices,\n      // so adding cursor styles can be skipped.\n\n      if (event.cursor) {\n        // Prevent the \'I\' cursor and extend the range-drag cursor.\n        scope_Body.style.cursor = getComputedStyle(event.target).cursor; // Mark the target with a dragging state.\n\n        if (scope_Handles.length > 1) {\n          addClass(scope_Target, options.cssClasses.drag);\n        } // Prevent text selection when dragging the handles.\n        // In noUiSlider <= 9.2.0, this was handled by calling preventDefault on mouse/touch start/move,\n        // which is scroll blocking. The selectstart event is supported by FireFox starting from version 52,\n        // meaning the only holdout is iOS Safari. This doesn\'t matter: text selection isn\'t triggered there.\n        // The \'cursor\' flag is false.\n        // See: http://caniuse.com/#search=selectstart\n\n\n        scope_Body.addEventListener("selectstart", preventDefault, false);\n      }\n\n      data.handleNumbers.forEach(function (handleNumber) {\n        fireEvent("start", handleNumber);\n      });\n    } // Move closest handle to tapped location.\n\n\n    function eventTap(event) {\n      // Erroneous events seem to be passed in occasionally on iOS/iPadOS after user finishes interacting with\n      // the slider. They appear to be of type MouseEvent, yet they don\'t have usual properties set. Ignore tap\n      // events that have no touches or buttons associated with them.\n      if (!event.buttons && !event.touches) {\n        return false;\n      } // The tap event shouldn\'t propagate up\n\n\n      event.stopPropagation();\n      var proposal = calcPointToPercentage(event.calcPoint);\n      var handleNumber = getClosestHandle(proposal); // Tackle the case that all handles are \'disabled\'.\n\n      if (handleNumber === false) {\n        return false;\n      } // Flag the slider as it is now in a transitional state.\n      // Transition takes a configurable amount of ms (default 300). Re-enable the slider after that.\n\n\n      if (!options.events.snap) {\n        addClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);\n      }\n\n      setHandle(handleNumber, proposal, true, true);\n      setZindex();\n      fireEvent("slide", handleNumber, true);\n      fireEvent("update", handleNumber, true);\n      fireEvent("change", handleNumber, true);\n      fireEvent("set", handleNumber, true);\n\n      if (options.events.snap) {\n        eventStart(event, {\n          handleNumbers: [handleNumber]\n        });\n      }\n    } // Fires a \'hover\' event for a hovered mouse/pen position.\n\n\n    function eventHover(event) {\n      var proposal = calcPointToPercentage(event.calcPoint);\n      var to = scope_Spectrum.getStep(proposal);\n      var value = scope_Spectrum.fromStepping(to);\n      Object.keys(scope_Events).forEach(function (targetEvent) {\n        if ("hover" === targetEvent.split(".")[0]) {\n          scope_Events[targetEvent].forEach(function (callback) {\n            callback.call(scope_Self, value);\n          });\n        }\n      });\n    } // Handles keydown on focused handles\n    // Don\'t move the document when pressing arrow keys on focused handles\n\n\n    function eventKeydown(event, handleNumber) {\n      if (isSliderDisabled() || isHandleDisabled(handleNumber)) {\n        return false;\n      }\n\n      var horizontalKeys = ["Left", "Right"];\n      var verticalKeys = ["Down", "Up"];\n      var largeStepKeys = ["PageDown", "PageUp"];\n      var edgeKeys = ["Home", "End"];\n\n      if (options.dir && !options.ort) {\n        // On an right-to-left slider, the left and right keys act inverted\n        horizontalKeys.reverse();\n      } else if (options.ort && !options.dir) {\n        // On a top-to-bottom slider, the up and down keys act inverted\n        verticalKeys.reverse();\n        largeStepKeys.reverse();\n      } // Strip "Arrow" for IE compatibility. https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key\n\n\n      var key = event.key.replace("Arrow", "");\n      var isLargeDown = key === largeStepKeys[0];\n      var isLargeUp = key === largeStepKeys[1];\n      var isDown = key === verticalKeys[0] || key === horizontalKeys[0] || isLargeDown;\n      var isUp = key === verticalKeys[1] || key === horizontalKeys[1] || isLargeUp;\n      var isMin = key === edgeKeys[0];\n      var isMax = key === edgeKeys[1];\n\n      if (!isDown && !isUp && !isMin && !isMax) {\n        return true;\n      }\n\n      event.preventDefault();\n      var to;\n\n      if (isUp || isDown) {\n        var multiplier = options.keyboardPageMultiplier;\n        var direction = isDown ? 0 : 1;\n        var steps = getNextStepsForHandle(handleNumber);\n        var step = steps[direction]; // At the edge of a slider, do nothing\n\n        if (step === null) {\n          return false;\n        } // No step set, use the default of 10% of the sub-range\n\n\n        if (step === false) {\n          step = scope_Spectrum.getDefaultStep(scope_Locations[handleNumber], isDown, options.keyboardDefaultStep);\n        }\n\n        if (isLargeUp || isLargeDown) {\n          step *= multiplier;\n        } // Step over zero-length ranges (#948);\n\n\n        step = Math.max(step, 0.0000001); // Decrement for down steps\n\n        step = (isDown ? -1 : 1) * step;\n        to = scope_Values[handleNumber] + step;\n      } else if (isMax) {\n        // End key\n        to = options.spectrum.xVal[options.spectrum.xVal.length - 1];\n      } else {\n        // Home key\n        to = options.spectrum.xVal[0];\n      }\n\n      setHandle(handleNumber, scope_Spectrum.toStepping(to), true, true);\n      fireEvent("slide", handleNumber);\n      fireEvent("update", handleNumber);\n      fireEvent("change", handleNumber);\n      fireEvent("set", handleNumber);\n      return false;\n    } // Attach events to several slider parts.\n\n\n    function bindSliderEvents(behaviour) {\n      // Attach the standard drag event to the handles.\n      if (!behaviour.fixed) {\n        scope_Handles.forEach(function (handle, index) {\n          // These events are only bound to the visual handle\n          // element, not the \'real\' origin element.\n          attachEvent(actions.start, handle.children[0], eventStart, {\n            handleNumbers: [index]\n          });\n        });\n      } // Attach the tap event to the slider base.\n\n\n      if (behaviour.tap) {\n        attachEvent(actions.start, scope_Base, eventTap, {});\n      } // Fire hover events\n\n\n      if (behaviour.hover) {\n        attachEvent(actions.move, scope_Base, eventHover, {\n          hover: true\n        });\n      } // Make the range draggable.\n\n\n      if (behaviour.drag) {\n        scope_Connects.forEach(function (connect, index) {\n          if (connect === false || index === 0 || index === scope_Connects.length - 1) {\n            return;\n          }\n\n          var handleBefore = scope_Handles[index - 1];\n          var handleAfter = scope_Handles[index];\n          var eventHolders = [connect];\n          addClass(connect, options.cssClasses.draggable); // When the range is fixed, the entire range can\n          // be dragged by the handles. The handle in the first\n          // origin will propagate the start event upward,\n          // but it needs to be bound manually on the other.\n\n          if (behaviour.fixed) {\n            eventHolders.push(handleBefore.children[0]);\n            eventHolders.push(handleAfter.children[0]);\n          }\n\n          eventHolders.forEach(function (eventHolder) {\n            attachEvent(actions.start, eventHolder, eventStart, {\n              handles: [handleBefore, handleAfter],\n              handleNumbers: [index - 1, index]\n            });\n          });\n        });\n      }\n    } // Attach an event to this slider, possibly including a namespace\n\n\n    function bindEvent(namespacedEvent, callback) {\n      scope_Events[namespacedEvent] = scope_Events[namespacedEvent] || [];\n      scope_Events[namespacedEvent].push(callback); // If the event bound is \'update,\' fire it immediately for all handles.\n\n      if (namespacedEvent.split(".")[0] === "update") {\n        scope_Handles.forEach(function (a, index) {\n          fireEvent("update", index);\n        });\n      }\n    } // Undo attachment of event\n\n\n    function removeEvent(namespacedEvent) {\n      var event = namespacedEvent && namespacedEvent.split(".")[0];\n      var namespace = event && namespacedEvent.substring(event.length);\n      Object.keys(scope_Events).forEach(function (bind) {\n        var tEvent = bind.split(".")[0];\n        var tNamespace = bind.substring(tEvent.length);\n\n        if ((!event || event === tEvent) && (!namespace || namespace === tNamespace)) {\n          delete scope_Events[bind];\n        }\n      });\n    } // External event handling\n\n\n    function fireEvent(eventName, handleNumber, tap) {\n      Object.keys(scope_Events).forEach(function (targetEvent) {\n        var eventType = targetEvent.split(".")[0];\n\n        if (eventName === eventType) {\n          scope_Events[targetEvent].forEach(function (callback) {\n            callback.call( // Use the slider public API as the scope (\'this\')\n            scope_Self, // Return values as array, so arg_1[arg_2] is always valid.\n            scope_Values.map(options.format.to), // Handle index, 0 or 1\n            handleNumber, // Un-formatted slider values\n            scope_Values.slice(), // Event is fired by tap, true or false\n            tap || false, // Left offset of the handle, in relation to the slider\n            scope_Locations.slice(), // add the slider public API to an accessible parameter when this is unavailable\n            scope_Self);\n          });\n        }\n      });\n    } // Split out the handle positioning logic so the Move event can use it, too\n\n\n    function checkHandlePosition(reference, handleNumber, to, lookBackward, lookForward, getValue) {\n      var distance; // For sliders with multiple handles, limit movement to the other handle.\n      // Apply the margin option by adding it to the handle positions.\n\n      if (scope_Handles.length > 1 && !options.events.unconstrained) {\n        if (lookBackward && handleNumber > 0) {\n          distance = scope_Spectrum.getAbsoluteDistance(reference[handleNumber - 1], options.margin, 0);\n          to = Math.max(to, distance);\n        }\n\n        if (lookForward && handleNumber < scope_Handles.length - 1) {\n          distance = scope_Spectrum.getAbsoluteDistance(reference[handleNumber + 1], options.margin, 1);\n          to = Math.min(to, distance);\n        }\n      } // The limit option has the opposite effect, limiting handles to a\n      // maximum distance from another. Limit must be > 0, as otherwise\n      // handles would be unmovable.\n\n\n      if (scope_Handles.length > 1 && options.limit) {\n        if (lookBackward && handleNumber > 0) {\n          distance = scope_Spectrum.getAbsoluteDistance(reference[handleNumber - 1], options.limit, 0);\n          to = Math.min(to, distance);\n        }\n\n        if (lookForward && handleNumber < scope_Handles.length - 1) {\n          distance = scope_Spectrum.getAbsoluteDistance(reference[handleNumber + 1], options.limit, 1);\n          to = Math.max(to, distance);\n        }\n      } // The padding option keeps the handles a certain distance from the\n      // edges of the slider. Padding must be > 0.\n\n\n      if (options.padding) {\n        if (handleNumber === 0) {\n          distance = scope_Spectrum.getAbsoluteDistance(0, options.padding[0], 0);\n          to = Math.max(to, distance);\n        }\n\n        if (handleNumber === scope_Handles.length - 1) {\n          distance = scope_Spectrum.getAbsoluteDistance(100, options.padding[1], 1);\n          to = Math.min(to, distance);\n        }\n      }\n\n      to = scope_Spectrum.getStep(to); // Limit percentage to the 0 - 100 range\n\n      to = limit(to); // Return false if handle can\'t move\n\n      if (to === reference[handleNumber] && !getValue) {\n        return false;\n      }\n\n      return to;\n    } // Uses slider orientation to create CSS rules. a = base value;\n\n\n    function inRuleOrder(v, a) {\n      var o = options.ort;\n      return (o ? a : v) + ", " + (o ? v : a);\n    } // Moves handle(s) by a percentage\n    // (bool, % to move, [% where handle started, ...], [index in scope_Handles, ...])\n\n\n    function moveHandles(upward, proposal, locations, handleNumbers) {\n      var proposals = locations.slice();\n      var b = [!upward, upward];\n      var f = [upward, !upward]; // Copy handleNumbers so we don\'t change the dataset\n\n      handleNumbers = handleNumbers.slice(); // Check to see which handle is \'leading\'.\n      // If that one can\'t move the second can\'t either.\n\n      if (upward) {\n        handleNumbers.reverse();\n      } // Step 1: get the maximum percentage that any of the handles can move\n\n\n      if (handleNumbers.length > 1) {\n        handleNumbers.forEach(function (handleNumber, o) {\n          var to = checkHandlePosition(proposals, handleNumber, proposals[handleNumber] + proposal, b[o], f[o], false); // Stop if one of the handles can\'t move.\n\n          if (to === false) {\n            proposal = 0;\n          } else {\n            proposal = to - proposals[handleNumber];\n            proposals[handleNumber] = to;\n          }\n        });\n      } // If using one handle, check backward AND forward\n      else {\n          b = f = [true];\n        }\n\n      var state = false; // Step 2: Try to set the handles with the found percentage\n\n      handleNumbers.forEach(function (handleNumber, o) {\n        state = setHandle(handleNumber, locations[handleNumber] + proposal, b[o], f[o]) || state;\n      }); // Step 3: If a handle moved, fire events\n\n      if (state) {\n        handleNumbers.forEach(function (handleNumber) {\n          fireEvent("update", handleNumber);\n          fireEvent("slide", handleNumber);\n        });\n      }\n    } // Takes a base value and an offset. This offset is used for the connect bar size.\n    // In the initial design for this feature, the origin element was 1% wide.\n    // Unfortunately, a rounding bug in Chrome makes it impossible to implement this feature\n    // in this manner: https://bugs.chromium.org/p/chromium/issues/detail?id=798223\n\n\n    function transformDirection(a, b) {\n      return options.dir ? 100 - a - b : a;\n    } // Updates scope_Locations and scope_Values, updates visual state\n\n\n    function updateHandlePosition(handleNumber, to) {\n      // Update locations.\n      scope_Locations[handleNumber] = to; // Convert the value to the slider stepping/range.\n\n      scope_Values[handleNumber] = scope_Spectrum.fromStepping(to);\n      var translation = 10 * (transformDirection(to, 0) - scope_DirOffset);\n      var translateRule = "translate(" + inRuleOrder(translation + "%", "0") + ")";\n      scope_Handles[handleNumber].style[options.transformRule] = translateRule;\n      updateConnect(handleNumber);\n      updateConnect(handleNumber + 1);\n    } // Handles before the slider middle are stacked later = higher,\n    // Handles after the middle later is lower\n    // [[7] [8] .......... | .......... [5] [4]\n\n\n    function setZindex() {\n      scope_HandleNumbers.forEach(function (handleNumber) {\n        var dir = scope_Locations[handleNumber] > 50 ? -1 : 1;\n        var zIndex = 3 + (scope_Handles.length + dir * handleNumber);\n        scope_Handles[handleNumber].style.zIndex = zIndex;\n      });\n    } // Test suggested values and apply margin, step.\n\n\n    function setHandle(handleNumber, to, lookBackward, lookForward) {\n      to = checkHandlePosition(scope_Locations, handleNumber, to, lookBackward, lookForward, false);\n\n      if (to === false) {\n        return false;\n      }\n\n      updateHandlePosition(handleNumber, to);\n      return true;\n    } // Updates style attribute for connect nodes\n\n\n    function updateConnect(index) {\n      // Skip connects set to false\n      if (!scope_Connects[index]) {\n        return;\n      }\n\n      var l = 0;\n      var h = 100;\n\n      if (index !== 0) {\n        l = scope_Locations[index - 1];\n      }\n\n      if (index !== scope_Connects.length - 1) {\n        h = scope_Locations[index];\n      } // We use two rules:\n      // \'translate\' to change the left/top offset;\n      // \'scale\' to change the width of the element;\n      // As the element has a width of 100%, a translation of 100% is equal to 100% of the parent (.noUi-base)\n\n\n      var connectWidth = h - l;\n      var translateRule = "translate(" + inRuleOrder(transformDirection(l, connectWidth) + "%", "0") + ")";\n      var scaleRule = "scale(" + inRuleOrder(connectWidth / 100, "1") + ")";\n      scope_Connects[index].style[options.transformRule] = translateRule + " " + scaleRule;\n    } // Parses value passed to .set method. Returns current value if not parse-able.\n\n\n    function resolveToValue(to, handleNumber) {\n      // Setting with null indicates an \'ignore\'.\n      // Inputting \'false\' is invalid.\n      if (to === null || to === false || to === undefined) {\n        return scope_Locations[handleNumber];\n      } // If a formatted number was passed, attempt to decode it.\n\n\n      if (typeof to === "number") {\n        to = String(to);\n      }\n\n      to = options.format.from(to);\n      to = scope_Spectrum.toStepping(to); // If parsing the number failed, use the current value.\n\n      if (to === false || isNaN(to)) {\n        return scope_Locations[handleNumber];\n      }\n\n      return to;\n    } // Set the slider value.\n\n\n    function valueSet(input, fireSetEvent) {\n      var values = asArray(input);\n      var isInit = scope_Locations[0] === undefined; // Event fires by default\n\n      fireSetEvent = fireSetEvent === undefined ? true : !!fireSetEvent; // Animation is optional.\n      // Make sure the initial values were set before using animated placement.\n\n      if (options.animate && !isInit) {\n        addClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);\n      } // First pass, without lookAhead but with lookBackward. Values are set from left to right.\n\n\n      scope_HandleNumbers.forEach(function (handleNumber) {\n        setHandle(handleNumber, resolveToValue(values[handleNumber], handleNumber), true, false);\n      });\n      var i = scope_HandleNumbers.length === 1 ? 0 : 1; // Secondary passes. Now that all base values are set, apply constraints.\n      // Iterate all handles to ensure constraints are applied for the entire slider (Issue #1009)\n\n      for (; i < scope_HandleNumbers.length; ++i) {\n        scope_HandleNumbers.forEach(function (handleNumber) {\n          setHandle(handleNumber, scope_Locations[handleNumber], true, true);\n        });\n      }\n\n      setZindex();\n      scope_HandleNumbers.forEach(function (handleNumber) {\n        fireEvent("update", handleNumber); // Fire the event only for handles that received a new value, as per #579\n\n        if (values[handleNumber] !== null && fireSetEvent) {\n          fireEvent("set", handleNumber);\n        }\n      });\n    } // Reset slider to initial values\n\n\n    function valueReset(fireSetEvent) {\n      valueSet(options.start, fireSetEvent);\n    } // Set value for a single handle\n\n\n    function valueSetHandle(handleNumber, value, fireSetEvent) {\n      // Ensure numeric input\n      handleNumber = Number(handleNumber);\n\n      if (!(handleNumber >= 0 && handleNumber < scope_HandleNumbers.length)) {\n        throw new Error("noUiSlider (" + VERSION + "): invalid handle number, got: " + handleNumber);\n      } // Look both backward and forward, since we don\'t want this handle to "push" other handles (#960);\n\n\n      setHandle(handleNumber, resolveToValue(value, handleNumber), true, true);\n      fireEvent("update", handleNumber);\n\n      if (fireSetEvent) {\n        fireEvent("set", handleNumber);\n      }\n    } // Get the slider value.\n\n\n    function valueGet() {\n      var values = scope_Values.map(options.format.to); // If only one handle is used, return a single value.\n\n      if (values.length === 1) {\n        return values[0];\n      }\n\n      return values;\n    } // Removes classes from the root and empties it.\n\n\n    function destroy() {\n      for (var key in options.cssClasses) {\n        if (!options.cssClasses.hasOwnProperty(key)) {\n          continue;\n        }\n\n        removeClass(scope_Target, options.cssClasses[key]);\n      }\n\n      while (scope_Target.firstChild) {\n        scope_Target.removeChild(scope_Target.firstChild);\n      }\n\n      delete scope_Target.noUiSlider;\n    }\n\n    function getNextStepsForHandle(handleNumber) {\n      var location = scope_Locations[handleNumber];\n      var nearbySteps = scope_Spectrum.getNearbySteps(location);\n      var value = scope_Values[handleNumber];\n      var increment = nearbySteps.thisStep.step;\n      var decrement = null; // If snapped, directly use defined step value\n\n      if (options.snap) {\n        return [value - nearbySteps.stepBefore.startValue || null, nearbySteps.stepAfter.startValue - value || null];\n      } // If the next value in this step moves into the next step,\n      // the increment is the start of the next step - the current value\n\n\n      if (increment !== false) {\n        if (value + increment > nearbySteps.stepAfter.startValue) {\n          increment = nearbySteps.stepAfter.startValue - value;\n        }\n      } // If the value is beyond the starting point\n\n\n      if (value > nearbySteps.thisStep.startValue) {\n        decrement = nearbySteps.thisStep.step;\n      } else if (nearbySteps.stepBefore.step === false) {\n        decrement = false;\n      } // If a handle is at the start of a step, it always steps back into the previous step first\n      else {\n          decrement = value - nearbySteps.stepBefore.highestStep;\n        } // Now, if at the slider edges, there is no in/decrement\n\n\n      if (location === 100) {\n        increment = null;\n      } else if (location === 0) {\n        decrement = null;\n      } // As per #391, the comparison for the decrement step can have some rounding issues.\n\n\n      var stepDecimals = scope_Spectrum.countStepDecimals(); // Round per #391\n\n      if (increment !== null && increment !== false) {\n        increment = Number(increment.toFixed(stepDecimals));\n      }\n\n      if (decrement !== null && decrement !== false) {\n        decrement = Number(decrement.toFixed(stepDecimals));\n      }\n\n      return [decrement, increment];\n    } // Get the current step size for the slider.\n\n\n    function getNextSteps() {\n      return scope_HandleNumbers.map(getNextStepsForHandle);\n    } // Updateable: margin, limit, padding, step, range, animate, snap\n\n\n    function updateOptions(optionsToUpdate, fireSetEvent) {\n      // Spectrum is created using the range, snap, direction and step options.\n      // \'snap\' and \'step\' can be updated.\n      // If \'snap\' and \'step\' are not passed, they should remain unchanged.\n      var v = valueGet();\n      var updateAble = ["margin", "limit", "padding", "range", "animate", "snap", "step", "format", "pips", "tooltips"]; // Only change options that we\'re actually passed to update.\n\n      updateAble.forEach(function (name) {\n        // Check for undefined. null removes the value.\n        if (optionsToUpdate[name] !== undefined) {\n          originalOptions[name] = optionsToUpdate[name];\n        }\n      });\n      var newOptions = testOptions(originalOptions); // Load new options into the slider state\n\n      updateAble.forEach(function (name) {\n        if (optionsToUpdate[name] !== undefined) {\n          options[name] = newOptions[name];\n        }\n      });\n      scope_Spectrum = newOptions.spectrum; // Limit, margin and padding depend on the spectrum but are stored outside of it. (#677)\n\n      options.margin = newOptions.margin;\n      options.limit = newOptions.limit;\n      options.padding = newOptions.padding; // Update pips, removes existing.\n\n      if (options.pips) {\n        pips(options.pips);\n      } else {\n        removePips();\n      } // Update tooltips, removes existing.\n\n\n      if (options.tooltips) {\n        tooltips();\n      } else {\n        removeTooltips();\n      } // Invalidate the current positioning so valueSet forces an update.\n\n\n      scope_Locations = [];\n      valueSet(optionsToUpdate.start || v, fireSetEvent);\n    } // Initialization steps\n\n\n    function setupSlider() {\n      // Create the base element, initialize HTML and set classes.\n      // Add handles and connect elements.\n      scope_Base = addSlider(scope_Target);\n      addElements(options.connect, scope_Base); // Attach user events.\n\n      bindSliderEvents(options.events); // Use the public value method to set the start values.\n\n      valueSet(options.start);\n\n      if (options.pips) {\n        pips(options.pips);\n      }\n\n      if (options.tooltips) {\n        tooltips();\n      }\n\n      aria();\n    }\n\n    setupSlider(); // noinspection JSUnusedGlobalSymbols\n\n    scope_Self = {\n      destroy: destroy,\n      steps: getNextSteps,\n      on: bindEvent,\n      off: removeEvent,\n      get: valueGet,\n      set: valueSet,\n      setHandle: valueSetHandle,\n      reset: valueReset,\n      // Exposed for unit testing, don\'t use this in your application.\n      __moveHandles: function (a, b, c) {\n        moveHandles(a, b, scope_Locations, c);\n      },\n      options: originalOptions,\n      // Issue #600, #678\n      updateOptions: updateOptions,\n      target: scope_Target,\n      // Issue #597\n      removePips: removePips,\n      removeTooltips: removeTooltips,\n      getTooltips: function () {\n        return scope_Tooltips;\n      },\n      getOrigins: function () {\n        return scope_Handles;\n      },\n      pips: pips // Issue #594\n\n    };\n    return scope_Self;\n  } // Run the standard initializer\n\n\n  function initialize(target, originalOptions) {\n    if (!target || !target.nodeName) {\n      throw new Error("noUiSlider (" + VERSION + "): create requires a single element, got: " + target);\n    } // Throw an error if the slider was already initialized.\n\n\n    if (target.noUiSlider) {\n      throw new Error("noUiSlider (" + VERSION + "): Slider was already initialized.");\n    } // Test the options and create the slider environment;\n\n\n    var options = testOptions(originalOptions, target);\n    var api = scope(target, options, originalOptions);\n    target.noUiSlider = api;\n    return api;\n  } // Use an object instead of a function for future expandability;\n\n\n  return {\n    // Exposed for unit testing, don\'t use this in your application.\n    __spectrum: Spectrum,\n    version: VERSION,\n    // A reference to the default classes, allows global changes.\n    // Use the cssClasses option for changes to one slider.\n    cssClasses: cssClasses,\n    create: initialize\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n')},,,function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm91aXNsaWRlci9kaXN0cmlidXRlL25vdWlzbGlkZXIuY3NzPzQzMDEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///12\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/**\n * Russian translation for bootstrap-datepicker\n * Victor Taranenko <darwin@snowdale.com>\n */\n/* harmony default export */ __webpack_exports__["a"] = ({\n  ru: {\n    days: ["Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота"],\n    daysShort: ["Вск", "Пнд", "Втр", "Срд", "Чтв", "Птн", "Суб"],\n    daysMin: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],\n    months: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"],\n    monthsShort: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"],\n    today: "Сегодня",\n    clear: "Очистить",\n    format: "dd.mm.yyyy",\n    weekStart: 1,\n    monthsTitle: \'Месяцы\'\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmFuaWxsYWpzLWRhdGVwaWNrZXIvanMvaTE4bi9sb2NhbGVzL3J1LmpzPzg2NzMiXSwibmFtZXMiOlsicnUiLCJkYXlzIiwiZGF5c1Nob3J0IiwiZGF5c01pbiIsIm1vbnRocyIsIm1vbnRoc1Nob3J0IiwidG9kYXkiLCJjbGVhciIsImZvcm1hdCIsIndlZWtTdGFydCIsIm1vbnRoc1RpdGxlIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUllO0FBQ2JBLElBQUUsRUFBRTtBQUNGQyxRQUFJLEVBQUUsQ0FBQyxhQUFELEVBQWdCLGFBQWhCLEVBQStCLFNBQS9CLEVBQTBDLE9BQTFDLEVBQW1ELFNBQW5ELEVBQThELFNBQTlELEVBQXlFLFNBQXpFLENBREo7QUFFRkMsYUFBUyxFQUFFLENBQUMsS0FBRCxFQUFRLEtBQVIsRUFBZSxLQUFmLEVBQXNCLEtBQXRCLEVBQTZCLEtBQTdCLEVBQW9DLEtBQXBDLEVBQTJDLEtBQTNDLENBRlQ7QUFHRkMsV0FBTyxFQUFFLENBQUMsSUFBRCxFQUFPLElBQVAsRUFBYSxJQUFiLEVBQW1CLElBQW5CLEVBQXlCLElBQXpCLEVBQStCLElBQS9CLEVBQXFDLElBQXJDLENBSFA7QUFJRkMsVUFBTSxFQUFFLENBQUMsUUFBRCxFQUFXLFNBQVgsRUFBc0IsTUFBdEIsRUFBOEIsUUFBOUIsRUFBd0MsS0FBeEMsRUFBK0MsTUFBL0MsRUFBdUQsTUFBdkQsRUFBK0QsUUFBL0QsRUFBeUUsVUFBekUsRUFBcUYsU0FBckYsRUFBZ0csUUFBaEcsRUFBMEcsU0FBMUcsQ0FKTjtBQUtGQyxlQUFXLEVBQUUsQ0FBQyxLQUFELEVBQVEsS0FBUixFQUFlLEtBQWYsRUFBc0IsS0FBdEIsRUFBNkIsS0FBN0IsRUFBb0MsS0FBcEMsRUFBMkMsS0FBM0MsRUFBa0QsS0FBbEQsRUFBeUQsS0FBekQsRUFBZ0UsS0FBaEUsRUFBdUUsS0FBdkUsRUFBOEUsS0FBOUUsQ0FMWDtBQU1GQyxTQUFLLEVBQUUsU0FOTDtBQU9GQyxTQUFLLEVBQUUsVUFQTDtBQVFGQyxVQUFNLEVBQUUsWUFSTjtBQVNGQyxhQUFTLEVBQUUsQ0FUVDtBQVVGQyxlQUFXLEVBQUU7QUFWWDtBQURTLENBQWYiLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJ1c3NpYW4gdHJhbnNsYXRpb24gZm9yIGJvb3RzdHJhcC1kYXRlcGlja2VyXG4gKiBWaWN0b3IgVGFyYW5lbmtvIDxkYXJ3aW5Ac25vd2RhbGUuY29tPlxuICovXG5leHBvcnQgZGVmYXVsdCB7XG4gIHJ1OiB7XG4gICAgZGF5czogW1wi0JLQvtGB0LrRgNC10YHQtdC90YzQtVwiLCBcItCf0L7QvdC10LTQtdC70YzQvdC40LpcIiwgXCLQktGC0L7RgNC90LjQulwiLCBcItCh0YDQtdC00LBcIiwgXCLQp9C10YLQstC10YDQs1wiLCBcItCf0Y/RgtC90LjRhtCwXCIsIFwi0KHRg9Cx0LHQvtGC0LBcIl0sXG4gICAgZGF5c1Nob3J0OiBbXCLQktGB0LpcIiwgXCLQn9C90LRcIiwgXCLQktGC0YBcIiwgXCLQodGA0LRcIiwgXCLQp9GC0LJcIiwgXCLQn9GC0L1cIiwgXCLQodGD0LFcIl0sXG4gICAgZGF5c01pbjogW1wi0JLRgVwiLCBcItCf0L1cIiwgXCLQktGCXCIsIFwi0KHRgFwiLCBcItCn0YJcIiwgXCLQn9GCXCIsIFwi0KHQsVwiXSxcbiAgICBtb250aHM6IFtcItCv0L3QstCw0YDRjFwiLCBcItCk0LXQstGA0LDQu9GMXCIsIFwi0JzQsNGA0YJcIiwgXCLQkNC/0YDQtdC70YxcIiwgXCLQnNCw0LlcIiwgXCLQmNGO0L3RjFwiLCBcItCY0Y7Qu9GMXCIsIFwi0JDQstCz0YPRgdGCXCIsIFwi0KHQtdC90YLRj9Cx0YDRjFwiLCBcItCe0LrRgtGP0LHRgNGMXCIsIFwi0J3QvtGP0LHRgNGMXCIsIFwi0JTQtdC60LDQsdGA0YxcIl0sXG4gICAgbW9udGhzU2hvcnQ6IFtcItCv0L3QslwiLCBcItCk0LXQslwiLCBcItCc0LDRgFwiLCBcItCQ0L/RgFwiLCBcItCc0LDQuVwiLCBcItCY0Y7QvVwiLCBcItCY0Y7Qu1wiLCBcItCQ0LLQs1wiLCBcItCh0LXQvVwiLCBcItCe0LrRglwiLCBcItCd0L7Rj1wiLCBcItCU0LXQulwiXSxcbiAgICB0b2RheTogXCLQodC10LPQvtC00L3Rj1wiLFxuICAgIGNsZWFyOiBcItCe0YfQuNGB0YLQuNGC0YxcIixcbiAgICBmb3JtYXQ6IFwiZGQubW0ueXl5eVwiLFxuICAgIHdlZWtTdGFydDogMSxcbiAgICBtb250aHNUaXRsZTogJ9Cc0LXRgdGP0YbRiydcbiAgfVxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///13\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, "a", function() { return /* reexport */ DateRangePicker_DateRangePicker; });\n\n// UNUSED EXPORTS: Datepicker\n\n// EXTERNAL MODULE: ./node_modules/vanillajs-datepicker/js/Datepicker.js + 16 modules\nvar Datepicker = __webpack_require__(5);\n\n// EXTERNAL MODULE: ./node_modules/vanillajs-datepicker/js/lib/event.js\nvar lib_event = __webpack_require__(4);\n\n// EXTERNAL MODULE: ./node_modules/vanillajs-datepicker/js/lib/date-format.js\nvar date_format = __webpack_require__(2);\n\n// CONCATENATED MODULE: ./node_modules/vanillajs-datepicker/js/DateRangePicker.js\n\n\n // filter out the config options inapproprite to pass to Datepicker\n\nfunction filterOptions(options) {\n  const newOpts = Object.assign({}, options);\n  delete newOpts.inputs;\n  delete newOpts.allowOneSidedRange;\n  delete newOpts.maxNumberOfDates; // to ensure each datepicker handles a single date\n\n  return newOpts;\n}\n\nfunction setupDatepicker(rangepicker, changeDateListener, el, options) {\n  Object(lib_event["b" /* registerListeners */])(rangepicker, [[el, \'changeDate\', changeDateListener]]);\n  return new Datepicker["a" /* default */](el, options, rangepicker);\n}\n\nfunction onChangeDate(rangepicker, ev) {\n  // to prevent both datepickers trigger the other side\'s update each other\n  if (rangepicker.updating) {\n    return;\n  }\n\n  rangepicker.updating = true;\n  const target = ev.target;\n\n  if (target.datepicker === undefined) {\n    return;\n  }\n\n  const datepickers = rangepicker.datepickers;\n  const setDateOptions = {\n    render: false\n  };\n  const changedSide = rangepicker.inputs.indexOf(target);\n  const otherSide = changedSide === 0 ? 1 : 0;\n  const changedDate = datepickers[changedSide].dates[0];\n  const otherDate = datepickers[otherSide].dates[0];\n\n  if (changedDate !== undefined && otherDate !== undefined) {\n    // if the start of the range > the end, swap them\n    if (changedSide === 0 && changedDate > otherDate) {\n      datepickers[0].setDate(otherDate, setDateOptions);\n      datepickers[1].setDate(changedDate, setDateOptions);\n    } else if (changedSide === 1 && changedDate < otherDate) {\n      datepickers[0].setDate(changedDate, setDateOptions);\n      datepickers[1].setDate(otherDate, setDateOptions);\n    }\n  } else if (!rangepicker.allowOneSidedRange) {\n    // to prevent the range from becoming one-sided, copy changed side\'s\n    // selection (no matter if it\'s empty) to the other side\n    if (changedDate !== undefined || otherDate !== undefined) {\n      setDateOptions.clear = true;\n      datepickers[otherSide].setDate(datepickers[changedSide].dates, setDateOptions);\n    }\n  }\n\n  datepickers[0].picker.update().render();\n  datepickers[1].picker.update().render();\n  delete rangepicker.updating;\n}\n/**\n * Class representing a date range picker\n */\n\n\nclass DateRangePicker_DateRangePicker {\n  /**\n   * Create a date range picker\n   * @param  {Element} element - element to bind a date range picker\n   * @param  {Object} [options] - config options\n   */\n  constructor(element, options = {}) {\n    const inputs = Array.isArray(options.inputs) ? options.inputs : Array.from(element.querySelectorAll(\'input\'));\n\n    if (inputs.length < 2) {\n      return;\n    }\n\n    element.rangepicker = this;\n    this.element = element;\n    this.inputs = inputs.slice(0, 2);\n    this.allowOneSidedRange = !!options.allowOneSidedRange;\n    const changeDateListener = onChangeDate.bind(null, this);\n    const cleanOptions = filterOptions(options);\n    this.datepickers = [setupDatepicker(this, changeDateListener, this.inputs[0], cleanOptions), setupDatepicker(this, changeDateListener, this.inputs[1], cleanOptions)]; // normalize the range if inital dates are given\n\n    if (this.dates[0] !== undefined) {\n      onChangeDate(this, {\n        target: this.inputs[0]\n      });\n    } else if (this.dates[1] !== undefined) {\n      onChangeDate(this, {\n        target: this.inputs[1]\n      });\n    }\n  }\n  /**\n   * @type {Array} - selected date of the linked date pickers\n   */\n\n\n  get dates() {\n    if (this.datepickers) {\n      return [this.datepickers[0].dates[0], this.datepickers[1].dates[0]];\n    }\n  }\n  /**\n   * Set new values to the config options\n   * @param {Object} options - config options to update\n   */\n\n\n  setOptions(options) {\n    this.allowOneSidedRange = !!options.allowOneSidedRange;\n    const cleanOptions = filterOptions(options);\n    this.datepickers[0].setOptions(cleanOptions);\n    this.datepickers[1].setOptions(cleanOptions);\n  }\n  /**\n   * Destroy the DateRangePicker instance\n   * @return {DateRangePicker} - the instance destroyed\n   */\n\n\n  destroy() {\n    this.datepickers[0].destroy();\n    this.datepickers[1].destroy();\n    Object(lib_event["c" /* unregisterListeners */])(this);\n    delete this.element.rangepicker;\n  }\n  /**\n   * Get the start and end dates of the date range\n   *\n   * The method returns Date objects by default. If format string is passed,\n   * it returns date strings formatted in given format.\n   * The result array always contains 2 items (start date/end date) and\n   * undifined is used for unselected side. (e.g. If none is selected,\n   * the result will be [undifined, undifined]. If only the end date is set\n   * when allowOneSidedRange config option is true, [undifined, endDate] will\n   * be returned.)\n   *\n   * @param  {String} [format] - Format string to stringify the dates\n   * @return {Array} - Start and end dates\n   */\n\n\n  getDates(format = undefined) {\n    const callback = format ? date => Object(date_format["a" /* formatDate */])(date, format, this.datepickers[0].config.locale) : date => new Date(date);\n    return this.dates.map(date => date === undefined ? date : callback(date));\n  }\n\n}\n// CONCATENATED MODULE: ./node_modules/vanillajs-datepicker/js/main.js\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n')},,function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLmNzcy9ub3JtYWxpemUuY3NzP2ZiNTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///16\n")}]]);